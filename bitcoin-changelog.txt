Bitcoin version 0.3.21 released
27 April 2011

Binaries for Bitcoin version 0.3.21 are available at: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.3.21/

Changes and new features from the 0.3.20 release include:

Universal Plug and Play support. Enable automatic opening of a port for incoming connections by running bitcoin or bitcoind with the
-upnp=1 command line switch or using the Options dialog box.
Support for full-precision bitcoin amounts. You can now send, and bitcoin will display, bitcoin amounts smaller than 0.01. However, sending fewer than 0.01 bitcoins still requires a 0.01 bitcoin fee (so you can send 1.0001 bitcoins without a fee, but you will be asked to pay a fee if you try to send 0.0001).
A new method of finding bitcoin nodes to connect with, via DNS A records. Use the -dnsseed option to enable.
For developers, changes to bitcoin’s remote-procedure-call API:

New rpc command “sendmany” to send bitcoins to more than one address in a single transaction.
Several bug fixes, including a serious intermittent bug that would sometimes cause bitcoind to stop accepting rpc requests.
-logtimestamps option, to add a timestamp to each line in debug.log.
Immature blocks (newly generated, under 120 confirmations) are now shown in listtransactions.



















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



















Bitcoin version 0.3.22 released
5 June 2011

Download URL: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.3.22/

This is largely a bugfix and TX fee schedule release. We also hope to make 0.3.23 a quick release, to fix problems that the network has seen due to explosive growth in the past week.

Notable changes:

Client will accept and relay TX’s with 0.0005 BTC fee schedule (users still pay 0.01 BTC per kb, until next version)
Non-standard transactions accepted on testnet
Source code tree reorganized (prep for autotools build)
Remove “Generate Coins” option from GUI, and remove 4way SSE miner. Internal reference CPU miner remains available, but users are directed to external miners for best hash production.
IRC is overflowing. Client now bootstraps to channels #bitcoin00 - #bitcoin99
DNS names now may be used with -addnode, -connect (requires -dns to enable)
RPC changes:

listtransactions adds from param, for range queries
move may take account balances negative
settxfee added, to manually set TX fee
Recommendations: If you have trouble connecting to the network, try one or more of these techniques:

-dnsseed
-upnp, or forward port 8333 on your router



















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



















Bitcoin version 0.3.23 released
14 June 2011

Win32, Linux, MacOSX and source releases for bitcoin v0.3.23 have been uploaded to http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.3.23/

This is another quick bugfix release, trying to deal with the influx of new bitcoin users.

Priority for next version: wallet encryption

Main items of note:

P2P connect-to-node logic changed to reduce timeout a bit. The network saw a huge influx of new users, who do not permit incoming connections. This change is a short-term hack, to more quickly hunt for useful P2P connections. Better “leaf node” logic is in the works, but this should let us limp along until then. One may use -upnp to properly forward ports, and help the network. Transaction fee reduced to 0.0005 for new transactions (see note below) Client will relay transactions with fees as low as 0.0001 BTC (see note below)

NOTE: There has been some fee confusion recently. Free transactions are supported and relayed as they always have been, according to special anti-spam rules. See https://en.bitcoin.it/wiki/Transaction_fees for details.

There were no changes between -rc1 and -final.



















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



















Bitcoin version 0.3.24 released
8 July 2011

Full announcement (including signatures)

Bitcoin v0.3.24 is now available for download at http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.3.24/

This is another bug fix release. We had hoped to have wallet encryption ready for release, but more urgent fixes for existing clients were needed – most notably block download problems were getting severe. Wallet encryption is ready for testing at https://github.com/bitcoin/bitcoin/pull/352 for the git-savvy, and hopefully will follow shortly in the next release, v0.4.

Notable fixes in v0.3.24, and the main reasons for this release:

Block downloads were failing or taking unreasonable amounts of time to complete, because the increased size of the block chain was bumping up against some earlier buffer-size DoS limits.
Fix crash caused by loss/lack of network connection.
Notable changes in v0.3.24:

DNS seeding enabled by default.
UPNP enabled by default in the GUI client. The percentage of bitcoin clients that accept incoming connections is quite small, and that is a problem. This should help. bitcoind, and unofficial builds, are unchanged (though we encourage use of “-upnp” to help the network!).
Initial unit testing framework. Bitcoin sorely needs automated tests, and this is a beginning. Contributions welcome.
Internal wallet code cleanup. While invisible to an end user, this change provides the basis for v0.4’s wallet encryption.



















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



















Bitcoin version 0.4.0 released
23 September 2011

Full announcement (including signatures)

Bitcoin version 0.4.0 is now available for download at: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.4.0/

The main feature in this release is wallet private key encryption; you can set a passphrase that must be entered before sending coins. See below for more information; if you decide to encrypt your wallet, WRITE DOWN YOUR PASSPHRASE AND PUT IT IN A SECURE LOCATION. If you forget or lose your wallet passphrase, you lose your bitcoins. Previous versions of bitcoin are unable to read encrypted wallets, and will crash on startup if the wallet is encrypted.

Also note: bitcoin version 0.4 uses a newer version of Berkeley DB (bdb version 4.8) than previous versions (bdb 4.7). If you upgrade to version 0.4 and then revert back to an earlier version of bitcoin the it may be unable to start because bdb 4.7 cannot read bdb 4.8 “log” files.

Notable bug fixes from version 0.3.24
Fix several bitcoin-becomes-unresponsive bugs due to multithreading deadlocks.

Optimize database writes for large (lots of inputs) transactions (fixes a potential denial-of-service attack)

Wallet Encryption
Bitcoin supports native wallet encryption so that people who steal your wallet file don’t automatically get access to all of your Bitcoins. In order to enable this feature, chose “Encrypt Wallet” from the Options menu. You will be prompted to enter a passphrase, which will be used as the key to encrypt your wallet and will be needed every time you wish to send Bitcoins. If you lose this passphrase, you will lose access to spend all of the bitcoins in your wallet, no one, not even the Bitcoin developers can recover your Bitcoins. This means you are responsible for your own security, store your passphrase in a secure location and do not forget it.

Remember that the encryption built into bitcoin only encrypts the actual keys which are required to send your bitcoins, not the full wallet. This means that someone who steals your wallet file will be able to see all the addresses which belong to you, as well as the relevant transactions, you are only protected from someone spending your coins.

It is recommended that you backup your wallet file before you encrypt your wallet. To do this, close the Bitcoin client and copy the wallet.dat file from ~/.bitcoin/ on Linux, /Users/(user name)/Library/Application Support/Bitcoin/ on Mac OSX, and %APPDATA%/Bitcoin/ on Windows (that is /Users/(user name)/AppData/Roaming/Bitcoin on Windows Vista and 7 and /Documents and Settings/(user name)/Application Data/Bitcoin on Windows XP). Once you have copied that file to a safe location, reopen the Bitcoin client and Encrypt your wallet. If everything goes fine, delete the backup and enjoy your encrypted wallet. Note that once you encrypt your wallet, you will never be able to go back to a version of the Bitcoin client older than 0.4.

Keep in mind that you are always responsible for your own security. All it takes is a slightly more advanced wallet-stealing trojan which installs a keylogger to steal your wallet passphrase as you enter it in addition to your wallet file and you have lost all your Bitcoins. Wallet encryption cannot keep you safe if you do not practice good security, such as running up-to-date antivirus software, only entering your wallet passphrase in the Bitcoin client and using the same passphrase only as your wallet passphrase.

See the doc/README file in the bitcoin source for technical details of wallet encryption.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin-Qt version 0.5.0 released
21 November 2011

Bitcoin-Qt version 0.5.0 is now available for download at: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.0/

The major change for this release is a completely new graphical that uses the Qt user interface toolkit.

This release includes German, Spanish, Spanish-Castilian, Norwegian and Dutch translations. More translations are welcome; join the project at Transifex if you can help: https://www.transifex.com/projects/p/bitcoin/

Please report bugs using the issue tracker at GitHub: https://github.com/bitcoin/bitcoin/issues

MAJOR BUG FIX (CVE-2011-4447)
The wallet encryption feature introduced in Bitcoin version 0.4.0 did not sufficiently secure the private keys. An attacker who managed to get a copy of your encrypted wallet.dat file might be able to recover some or all of the unencrypted keys and steal the associated coins.

If you have a previously encrypted wallet.dat, the first time you run bitcoin-qt or bitcoind the wallet will be rewritten, Bitcoin will shut down, and you will be prompted to restart it to run with the new, properly encrypted file.

If you had a previously encrypted wallet.dat that might have been copied or stolen (for example, you backed it up to a public location) you should send all of your bitcoins to yourself using a new bitcoin address and stop using any previously generated addresses.

Wallets encrypted with this version of Bitcoin are written properly.

Technical note: the encrypted wallet’s ‘keypool’ will be regenerated the first time you request a new bitcoin address; to be certain that the new private keys are properly backed up you should:

Run Bitcoin and let it rewrite the wallet.dat file

Run it again, then ask it for a new bitcoin address.

Bitcoin-Qt: Address Book, then New Address…

bitcoind: run the walletpassphrase RPC command to unlock the wallet, then run the getnewaddress RPC command.

If your encrypted wallet.dat may have been copied or stolen, send all of your bitcoins to the new bitcoin address.

Shut down Bitcoin, then backup the wallet.dat file. IMPORTANT: be sure to request a new bitcoin address before backing up, so that the ‘keypool’ is regenerated and backed up.

“Security in depth” is always a good idea, so choosing a secure location for the backup and/or encrypting the backup before uploading it is recommended. And as in previous releases, if your machine is infected by malware there are several ways an attacker might steal your bitcoins.

Thanks to Alan Reiner (aka etotheipi) for finding and reporting this bug.

MAJOR GUI CHANGES
“Splash” graphics at startup that show address/wallet/blockchain loading progress.

“Synchronizing with network” progress bar to show block-chain download progress.

Icons at the bottom of the window that show how well connected you are to the network, with tooltips to display details.

Drag and drop support for bitcoin: URIs on web pages.

Export transactions as a .csv file.

Many other GUI improvements, large and small.

RPC CHANGES
getmemorypool : new RPC command, provides everything needed to construct a block with a custom generation transaction and submit a solution

listsinceblock : new RPC command, list transactions since given block

signmessage/verifymessage : new RPC commands to sign a message with one of your private keys or verify that a message signed by the private key associated with a bitcoin address.

GENERAL CHANGES
Faster initial block download.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin-Qt version 0.5.1 released
15 December 2011

Bitcoin-Qt version 0.5.1 is now available for download at: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.1/

This is a bugfix-only release.

This release includes 13 translations, including 5 new translations: Italian, Hungarian, Ukranian, Portuguese (Brazilian) and Simplified Chinese. More translations are welcome; join the project at Transifex if you can help: https://www.transifex.com/projects/p/bitcoin/

Please report bugs using the issue tracker at GitHub: https://github.com/bitcoin/bitcoin/issues

For Ubuntu users, there is a new ppa maintained by Matt Corallo which you can add to your system so that it will automatically keep bitcoin up-to-date. Just type

sudo apt-add-repository ppa:bitcoin/bitcoin
in your terminal, then install the bitcoin-qt package.

BUG FIXES
Re-enable SSL support for the JSON-RPC interface (it was unintentionally disabled for the 0.5.0 release binaries).

The code that finds peers via “dns seeds” no longer stops bitcoin startup if one of the dns seed machines is down.

Tooltips on the transaction list view were rendering incorrectly (as black boxes or with a transparent background).

Prevent a denial-of-service attack involving flooding a bitcoin node with orphan blocks.

The wallet passphrase dialog now warns you if the caps lock key was pressed.

Improved searching in addresses and labels in bitcoin-qt.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin-Qt version 0.5.2 released
9 January 2012

Bitcoin-Qt version 0.5.2 is now available for download at: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.2/

This is a bugfix-only release.

Please report bugs using the issue tracker at GitHub: https://github.com/bitcoin/bitcoin/issues

BUG FIXES
Check all transactions in blocks after the last checkpoint (0.5.0 and 0.5.1 skipped checking ECDSA signatures during initial blockchain download; this was not a security vulnerability).

Cease locking memory used by non-sensitive information (this caused a huge performance hit on some platforms, especially noticable during initial blockchain download).

Fixed some address-handling deadlocks (client freezes).

No longer accept inbound connections over the internet when Bitcoin is being used with Tor (identity leak).

Re-enable SSL support for the JSON-RPC interface (it was unintentionally disabled for the 0.5.0 and 0.5.1 release Linux binaries).

Use the correct base transaction fee of 0.0005 BTC for accepting transactions into mined blocks (since 0.4.0, it was incorrectly accepting 0.0001 BTC which was only meant to be relayed).

Don’t show “IP” for transactions which are not necessarily IP transactions.

Add new DNS seeds (maintained by Pieter Wuille and Luke Dashjr).


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin-Qt version 0.5.3 released
14 March 2012

Bitcoin-Qt version 0.5.3 is now available for download at: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.3/

This is a bugfix-only release based on 0.5.1. It also includes a few protocol updates.

Please report bugs using the issue tracker at GitHub: https://github.com/bitcoin/bitcoin/issues

PROTOCOL UPDATES
BIP 30: Introduce a new network rule: “a block is not valid if it contains a transaction whose hash already exists in the block chain, unless all that transaction’s outputs were already spent before said block” beginning on March 15, 2012, 00:00 UTC.

On testnet, allow mining of min-difficulty blocks if 20 minutes have gone by without mining a regular-difficulty block. This is to make testing Bitcoin easier, and will not affect normal mode.

BUG FIXES
Limit the number of orphan transactions stored in memory, to prevent a potential denial-of-service attack by flooding orphan transactions. Also never store invalid transactions at all.

Fix possible buffer overflow on systems with very long application data paths. This is not exploitable.

Resolved multiple bugs preventing long-term unlocking of encrypted wallets (issue #922).

Only send local IP in “version” messages if it is globally routable (ie, not private), and try to get such an IP from UPnP if applicable.

Reannounce UPnP port forwards every 20 minutes, to workaround routers expiring old entries, and allow the -upnp option to override any stored setting.

Skip splash screen when -min is used, and fix Minimize to Tray function.

Do not blank “label” in Bitcoin-Qt “Send” tab, if the user has already entered something.

Correct various labels and messages.

Various memory leaks and potential null pointer deferences have been fixed.

Handle invalid Bitcoin URIs using “bitcoin://” instead of “bitcoin:”.

Several shutdown issues have been fixed.

Revert to “global progress indication”, as starting from zero every time was considered too confusing for many users.

Check that keys stored in the wallet are valid at startup, and if not, report corruption.

Enable accessible widgets on Windows, so that people with screen readers such as NVDA can make sense of it.

Various build fixes.

If no password is specified to bitcoind, recommend a secure password.

Automatically focus and scroll to new “Send coins” entries in Bitcoin-Qt.

Show a message box for –help on Windows, for Bitcoin-Qt.

Add missing “About Qt” menu option to show built-in Qt About dialog.

Don’t show “-daemon” as an option for Bitcoin-Qt, since it isn’t available.

Update hard-coded fallback seed nodes, choosing recent ones with long uptime and versions at least 0.4.0.

Add checkpoint at block 168,000.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin-Qt version 0.5.3.1 released
16 March 2012

Bitcoin-Qt version 0.5.3.1 for Windows is now available for download at: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.3/

This is a bugfix-only release based on 0.5.1.

Please report bugs using the issue tracker at GitHub: https://github.com/bitcoin/bitcoin/issues

BUG FIXES
Fixed a potentially critical security vulnerability in Windows versions of Bitcoin-Qt.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin-Qt version 0.6.0 released
30 March 2012

Bitcoin-Qt version 0.6.0 is now available for download at: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.6.0/

This release includes more than 20 language localizations. More translations are welcome; join the project at Transifex to help: https://www.transifex.net/projects/p/bitcoin/

Please report bugs using the issue tracker at github: https://github.com/bitcoin/bitcoin/issues

Project source code is hosted at github; we are no longer distributing .tar.gz files here, you can get them directly from github: https://github.com/bitcoin/bitcoin/tarball/v0.6.0 # .tar.gz https://github.com/bitcoin/bitcoin/zipball/v0.6.0 # .zip

For Ubuntu users, there is a ppa maintained by Matt Corallo which you can add to your system so that it will automatically keep bitcoin up-to-date. Just type sudo apt-add-repository ppa:bitcoin/bitcoin in your terminal, then install the bitcoin-qt package.

KNOWN ISSUES
Shutting down while synchronizing with the network (downloading the blockchain) can take more than a minute, because database writes are queued to speed up download time.

NEW FEATURES SINCE BITCOIN VERSION 0.5
Initial network synchronization should be much faster (one or two hours on a typical machine instead of ten or more hours).

Backup Wallet menu option.

Bitcoin-Qt can display and save QR codes for sending and receiving addresses.

New context menu on addresses to copy/edit/delete them.

New Sign Message dialog that allows you to prove that you own a bitcoin address by creating a digital signature.

New wallets created with this version will use 33-byte ‘compressed’ public keys instead of 65-byte public keys, resulting in smaller transactions and less traffic on the bitcoin network. The shorter keys are already supported by the network but wallet.dat files containing short keys are not compatible with earlier versions of Bitcoin-Qt/bitcoind.

New command-line argument -blocknotify=<command> that will spawn a shell process to run <command> when a new block is accepted.

New command-line argument -splash=0 to disable Bitcoin-Qt’s initial splash screen

validateaddress JSON-RPC api command output includes two new fields for addresses in the wallet: pubkey : hexadecimal public key iscompressed : true if pubkey is a short 33-byte key

New JSON-RPC api commands for dumping/importing private keys from the wallet (dumprivkey, importprivkey).

New JSON-RPC api command for getting information about blocks (getblock, getblockhash).

New JSON-RPC api command (getmininginfo) for getting extra information related to mining. The getinfo JSON-RPC command no longer includes mining-related information (generate/genproclimit/hashespersec).

NOTABLE CHANGES
BIP30 implemented (security fix for an attack involving duplicate “coinbase transactions”).

The -nolisten, -noupnp and -nodnsseed command-line options were renamed to -listen, -upnp and -dnsseed, with a default value of 1. The old names are still supported for compatibility (so specifying -nolisten is automatically interpreted as -listen=0; every boolean argument can now be specified as either -foo or -nofoo).

The -noirc command-line options was renamed to -irc, with a default value of 0. Run -irc=1 to get the old behavior.

Three fill-up-available-memory denial-of-service attacks were fixed.

NOT YET IMPLEMENTED FEATURES
Support for clicking on bitcoin: URIs and opening/launching Bitcoin-Qt is available only on Linux, and only if you configure your desktop to launch Bitcoin-Qt. All platforms support dragging and dropping bitcoin: URIs onto the Bitcoin-Qt window to start payment.

PRELIMINARY SUPPORT FOR MULTISIGNATURE TRANSACTIONS
This release has preliminary support for multisignature transactions– transactions that require authorization from more than one person or device before they will be accepted by the bitcoin network.

Prior to this release, multisignature transactions were considered ‘non-standard’ and were ignored; with this release multisignature transactions are considered standard and will start to be relayed and accepted into blocks.

It is expected that future releases of Bitcoin-Qt will support the creation of multisignature transactions, once enough of the network has upgraded so relaying and validating them is robust.

For this release, creation and testing of multisignature transactions is limited to the bitcoin test network using the “addmultisigaddress” JSON-RPC api call.

Short multisignature address support is included in this release, as specified in BIP 13 and BIP 16.

Thanks to everybody who contributed to this release:

Alex B
Alistair Buxton
Chris Moore
Clark Gaebel
Daniel Folkinshteyn
Dylan Noblesmith
Forrest Voight
Gavin Andresen
Gregory Maxwell
Janne Pulkkinen
Joel Kaartinen
Lars Rasmusson
Luke Dashjr
Matt Corallo
Michael Ford
Michael Hendricks
Nick Bosma
Nils Schneider
Philip Kaufmann
Pierre Pronchery
Pieter Wuille
Rune K Svendsen
Wladimir J. van der Laan
coderrr
p2k
sje397
Special thanks to Sergio Lerner and Matt Corallo for bringing potential denial-of-service attacks to our attention.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin-Qt version 0.6.1 released
4 May 2012

Bitcoin-Qt version 0.6.1 is now available for download at: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.6.1/

This is a bug-fix and code-cleanup release, with no major new features.

NOTABLE CHANGES
Much faster shutdowns. However, the blkindex.dat file is no longer portable to different data directories by default. If you need a portable blkindex.dat file then run with the new -detachdb=1 option or the “Detach databases at shutdown” GUI preference.

Mac and Windows binaries are compiled against OpenSSL 1.0.1b (Linux binaries are dynamically linked to the version of OpenSSL on the system).

CHANGE SUMMARY
Use git shortlog --no-merges v0.6.0.. for a summary of this release.

Source codebase changes:

Many source code cleanups and warnings fixes. Close to building with -Wall
Locking overhaul, and several minor locking fixes
Several source code portability fixes, e.g. FreeBSD
JSON-RPC interface changes:

addmultisigaddress enabled for mainnet (previously only enabled for testnet)
Network protocol changes:

protocol version 60001
added nonce value to “ping” message (BIP 31)
added new “pong” message (BIP 31)
Backend storage changes:

Less redundant database flushing, especially during initial block download
Shutdown improvements (see above)
Qt user interface:

minor URI handling improvements
progressbar improvements
error handling improvements (show message box rather than console exception, etc.)
by popular request, make 4th bar of connection icon green
Thanks to everybody who contributed to this release:

Chris Moore
Dwayne C. Litzenberger
Gavin Andresen
Jeff Garzik
Luke Dashjr
Matt Corallo
Philip Kaufmann
Pieter Wuille
R E Broadley
Timothy Redaelli
Wladimir J. van der Laan
cardpuncher
freewil
graingert
sje397


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin-Qt version 0.6.2 released
8 May 2012

Bitcoin-Qt version 0.6.2 is now available for download at: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.6.2/

This is a bug-fix and code-cleanup release, with no major new features.

NOTABLE CHANGES
Much faster shutdowns. However, the blkindex.dat file is no longer portable to different data directories by default. If you need a portable blkindex.dat file then run with the new -detachdb=1 option or the “Detach databases at shutdown” GUI preference.

Fixed https://github.com/bitcoin/bitcoin/issues/1065, a bug that could cause long-running nodes to crash.

Mac and Windows binaries are compiled against OpenSSL 1.0.1b (Linux binaries are dynamically linked to the version of OpenSSL on the system).

CHANGE SUMMARY
Use git shortlog --no-merges v0.6.0.. for a summary of this release.

Source codebase changes:

Many source code cleanups and warnings fixes. Close to building with -Wall
Locking overhaul, and several minor locking fixes
Several source code portability fixes, e.g. FreeBSD
JSON-RPC interface changes:

addmultisigaddress enabled for mainnet (previously only enabled for testnet)
Network protocol changes:

protocol version 60001
added nonce value to “ping” message (BIP 31)
added new “pong” message (BIP 31)
Backend storage changes:

Less redundant database flushing, especially during initial block download
Shutdown improvements (see above)
Qt user interface:

minor URI handling improvements
progressbar improvements
error handling improvements (show message box rather than console exception, etc.)
by popular request, make 4th bar of connection icon green
Thanks to everybody who contributed to this release:

Chris Moore
Dwayne C. Litzenberger
Gavin Andresen
Jeff Garzik
Luke Dashjr
Matt Corallo
Philip Kaufmann
Pieter Wuille
R E Broadley
Timothy Redaelli
Wladimir J. van der Laan
cardpuncher
freewil
graingert
sje397


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin-Qt version 0.6.3 released
25 June 2012

Bitcoin-Qt version 0.6.3 is now available for download at: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.6.3/

This is a bug-fix release, with no new features.

CHANGE SUMMARY
Fixed a serious denial-of-service attack that could cause the bitcoin process to become unresponsive. Thanks to Sergio Lerner for finding and responsibly reporting the problem. (CVE-2012-3789)

Optimized the process of checking transaction signatures, to speed up processing of new block messages and make propagating blocks across the network faster.

Fixed an obscure bug that could cause the bitcoin process to get stuck on an invalid block-chain, if the invalid chain was hundreds of blocks long.

Bitcoin-Qt no longer automatically selects the first address in the address book (Issue #1384).

Fixed minimize-to-dock behavior of Bitcon-Qt on the Mac.

Added a block checkpoint at block 185,333 to speed up initial blockchain download.

Thanks to everybody who contributed to this release:
Chris Moore
Christian von Roques
Fordy
Gavin Andresen
Jeff Garzik
Luke Dashjr
Matt Corallo
Michael Hendricks
Peter Todd
Philip Kaufmann
Pieter Wuille
R E Broadley
Sergio Lerner
Wladimir J. van der Laan


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin-Qt version 0.7.0 released
17 September 2012

Bitcoin-Qt version 0.7.0 is now available for download at: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.7.0/

We recommend that everybody running prior versions of bitcoind/Bitcoin-Qt upgrade to this release, except for users running Mac OSX 10.5.

Please report bugs using the issue tracker at github: https://github.com/bitcoin/bitcoin/issues

Project source code is hosted at github; you can get source-only tarballs/zipballs directly from there: https://github.com/bitcoin/bitcoin/tarball/v0.7.0 # .tar.gz https://github.com/bitcoin/bitcoin/zipball/v0.7.0 # .zip

Ubuntu Linux users can use the “Personal Package Archive” (PPA) maintained by Matt Corallo to automatically keep bitcoin up-to-date. Just type sudo apt-add-repository ppa:bitcoin/bitcoin sudo apt-get update in your terminal, then install the bitcoin-qt package: sudo apt-get install bitcoin-qt

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

If you were running on Linux with a version that might have been compiled with a different version of Berkeley DB (for example, if you were using the PPA and are switching to the binary release), then run the old version again with the -detachdb argument and shut it down; if you do not, then the new version will not be able to read the database files and will exit with an error.

Incompatible Changes
Replaced the getmemorypool RPC command with getblocktemplate/submitblock and getrawmempool commands.
Remove deprecated RPC getblocknumber
Bitcoin Improvement Proposals implemented
BIP 22 - getblocktemplate, submitblock RPCs BIP 34 - block version 2, height in coinbase BIP 35 - mempool message, extended getdata message behavior

Core bitcoin handling and blockchain database
Reduced CPU usage, by eliminating some redundant hash calculations
Cache signature verifications, to eliminate redundant signature checks
Transactions with zero-value outputs are considered non-standard
Mining: when creating new blocks, sort ‘paid’ area by fee-per-kb
Database: better validation of on-disk stored data
Database: minor optimizations and reliability improvements
-loadblock=FILE will import an external block file
Additional DoS (denial-of-service) prevention measures
New blockchain checkpoint at block 193,000
JSON-RPC API
Internal HTTP server is now thread-per-connection, rather than a single-threaded queue that would stall on network I/O.
Internal HTTP server supports HTTP/1.1, pipelined requests and connection keep-alive.
Support JSON-RPC 2.0 batches, to encapsulate multiple JSON-RPC requests within a single HTTP request.
IPv6 support
Added raw transaction API. See https://gist.github.com/2839617
Added getrawmempool, to list contents of TX memory pool
Added getpeerinfo, to list data about each connected network peer
Added listaddressgroupings for better coin control
Rework getblock call.
Remove deprecated RPC getblocknumber
Remove superceded RPC getmemorypool (see BIP 22, above)
listtransactions output now displays “smart” times for transactions, and blocktime and timereceived fields were added
P2P networking
IPv6 support
Tor hidden service support (see doc/Tor.txt)
Attempts to fix “stuck blockchain download” problems
Replace BDB database “addr.dat” with internally-managed “peers.dat” file containing peer address data.
Lower default send buffer from 10MB to 1MB
proxy: SOCKS5 by default
Support connecting by hostnames passed to proxy
Add -seednode connections, and use this instead of DNS seeds when proxied
Added -externalip and -discover
Add -onlynet to connect only to a given network (IPv4, IPv6, or Tor)
Separate listening sockets, -bind=<addr>
Qt GUI
Add UI RPC console / debug window
Re-Enable URI handling on Windows, add safety checks and tray-notifications
Harmonize the use of ellipsis (“…”) to be used in menus, but not on buttons
Add 2 labels to the overviewpage that display Wallet and Transaction status (obsolete or current)
Extend the optionsdialog (e.g. language selection) and re-work it to a tabbed UI
Merge sign/verify message into a single window with tabbed UI
Ensure a changed bitcoin unit immediately updates all GUI elements that use units
Update QR Code dialog
Improve error reporting at startup
Fine-grained UI updates for a much smoother UI during block downloads
Remove autocorrection of 0/i in addresses in UI
Reorganize tray icon menu into more logical order
Persistently poll for balance change when number of blocks changed
Much better translations
Override progress bar design on platforms with segmented progress bars to assist with readability
Added ‘immature balance’ display on the overview page
(Windows only): enable ASLR and DEP for bitcoin-qt.exe
(Windows only): add meta-data to bitcoin-qt.exe (e.g. description)
Internal codebase
Additional unit tests
Compile warning fixes
Miscellaneous
Reopen debug.log upon SIGHUP
Bash programmable completion for bitcoind(1)
On supported OS’s, each thread is given a useful name


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin-Qt version 0.7.1 released
19 October 2012

Bitcoin-Qt version 0.7.1 is now available from: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.7.1/

This is a bug-fix minor release.

Please report bugs using the issue tracker at github: https://github.com/bitcoin/bitcoin/issues

Project source code is hosted at github; you can get source-only tarballs/zipballs directly from there: https://github.com/bitcoin/bitcoin/tarball/v0.7.1 # .tar.gz https://github.com/bitcoin/bitcoin/zipball/v0.7.1 # .zip

Ubuntu Linux users can use the “Personal Package Archive” (PPA) maintained by Matt Corallo to automatically keep up-to-date. Just type: sudo apt-add-repository ppa:bitcoin/bitcoin sudo apt-get update in your terminal, then install the bitcoin-qt package: sudo apt-get install bitcoin-qt

KNOWN ISSUES
Mac OSX 10.5 is no longer supported.

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

If you were running on Linux with a version that might have been compiled with a different version of Berkeley DB (for example, if you were using an Ubuntu PPA version), then run the old version again with the -detachdb argument and shut it down; if you do not, then the new version will not be able to read the database files and will exit with an error.

Explanation of -detachdb (and the new “stop true” RPC command): The Berkeley DB database library stores data in both “.dat” and “log” files, so the database is always in a consistent state, even in case of power failure or other sudden shutdown. The format of the “.dat” files is portable between different versions of Berkeley DB, but the “log” files are not– even minor version differences may have incompatible “log” files. The -detachdb option moves any pending changes from the “log” files to the “blkindex.dat” file for maximum compatibility, but makes shutdown much slower. Note that the “wallet.dat” file is always detached, and versions prior to 0.6.0 detached all databases at shutdown.

New features
Added a boolean argument to the RPC stop command, if true sets -detachdb to create standalone database .dat files before shutting down.

-salvagewallet command-line option, which moves any existing wallet.dat to wallet.{timestamp}.dat and then attempts to salvage public/private keys and master encryption keys (if the wallet is encrypted) into a new wallet.dat. This should only be used if your wallet becomes corrupted, and is not intended to replace regular wallet backups.

Import $DataDir/bootstrap.dat automatically, if it exists.

Dependency changes
Qt 4.8.2 for Windows builds

openssl 1.0.1c

Bug fixes
Clicking on a bitcoin: URI on Windows should now launch Bitcoin-Qt properly.

When running -testnet, use RPC port 18332 by default.

Better detection and handling of corrupt wallet.dat and blkindex.dat files. Previous versions would crash with a DB_RUNRECOVERY exception, this version detects most problems and tells you how to recover if it cannot recover itself.

Fixed an uninitialized variable bug that could cause transactions to be reported out of order.

Fixed a bug that could cause occasional crashes on exit.

Warn the user that they need to create fresh wallet backups after they encrypt their wallet.

Thanks to everybody who contributed to this release:

Gavin Andresen
Jeff Garzik
Luke Dashjr
Mark Friedenbach
Matt Corallo
Philip Kaufmann
Pieter Wuille
Rune K. Svendsen
Virgil Dupras
Wladimir J. van der Laan
fanquake
kjj2
xanatos


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin-Qt version 0.7.2 released
14 December 2012

Bitcoin-Qt version 0.7.2 is now available from: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.7.2

This is a bug-fix minor release.

Please report bugs using the issue tracker at github: https://github.com/bitcoin/bitcoin/issues

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

If you were running on Linux with a version that might have been compiled with a different version of Berkeley DB (for example, if you were using an Ubuntu PPA version), then run the old version again with the -detachdb argument and shut it down; if you do not, then the new version will not be able to read the database files and will exit with an error.

Explanation of -detachdb (and the new “stop true” RPC command): The Berkeley DB database library stores data in both “.dat” and “log” files, so the database is always in a consistent state, even in case of power failure or other sudden shutdown. The format of the “.dat” files is portable between different versions of Berkeley DB, but the “log” files are not– even minor version differences may have incompatible “log” files. The -detachdb option moves any pending changes from the “log” files to the “blkindex.dat” file for maximum compatibility, but makes shutdown much slower. Note that the “wallet.dat” file is always detached, and versions prior to 0.6.0 detached all databases at shutdown.

Bug fixes
Prevent RPC move from deadlocking. This was caused by trying to lock the database twice.

Fix use-after-free problems in initialization and shutdown, the latter of which caused Bitcoin-Qt to crash on Windows when exiting.

Correct library linking so building on Windows natively works.

Avoid a race condition and out-of-bounds read in block creation/mining code.

Improve platform compatibility quirks, including fix for 100% CPU utilization on FreeBSD 9.

A few minor corrections to error handling, and updated translations.

OSX 10.5 supported again

Thanks to everybody who contributed to this release:

Alex
dansmith
Gavin Andresen
Gregory Maxwell
Jeff Garzik
Luke Dashjr
Philip Kaufmann
Pieter Wuille
Wladimir J. van der Laan
grimd34th


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin-Qt version 0.8.0 released
19 February 2013

Bitcoin-Qt version 0.8.0 are now available from: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.0/

This is a major release designed to improve performance and handle the increasing volume of transactions on the network.

Please report bugs using the issue tracker at github: https://github.com/bitcoin/bitcoin/issues

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

The first time you run after the upgrade a re-indexing process will be started that will take anywhere from 30 minutes to several hours, depending on the speed of your machine.

Incompatible Changes
This release no longer maintains a full index of historical transaction ids by default, so looking up an arbitrary transaction using the getrawtransaction RPC call will not work. If you need that functionality, you must run once with -txindex=1 -reindex=1 to rebuild block-chain indices (see below for more details).

Improvements
Mac and Windows binaries are signed with certificates owned by the Bitcoin Foundation, to be compatible with the new security features in OSX 10.8 and Windows 8.

LevelDB, a fast, open-source, non-relational database from Google, is now used to store transaction and block indices. LevelDB works much better on machines with slow I/O and is faster in general. Berkeley DB is now only used for the wallet.dat file (public and private wallet keys and transactions relevant to you).

Pieter Wuille implemented many optimizations to the way transactions are verified, so a running, synchronized node uses less working memory and does much less I/O. He also implemented parallel signature checking, so if you have a multi-CPU machine all CPUs will be used to verify transactions.

New Features
“Bloom filter” support in the network protocol for sending only relevant transactions to lightweight clients.

contrib/verifysfbinaries is a shell-script to verify that the binary downloads at sourceforge have not been tampered with. If you are able, you can help make everybody’s downloads more secure by running this occasionally to check PGP signatures against download file checksums.

contrib/spendfrom is a python-language command-line utility that demonstrates how to use the “raw transactions” JSON-RPC api to send coins received from particular addresses (also known as “coin control”).

New/changed settings (command-line or bitcoin.conf file)
dbcache : controls LevelDB memory usage.

par : controls how many threads to use to validate transactions. Defaults to the number of CPUs on your machine, use -par=1 to limit to a single CPU.

txindex : maintains an extra index of old, spent transaction ids so they will be found by the getrawtransaction JSON-RPC method.

reindex : rebuild block and transaction indices from the downloaded block data.

New JSON-RPC API Features
lockunspent / listlockunspent allow locking transaction outputs for a period of time so they will not be spent by other processes that might be accessing the same wallet.

addnode / getaddednodeinfo methods, to connect to specific peers without restarting.

importprivkey now takes an optional boolean parameter (default true) to control whether or not to rescan the blockchain for transactions after importing a new private key.

Important Bug Fixes
Privacy leak: the position of the “change” output in most transactions was not being properly randomized, making network analysis of the transaction graph to identify users’ wallets easier.

Zero-confirmation transaction vulnerability: accepting zero-confirmation transactions (transactions that have not yet been included in a block) from somebody you do not trust is still not recommended, because there will always be ways for attackers to double-spend zero-confirmation transactions. However, this release includes a bug fix that makes it a little bit more difficult for attackers to double-spend a certain type (“lockTime in the future”) of zero-confirmation transaction.

Dependency Changes
Qt 4.8.3 (compiling against older versions of Qt 4 should continue to work)

Thanks to everybody who contributed to this release:
Alexander Kjeldaas
Andrey Alekseenko
Arnav Singh
Christian von Roques
Eric Lombrozo
Forrest Voight
Gavin Andresen
Gregory Maxwell
Jeff Garzik
Luke Dashjr
Matt Corallo
Mike Cassano
Mike Hearn
Peter Todd
Philip Kaufmann
Pieter Wuille
Richard Schwab
Robert Backhaus
Rune K. Svendsen
Sergio Demian Lerner
Wladimir J. van der Laan
burger2
default
fanquake
grimd34th
justmoon
redshark1802
tucenaber
xanatos

Bitcoin-Qt version 0.8.1 released
18 March 2013

How to Upgrade
Incompatible Changes
Improvements
New Features
New/changed settings (command-line or bitcoin.conf file)
New JSON-RPC API Features
Important Bug Fixes
Dependency Changes
Thanks to everybody who contributed to the 0.8.0 release:
Bitcoin-Qt version 0.8.1 is now available from: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.1/

This is a maintenance release that adds a new network rule to avoid a chain-forking incompatibility with versions 0.7.2 and earlier.

Please report bugs using the issue tracker at github: https://github.com/bitcoin/bitcoin/issues

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

If you are upgrading from version 0.7.2 or earlier, the first time you run 0.8.1 your blockchain files will be re-indexed, which will take anywhere from 30 minutes to several hours, depending on the speed of your machine.

0.8.1 Release notes
The 0.8.1 release has just two changes from the 0.8.0 release:

A new block-acceptance rule that will be enforced from 21 March 2013 until 15 May 2013 to prevent accepting blocks that fail to validate on pre-0.8 peers.

A new compiled-in checkpoint at block number 225,430 – the first block of the 11 March 2013 chain fork.

0.8.0 Release notes
Incompatible Changes
This release no longer maintains a full index of historical transaction ids by default, so looking up an arbitrary transaction using the getrawtransaction RPC call will not work. If you need that functionality, you must run once with -txindex=1 -reindex=1 to rebuild block-chain indices (see below for more details).

Improvements
Mac and Windows binaries are signed with certificates owned by the Bitcoin Foundation, to be compatible with the new security features in OSX 10.8 and Windows 8.

LevelDB, a fast, open-source, non-relational database from Google, is now used to store transaction and block indices. LevelDB works much better on machines with slow I/O and is faster in general. Berkeley DB is now only used for the wallet.dat file (public and private wallet keys and transactions relevant to you).

Pieter Wuille implemented many optimizations to the way transactions are verified, so a running, synchronized node uses less working memory and does much less I/O. He also implemented parallel signature checking, so if you have a multi-CPU machine all CPUs will be used to verify transactions.

New Features
“Bloom filter” support in the network protocol for sending only relevant transactions to lightweight clients.

contrib/verifysfbinaries is a shell-script to verify that the binary downloads at sourceforge have not been tampered with. If you are able, you can help make everybody’s downloads more secure by running this occasionally to check PGP signatures against download file checksums.

contrib/spendfrom is a python-language command-line utility that demonstrates how to use the “raw transactions” JSON-RPC api to send coins received from particular addresses (also known as “coin control”).

New/changed settings (command-line or bitcoin.conf file)
dbcache : controls LevelDB memory usage.

par : controls how many threads to use to validate transactions. Defaults to the number of CPUs on your machine, use -par=1 to limit to a single CPU.

txindex : maintains an extra index of old, spent transaction ids so they will be found by the getrawtransaction JSON-RPC method.

reindex : rebuild block and transaction indices from the downloaded block data.

New JSON-RPC API Features
lockunspent / listlockunspent allow locking transaction outputs for a period of time so they will not be spent by other processes that might be accessing the same wallet.

addnode / getaddednodeinfo methods, to connect to specific peers without restarting.

importprivkey now takes an optional boolean parameter (default true) to control whether or not to rescan the blockchain for transactions after importing a new private key.

Important Bug Fixes
Privacy leak: the position of the “change” output in most transactions was not being properly randomized, making network analysis of the transaction graph to identify users’ wallets easier.

Zero-confirmation transaction vulnerability: accepting zero-confirmation transactions (transactions that have not yet been included in a block) from somebody you do not trust is still not recommended, because there will always be ways for attackers to double-spend zero-confirmation transactions. However, this release includes a bug fix that makes it a little bit more difficult for attackers to double-spend a certain type (“lockTime in the future”) of zero-confirmation transaction.

Dependency Changes
Qt 4.8.3 (compiling against older versions of Qt 4 should continue to work)

Thanks to everybody who contributed to the 0.8.0 release:
Alexander Kjeldaas
Andrey Alekseenko
Arnav Singh
Christian von Roques
Eric Lombrozo
Forrest Voight
Gavin Andresen
Gregory Maxwell
Jeff Garzik
Luke Dashjr
Matt Corallo
Mike Cassano
Mike Hearn
Peter Todd
Philip Kaufmann
Pieter Wuille
Richard Schwab
Robert Backhaus
Rune K. Svendsen
Sergio Demian Lerner
Wladimir J. van der Laan
burger2
default
fanquake
grimd34th
justmoon
redshark1802
tucenaber
xanatos


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin-Qt version 0.8.2 released
29 May 2013

Bitcoin-Qt version 0.8.2 is now available from: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.2/

This is a maintenance release that fixes many bugs and includes a few small new features.

Please report bugs using the issue tracker at github: https://github.com/bitcoin/bitcoin/issues

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

If you are upgrading from version 0.7.2 or earlier, the first time you run 0.8.2 your blockchain files will be re-indexed, which will take anywhere from 30 minutes to several hours, depending on the speed of your machine.

0.8.2 Release notes
Fee Policy changes
The default fee for low-priority transactions is lowered from 0.0005 BTC (for each 1,000 bytes in the transaction; an average transaction is about 500 bytes) to 0.0001 BTC.

Payments (transaction outputs) of 0.543 times the minimum relay fee (0.00005430 BTC) are now considered ‘non-standard’, because storing them costs the network more than they are worth and spending them will usually cost their owner more in transaction fees than they are worth.

Non-standard transactions are not relayed across the network, are not included in blocks by most miners, and will not show up in your wallet until they are included in a block.

The default fee policy can be overridden using the -mintxfee and -minrelaytxfee command-line options, but note that we intend to replace the hard-coded fees with code that automatically calculates and suggests appropriate fees in the 0.9 release and note that if you set a fee policy significantly different from the rest of the network your transactions may never confirm.

Bitcoin-Qt changes
New icon and splash screen
Improve reporting of synchronization process
Remove hardcoded fee recommendations
Improve metadata of executable on MacOSX and Windows
Move export button to individual tabs instead of toolbar
Add “send coins” command to context menu in address book
Add “copy txid” command to copy transaction IDs from transaction overview
Save & restore window size and position when showing & hiding window
New translations: Arabic (ar), Bosnian (bs), Catalan (ca), Welsh (cy), Esperanto (eo), Interlingua (la), Latvian (lv) and many improvements to current translations
MacOSX:

OSX support for click-to-pay (bitcoin:) links
Fix GUI disappearing problem on MacOSX (issue #1522)
Linux/Unix:

Copy addresses to middle-mouse-button clipboard
Command-line options
-walletnotify will call a command on receiving transactions that affect the wallet.
-alertnotify will call a command on receiving an alert from the network.
-par now takes a negative number, to leave a certain amount of cores free.
JSON-RPC API changes
fixed a getblocktemplate bug that caused excessive CPU creating blocks.
listunspent now lists account and address infromation.
getinfo now also returns the time adjustment estimated from your peers.
getpeerinfo now returns bytessent, bytesrecv and syncnode.
gettxoutsetinfo returns statistics about the unspent transaction output database.
gettxout returns information about a specific unspent transaction output.
Networking changes
Significant changes to the networking code, reducing latency and memory consumption.
Avoid initial block download stalling.
Remove IRC seeding support.
Performance tweaks.
Added testnet DNS seeds.
Wallet compatibility/rescuing
Cases where wallets cannot be opened in another version/installation should be reduced.
-salvagewallet now works for encrypted wallets.
Known Bugs
Entering the getblocktemplate or getwork RPC commands into the Bitcoin-Qt debug console will cause Bitcoin-Qt to crash. Run Bitcoin-Qt with the -server command-line option to workaround.
Thanks to everybody who contributed to the 0.8.2 release!
APerson241
Andrew Poelstra
Calvin Owens
Chuck LeDuc Díaz
Colin Dean
David Griffith
David Serrano
Eric Lombrozo
Gavin Andresen
Gregory Maxwell
Jeff Garzik
Jonas Schnelli
Larry Gilbert
Luke Dashjr
Matt Corallo
Michael Ford
Mike Hearn
Patrick Brown
Peter Todd
Philip Kaufmann
Pieter Wuille
Richard Schwab
Roman Mindalev
Scott Howard
Tariq Bashir
Warren Togami
Wladimir J. van der Laan
freewil
gladoscc
kjj2
mb300sd
super3


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin-Qt version 0.8.3 is now available from: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.3/

This is a maintenance release to fix a denial-of-service attack that can cause nodes to crash.

Please report bugs using the issue tracker at github: https://github.com/bitcoin/bitcoin/issues

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

If you are upgrading from version 0.7.2 or earlier, the first time you run 0.8.3 your blockchain files will be re-indexed, which will take anywhere from 30 minutes to several hours, depending on the speed of your machine.

0.8.3 Release notes
Truncate over-size messages to prevent a memory exhaustion attack.

Fix a regression that causes excessive re-writing of the peers.dat file.

0.8.2 Release notes
Fee Policy changes
The default fee for low-priority transactions is lowered from 0.0005 BTC (for each 1,000 bytes in the transaction; an average transaction is about 500 bytes) to 0.0001 BTC.

Payments (transaction outputs) of 0.543 times the minimum relay fee (0.00005430 BTC) are now considered ‘non-standard’, because storing them costs the network more than they are worth and spending them will usually cost their owner more in transaction fees than they are worth.

Non-standard transactions are not relayed across the network, are not included in blocks by most miners, and will not show up in your wallet until they are included in a block.

The default fee policy can be overridden using the -mintxfee and -minrelaytxfee command-line options, but note that we intend to replace the hard-coded fees with code that automatically calculates and suggests appropriate fees in the 0.9 release and note that if you set a fee policy significantly different from the rest of the network your transactions may never confirm.

Bitcoin-Qt changes
New icon and splash screen
Improve reporting of synchronization process
Remove hardcoded fee recommendations
Improve metadata of executable on MacOSX and Windows
Move export button to individual tabs instead of toolbar
Add “send coins” command to context menu in address book
Add “copy txid” command to copy transaction IDs from transaction overview
Save & restore window size and position when showing & hiding window
New translations: Arabic (ar), Bosnian (bs), Catalan (ca), Welsh (cy), Esperanto (eo), Interlingua (la), Latvian (lv) and many improvements to current translations
MacOSX:

OSX support for click-to-pay (bitcoin:) links
Fix GUI disappearing problem on MacOSX (issue #1522)
Linux/Unix:

Copy addresses to middle-mouse-button clipboard
Command-line options
-walletnotify will call a command on receiving transactions that affect the wallet.
-alertnotify will call a command on receiving an alert from the network.
-par now takes a negative number, to leave a certain amount of cores free.
JSON-RPC API changes
fixed a getblocktemplate bug that caused excessive CPU creating blocks.
listunspent now lists account and address infromation.
getinfo now also returns the time adjustment estimated from your peers.
getpeerinfo now returns bytessent, bytesrecv and syncnode.
gettxoutsetinfo returns statistics about the unspent transaction output database.
gettxout returns information about a specific unspent transaction output.
Networking changes
Significant changes to the networking code, reducing latency and memory consumption.
Avoid initial block download stalling.
Remove IRC seeding support.
Performance tweaks.
Added testnet DNS seeds.
Wallet compatibility/rescuing
Cases where wallets cannot be opened in another version/installation should be reduced.
-salvagewallet now works for encrypted wallets.
Known Bugs
Entering the getblocktemplate or getwork RPC commands into the Bitcoin-Qt debug console will cause Bitcoin-Qt to crash. Run Bitcoin-Qt with the -server command-line option to workaround.
Thanks to everybody who contributed to the 0.8.2 and 0.8.3 releases!
APerson241
Andrew Poelstra
Calvin Owens
Chuck LeDuc Díaz
Colin Dean
David Griffith
David Serrano
Eric Lombrozo
Gavin Andresen
Gregory Maxwell
Jeff Garzik
Jonas Schnelli
Larry Gilbert
Luke Dashjr
Matt Corallo
Michael Ford
Mike Hearn
Patrick Brown
Peter Todd
Philip Kaufmann
Pieter Wuille
Richard Schwab
Roman Mindalev
Scott Howard
Tariq Bashir
Warren Togami
Wladimir J. van der Laan
freewil
gladoscc
kjj2
mb300sd
super3


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin-Qt version 0.8.4 released
3 September 2013

Bitcoin-Qt version 0.8.4 is now available from: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.4/

This is a maintenance release to fix a critical bug and three security issues; we urge all users to upgrade.

Please report bugs using the issue tracker at github: https://github.com/bitcoin/bitcoin/issues

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

If you are upgrading from version 0.7.2 or earlier, the first time you run 0.8.4 your blockchain files will be re-indexed, which will take anywhere from 30 minutes to several hours, depending on the speed of your machine.

0.8.4 Release notes
Security issues
An attacker could send a series of messages that resulted in an integer division-by-zero error in the Bloom Filter handling code, causing the Bitcoin-Qt or bitcoind process to crash. Bloom filters were introduced with version 0.8, so versions 0.8.0 through 0.8.3 are vulnerable to this critical denial-of-service attack.

A constant-time algorithm is now used to check RPC password guess attempts; fixes https://github.com/bitcoin/bitcoin/issues/2838 (CVE-2013-4165)

Implement a better fix for the fill-memory-with-orphan-transactions attack that was fixed in 0.8.3. See https://bitslog.wordpress.com/2013/07/18/buggy-cve-2013-4627-patch-open-new-vectors-of-attack/ for a description of the weaknesses of the previous fix. (CVE-2013-4627)

Bugs fixed
Fix multi-block reorg transaction resurrection.

Fix non-standard disconnected transactions causing mempool orphans. This bug could cause nodes running with the -debug flag to crash.

OSX: use FD_FULLSYNC with LevelDB, which will (hopefully!) prevent the database corruption issues many people have experienced on OSX.

Linux: clicking on bitcoin: links was broken if you were using a Gnome-based desktop.

Fix a hang-at-shutdown bug that only affects users that compile their own version of Bitcoin against Boost versions 1.50-1.52.

Other changes
Checkpoint at block 250,000 to speed up initial block downloads and make the progress indicator when downloading more accurate.

Thanks to everybody who contributed to the 0.8.4 releases!
Pieter Wuille
Warren Togami
Patrick Strateman
pakt
Gregory Maxwell
Sergio Demian Lerner
grayleonard
Cory Fields
Matt Corallo
Gavin Andresen


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin-Qt version 0.8.5 released
13 September 2013

Bitcoin-Qt version 0.8.5 is now available from: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.5/

This is a maintenance release to fix a critical bug; we urge all users to upgrade.

Please report bugs using the issue tracker at github: https://github.com/bitcoin/bitcoin/issues

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

If you are upgrading from version 0.7.2 or earlier, the first time you run 0.8.5 your blockchain files will be re-indexed, which will take anywhere from 30 minutes to several hours, depending on the speed of your machine.

0.8.5 Release notes
Bugs fixed
Transactions with version numbers larger than 0x7fffffff were incorrectly being relayed and included in blocks.

Blocks containing transactions with version numbers larger than 0x7fffffff caused the code that checks for LevelDB database inconsistencies at startup to erroneously report database corruption and suggest that you reindex your database.

This release also contains a non-critical fix to the code that enforces BIP 34 (block height in the coinbase transaction).

–

Thanks to Gregory Maxwell and Pieter Wuille for quickly identifying and fixing the transaction version number bug.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin-Qt version 0.8.6 released
9 December 2013

Bitcoin-Qt version 0.8.6 is now available from: http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.6/

This is a maintenance release to fix a critical bug; we urge all users to upgrade.

Please report bugs using the issue tracker at github: https://github.com/bitcoin/bitcoin/issues

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

If you are upgrading from version 0.7.2 or earlier, the first time you run 0.8.6 your blockchain files will be re-indexed, which will take anywhere from 30 minutes to several hours, depending on the speed of your machine.

0.8.6 Release notes
Default block size increase for miners. (see https://gist.github.com/gavinandresen/7670433#086-accept-into-block)

Remove the all-outputs-must-be-greater-than-CENT-to-qualify-as-free rule for relaying (see https://gist.github.com/gavinandresen/7670433#086-relaying)

Lower maximum size for free transaction creation (see https://gist.github.com/gavinandresen/7670433#086-wallet)

OSX block chain database corruption fixes
Update leveldb to 1.13
Use fcntl with F_FULLSYNC instead of fsync on OSX
Use native Darwin memory barriers
Replace use of mmap in leveldb for improved reliability (only on OSX)
Fix nodes forwarding transactions with empty vins and getting banned

Network code performance and robustness improvements

Additional debug.log logging for diagnosis of network problems, log timestamps by default

Fix Bitcoin-Qt startup crash when clicking dock icon on OSX

Fix memory leaks in CKey::SetCompactSignature() and Key::SignCompact()

Fix rare GUI crash on send

Various small GUI, documentation and build fixes
Warning
There have been frequent reports of users running out of virtual memory on 32-bit systems during the initial sync. Hence it is recommended to use a 64-bit executable if possible. A 64-bit executable for Windows is planned for 0.9.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.9.0 released
19 March 2014

How to Upgrade
Windows 64-bit installer
OSX 10.5 / 32-bit no longer supported
Downgrading warnings
Rebranding to Bitcoin Core
OP_RETURN and data in the block chain
Autotools build system
Bitcoin-cli
walletpassphrase RPC
Transaction malleability-related fixes
Transaction Fees
Credits
Bitcoin Core version 0.9.0 is not available for security reasons:

https://bitcoin.org/bin/0.9.0/

This is a new major version release, bringing both new features and bug fixes.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), uninstall all earlier versions of Bitcoin, then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

If you are upgrading from version 0.7.2 or earlier, the first time you run 0.9.0 your blockchain files will be re-indexed, which will take anywhere from 30 minutes to several hours, depending on the speed of your machine.

On Windows, do not forget to uninstall all earlier versions of the Bitcoin client first, especially if you are switching to the 64-bit version.

Windows 64-bit installer
New in 0.9.0 is the Windows 64-bit version of the client. There have been frequent reports of users running out of virtual memory on 32-bit systems during the initial sync. Because of this it is recommended to install the 64-bit version if your system supports it.

NOTE: Release candidate 2 Windows binaries are not code-signed; use PGP and the SHA256SUMS.asc file to make sure your binaries are correct. In the final 0.9.0 release, Windows setup.exe binaries will be code-signed.

OSX 10.5 / 32-bit no longer supported
0.9.0 drops support for older Macs. The minimum requirements are now:

A 64-bit-capable CPU (see http://support.apple.com/kb/ht3696);
Mac OS 10.6 or later (see https://support.apple.com/kb/ht1633).
Downgrading warnings
The ‘chainstate’ for this release is not always compatible with previous releases, so if you run 0.9 and then decide to switch back to a 0.8.x release you might get a blockchain validation error when starting the old release (due to ‘pruned outputs’ being omitted from the index of unspent transaction outputs).

Running the old release with the -reindex option will rebuild the chainstate data structures and correct the problem.

Also, the first time you run a 0.8.x release on a 0.9 wallet it will rescan the blockchain for missing spent coins, which will take a long time (tens of minutes on a typical machine).

Rebranding to Bitcoin Core
To reduce confusion between Bitcoin-the-network and Bitcoin-the-software we have renamed the reference client to Bitcoin Core.

OP_RETURN and data in the block chain
On OP_RETURN: There was been some confusion and misunderstanding in the community, regarding the OP_RETURN feature in 0.9 and data in the blockchain. This change is not an endorsement of storing data in the blockchain. The OP_RETURN change creates a provably-prunable output, to avoid data storage schemes – some of which were already deployed – that were storing arbitrary data such as images as forever-unspendable TX outputs, bloating bitcoin’s UTXO database.

Storing arbitrary data in the blockchain is still a bad idea; it is less costly and far more efficient to store non-currency data elsewhere.

Autotools build system
For 0.9.0 we switched to an autotools-based build system instead of individual (q)makefiles.

Using the standard “./autogen.sh; ./configure; make” to build Bitcoin-Qt and bitcoind makes it easier for experienced open source developers to contribute to the project.

Be sure to check doc/build-*.md for your platform before building from source.

Bitcoin-cli
Another change in the 0.9 release is moving away from the bitcoind executable functioning both as a server and as a RPC client. The RPC client functionality (“tell the running bitcoin daemon to do THIS”) was split into a separate executable, ‘bitcoin-cli’. The RPC client code will eventually be removed from bitcoind, but will be kept for backwards compatibility for a release or two.

walletpassphrase RPC
The behavior of the walletpassphrase RPC when the wallet is already unlocked has changed between 0.8 and 0.9.

The 0.8 behavior of walletpassphrase is to fail when the wallet is already unlocked:

> walletpassphrase 1000
walletunlocktime = now + 1000
> walletpassphrase 10
Error: Wallet is already unlocked (old unlock time stays)
The new behavior of walletpassphrase is to set a new unlock time overriding the old one:

> walletpassphrase 1000
walletunlocktime = now + 1000
> walletpassphrase 10
walletunlocktime = now + 10 (overriding the old unlock time)
Transaction malleability-related fixes
This release contains a few fixes for transaction ID (TXID) malleability issues:

-nospendzeroconfchange command-line option, to avoid spending zero-confirmation change
IsStandard() transaction rules tightened to prevent relaying and mining of mutated transactions
Additional information in listtransactions/gettransaction output to report wallet transactions that conflict with each other because they spend the same outputs.
Bug fixes to the getbalance/listaccounts RPC commands, which would report incorrect balances for double-spent (or mutated) transactions.
New option: -zapwallettxes to rebuild the wallet’s transaction information
Transaction Fees
This release drops the default fee required to relay transactions across the network and for miners to consider the transaction in their blocks to 0.01mBTC per kilobyte.

Note that getting a transaction relayed across the network does NOT guarantee that the transaction will be accepted by a miner; by default, miners fill their blocks with 50 kilobytes of high-priority transactions, and then with 700 kilobytes of the highest-fee-per-kilobyte transactions.

The minimum relay/mining fee-per-kilobyte may be changed with the minrelaytxfee option. Note that previous releases incorrectly used the mintxfee setting to determine which low-priority transactions should be considered for inclusion in blocks.

The wallet code still uses a default fee for low-priority transactions of 0.1mBTC per kilobyte. During periods of heavy transaction volume, even this fee may not be enough to get transactions confirmed quickly; the mintxfee option may be used to override the default.

0.9.0 Release notes
RPC:

New notion of ‘conflicted’ transactions, reported as confirmations: -1
listreceivedbyaddress now provides tx ids
Add raw transaction hex to gettransaction output
Updated help and tests for getreceivedby(account|address)
In getblock, accept 2nd verbose parameter, similar to getrawtransaction, but defaulting to 1 for backward compatibility
Add verifychain, to verify chain database at runtime
Add dumpwallet and importwallet RPCs
keypoolrefill gains optional size parameter
Add getbestblockhash, to return tip of best chain
Add chainwork (the total work done by all blocks since the genesis block) to getblock output
Make RPC password resistant to timing attacks
Clarify help messages and add examples
Add getrawchangeaddress call for raw transaction change destinations
Reject insanely high fees by default in sendrawtransaction
Add RPC call decodescript to decode a hex-encoded transaction script
Make validateaddress provide redeemScript
Add getnetworkhashps to get the calculated network hashrate
New RPC ping command to request ping, new pingtime and pingwait fields in getpeerinfo output
Adding new addrlocal field to getpeerinfo output
Add verbose boolean to getrawmempool
Add rpc command getunconfirmedbalance to obtain total unconfirmed balance
Explicitly ensure that wallet is unlocked in importprivkey
Add check for valid keys in importprivkey
Command-line options:

New option: -nospendzeroconfchange to never spend unconfirmed change outputs
New option: -zapwallettxes to rebuild the wallet’s transaction information
Rename option -tor to -onion to better reflect what it does
Add -disablewallet mode to let bitcoind run entirely without wallet (when built with wallet)
Update default -rpcsslciphers to include TLSv1.2
make -logtimestamps default on and rework help-message
RPC client option: -rpcwait, to wait for server start
Remove -logtodebugger
Allow -noserver with bitcoind
Block-chain handling and storage:

Update leveldb to 1.15
Check for correct genesis (prevent cases where a datadir from the wrong network is accidentally loaded)
Allow txindex to be removed and add a reindex dialog
Log aborted block database rebuilds
Store orphan blocks in serialized form, to save memory
Limit the number of orphan blocks in memory to 750
Fix non-standard disconnected transactions causing mempool orphans
Add a new checkpoint at block 279,000
Wallet:

Bug fixes and new regression tests to correctly compute the balance of wallets containing double-spent (or mutated) transactions
Store key creation time. Calculate whole-wallet birthday.
Optimize rescan to skip blocks prior to birthday
Let user select wallet file with -wallet=foo.dat
Consider generated coins mature at 101 instead of 120 blocks
Improve wallet load time
Don’t count txins for priority to encourage sweeping
Don’t create empty transactions when reading a corrupted wallet
Fix rescan to start from beginning after importprivkey
Only create signatures with low S values
Mining:

Increase default -blockmaxsize/prioritysize to 750K/50K
getblocktemplate does not require a key to create a block template
Mining code fee policy now matches relay fee policy
Protocol and network:

Drop the fee required to relay a transaction to 0.01mBTC per kilobyte
Send tx relay flag with version
New reject P2P message (BIP 0061, see https://gist.github.com/gavinandresen/7079034 for draft)
Dump addresses every 15 minutes instead of 10 seconds
Relay OP_RETURN data TxOut as standard transaction type
Remove CENT-output free transaction rule when relaying
Lower maximum size for free transaction creation
Send multiple inv messages if mempool.size > MAX_INV_SZ
Split MIN_PROTO_VERSION into INIT_PROTO_VERSION and MIN_PEER_PROTO_VERSION
Do not treat fFromMe transaction differently when broadcasting
Process received messages one at a time without sleeping between messages
Improve logging of failed connections
Bump protocol version to 70002
Add some additional logging to give extra network insight
Added new DNS seed from bitcoinstats.com
Validation:

Log reason for non-standard transaction rejection
Prune provably-unspendable outputs, and adapt consistency check for it.
Detect any sufficiently long fork and add a warning
Call the -alertnotify script when we see a long or invalid fork
Fix multi-block reorg transaction resurrection
Reject non-canonically-encoded serialization sizes
Reject dust amounts during validation
Accept nLockTime transactions that finalize in the next block
Build system:

Switch to autotools-based build system
Build without wallet by passing --disable-wallet to configure, this removes the BerkeleyDB dependency
Upgrade gitian dependencies (libpng, libz, libupnpc, boost, openssl) to more recent versions
Windows 64-bit build support
Solaris compatibility fixes
Check integrity of gitian input source tarballs
Enable full GCC Stack-smashing protection for all OSes
GUI:

Switch to Qt 5.2.0 for Windows build
Add payment request (BIP 0070) support
Improve options dialog
Show transaction fee in new send confirmation dialog
Add total balance in overview page
Allow user to choose data directory on first start, when data directory is missing, or when the -choosedatadir option is passed
Save and restore window positions
Add vout index to transaction id in transactions details dialog
Add network traffic graph in debug window
Add open URI dialog
Add Coin Control Features
Improve receive coins workflow: make the ‘Receive’ tab into a form to request payments, and move historical address list functionality to File menu.
Rebrand to Bitcoin Core
Move initialization/shutdown to a thread. This prevents “Not responding” messages during startup. Also show a window during shutdown.
Don’t regenerate autostart link on every client startup
Show and store message of normal bitcoin:URI
Fix richtext detection hang issue on very old Qt versions
OS X: Make use of the 10.8+ user notification center to display Growl-like notifications
OS X: Added NSHighResolutionCapable flag to Info.plist for better font rendering on Retina displays.
OS X: Fix bitcoin-qt startup crash when clicking dock icon
Linux: Fix Gnome bitcoin: URI handler
Miscellaneous:

Add Linux script (contrib/qos/tc.sh) to limit outgoing bandwidth
Add -regtest mode, similar to testnet but private with instant block generation with setgenerate RPC.
Add linearize.py script to contrib, for creating bootstrap.dat
Add separate bitcoin-cli client
Credits
Thanks to everyone who contributed to this release:

Andrey
Ashley Holman
b6393ce9-d324-4fe1-996b-acf82dbc3d53
bitsofproof
Brandon Dahler
Calvin Tam
Christian Decker
Christian von Roques
Christopher Latham
Chuck
coblee
constantined
Cory Fields
Cozz Lovan
daniel
Daniel Larimer
David Hill
Dmitry Smirnov
Drak
Eric Lombrozo
fanquake
fcicq
Florin
frewil
Gavin Andresen
Gregory Maxwell
gubatron
Guillermo Céspedes Tabárez
Haakon Nilsen
HaltingState
Han Lin Yap
harry
Ian Kelling
Jeff Garzik
Johnathan Corgan
Jonas Schnelli
Josh Lehan
Josh Triplett
Julian Langschaedel
Kangmo
Lake Denman
Luke Dashjr
Mark Friedenbach
Matt Corallo
Michael Bauer
Michael Ford
Michagogo
Midnight Magic
Mike Hearn
Nils Schneider
Noel Tiernan
Olivier Langlois
patrick s
Patrick Strateman
paveljanik
Peter Todd
phantomcircuit
phelixbtc
Philip Kaufmann
Pieter Wuille
Rav3nPL
R E Broadley
regergregregerrge
Robert Backhaus
Roman Mindalev
Rune K. Svendsen
Ryan Niebur
Scott Ellis
Scott Willeke
Sergey Kazenyuk
Shawn Wilkinson
Sined
sje
Subo1978
super3
Tamas Blummer
theuni
Thomas Holenstein
Timon Rapp
Timothy Stranex
Tom Geller
Torstein Husebø
Vaclav Vobornik
vhf / victor felder
Vinnie Falco
Warren Togami
Wil Bown
Wladimir J. van der Laan


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.9.1 released
8 April 2014

Bitcoin Core version 0.9.1 is not available for security reasons:

https://bitcoin.org/bin/0.9.1/

This is a security update. It is recommended to upgrade to this release as soon as possible.

It is especially important to upgrade if you currently have version 0.9.0 installed and are using the graphical interface OR you are using bitcoind from any pre-0.9.1 version, and have enabled SSL for RPC and have configured allowip to allow rpc connections from potentially hostile hosts.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

If you are upgrading from version 0.7.2 or earlier, the first time you run 0.9.1 your blockchain files will be re-indexed, which will take anywhere from 30 minutes to several hours, depending on the speed of your machine.

0.9.1 Release notes
No code changes were made between 0.9.0 and 0.9.1. Only the dependencies were changed.

Upgrade OpenSSL to 1.0.1g. This release fixes the following vulnerabilities which can affect the Bitcoin Core software:

CVE-2014-0160 (“heartbleed”) A missing bounds check in the handling of the TLS heartbeat extension can be used to reveal up to 64k of memory to a connected client or server.

CVE-2014-0076 The Montgomery ladder implementation in OpenSSL does not ensure that certain swap operations have a constant-time behavior, which makes it easier for local users to obtain ECDSA nonces via a FLUSH+RELOAD cache side-channel attack.

Add statically built executables to Linux build

Credits
Credits go to the OpenSSL team for fixing the vulnerabilities quickly.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.9.2 released
16 June 2014

Upgrading and downgrading
Important changes
0.9.2 Release notes
Credits
Bitcoin Core version 0.9.2 is not available for security reasons:

https://bitcoin.org/bin/0.9.2/

This is a new minor version release, bringing mostly bug fixes and some minor improvements. OpenSSL has been updated because of a security issue (CVE-2014-0224). Upgrading to this release is recommended.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

Upgrading and downgrading
How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

If you are upgrading from version 0.7.2 or earlier, the first time you run 0.9.2 your blockchain files will be re-indexed, which will take anywhere from 30 minutes to several hours, depending on the speed of your machine.

Downgrading warnings
The ‘chainstate’ for this release is not always compatible with previous releases, so if you run 0.9.x and then decide to switch back to a 0.8.x release you might get a blockchain validation error when starting the old release (due to ‘pruned outputs’ being omitted from the index of unspent transaction outputs).

Running the old release with the -reindex option will rebuild the chainstate data structures and correct the problem.

Also, the first time you run a 0.8.x release on a 0.9 wallet it will rescan the blockchain for missing spent coins, which will take a long time (tens of minutes on a typical machine).

Important changes
Gitian OSX build
The deterministic build system that was already used for Windows and Linux builds is now used for OSX as well. Although the resulting executables have been tested quite a bit, there could be possible regressions. Be sure to report these on the Github bug tracker mentioned above.

Compatibility of Linux build
For Linux we now build against Qt 4.6, and filter the symbols for libstdc++ and glibc. This brings back compatibility with

Debian 6+ / Tails
Ubuntu 10.04
CentOS 6.5
0.9.2 Release notes
The OpenSSL dependency in the gitian builds has been upgraded to 1.0.1h because of CVE-2014-0224.

RPC:

Add getwalletinfo, getblockchaininfo and getnetworkinfo calls (will replace hodge-podge getinfo at some point)
Add a relayfee field to getnetworkinfo
Fix RPC related shutdown hangs and leaks
Always show syncnode in getpeerinfo
sendrawtransaction: report the reject code and reason, and make it possible to re-send transactions that are already in the mempool
getmininginfo show right genproclimit
Command-line options:

Fix -printblocktree output
Show error message if ReadConfigFile fails
Block-chain handling and storage:

Fix for GetBlockValue() after block 13,440,000 (BIP42)
Upgrade leveldb to 1.17
Protocol and network code:

Per-peer block download tracking and stalled download detection
Add new DNS seed from bitnodes.io
Prevent socket leak in ThreadSocketHandler and correct some proxy related socket leaks
Use pnode->nLastRecv as sync score (was the wrong way around)
Wallet:

Make GetAvailableCredit run GetHash() only once per transaction (performance improvement)
Lower paytxfee warning threshold from 0.25 BTC to 0.01 BTC
Fix importwallet nTimeFirstKey (trigger necessary rescans)
Log BerkeleyDB version at startup
CWallet init fix
Build system:

Add OSX build descriptors to gitian
Fix explicit –disable-qt-dbus
Don’t require db_cxx.h when compiling with wallet disabled and GUI enabled
Improve missing boost error reporting
Upgrade miniupnpc version to 1.9
gitian-linux: –enable-glibc-back-compat for binary compatibility with old distributions
gitian: don’t export any symbols from executable
gitian: build against Qt 4.6
devtools: add script to check symbols from Linux gitian executables
Remove build-time no-IPv6 setting
GUI:

Fix various coin control visual issues
Show number of in/out connections in debug console
Show weeks as well as years behind for long timespans behind
Enable and disable the Show and Remove buttons for requested payments history based on whether any entry is selected.
Show also value for options overridden on command line in options dialog
Fill in label from address book also for URIs
Fixes feel when resizing the last column on tables (issue #2862)
Fix ESC in disablewallet mode
Add expert section to wallet tab in optionsdialog
Do proper boost::path conversion (fixes unicode in datadir)
Only override -datadir if different from the default (fixes -datadir in config file)
Show rescan progress at start-up
Show importwallet progress
Get required locks upfront in polling functions (avoids hanging on locks)
Catch Windows shutdown events while client is running
Optionally add third party links to transaction context menu
Check for !pixmap() before trying to export QR code (avoids crashes when no QR code could be generated)
Fix “Start bitcoin on system login”
Miscellaneous:

Replace non-threadsafe C functions (gmtime, strerror and setlocale)
Add missing cs_main and wallet locks
Avoid exception at startup when system locale not recognized
Changed bitrpc.py’s raw_input to getpass for passwords to conceal characters during command line input
devtools: add a script to fetch and postprocess translations
Credits
Thanks to everyone who contributed to this release:

Addy Yeow
Altoidnerd
Andrea D’Amore
Andreas Schildbach
Bardi Harborow
Brandon Dahler
Bryan Bishop
Chris Beams
Christian von Roques
Cory Fields
Cozz Lovan
daniel
Daniel Newton
David A. Harding
ditto-b
duanemoody
Eric S. Bullington
Fabian Raetz
Gavin Andresen
Gregory Maxwell
gubatron
Haakon Nilsen
harry
Hector Jusforgues
Isidoro Ghezzi
Jeff Garzik
Johnathan Corgan
jtimon
Kamil Domanski
langerhans
Luke Dashjr
Manuel Araoz
Mark Friedenbach
Matt Corallo
Matthew Bogosian
Meeh
Michael Ford
Michagogo
Mikael Wikman
Mike Hearn
olalonde
paveljanik
peryaudo
Philip Kaufmann
philsong
Pieter Wuille
R E Broadley
richierichrawr
Rune K. Svendsen
rxl
shshshsh
Simon de la Rouviere
Stuart Cardall
super3
Telepatheic
Thomas Zander
Torstein Husebø
Warren Togami
Wladimir J. van der Laan
Yoichi Hirai


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.9.2.1 released
19 June 2014

Upgrading and downgrading
Important changes
0.9.2 - 0.9.2.1 Release notes
Credits
Bitcoin Core version 0.9.2.1 is not available for security reasons:

https://bitcoin.org/bin/0.9.2.1/

This is a new minor version release, bringing mostly bug fixes and some minor improvements. OpenSSL has been updated because of a security issue (CVE-2014-0224). Upgrading to this release is recommended.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

Upgrading and downgrading
How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

If you are upgrading from version 0.7.2 or earlier, the first time you run 0.9.2.1 your blockchain files will be re-indexed, which will take anywhere from 30 minutes to several hours, depending on the speed of your machine.

Downgrading warnings
The ‘chainstate’ for this release is not always compatible with previous releases, so if you run 0.9.x and then decide to switch back to a 0.8.x release you might get a blockchain validation error when starting the old release (due to ‘pruned outputs’ being omitted from the index of unspent transaction outputs).

Running the old release with the -reindex option will rebuild the chainstate data structures and correct the problem.

Also, the first time you run a 0.8.x release on a 0.9 wallet it will rescan the blockchain for missing spent coins, which will take a long time (tens of minutes on a typical machine).

Important changes
Gitian OSX build
The deterministic build system that was already used for Windows and Linux builds is now used for OSX as well. Although the resulting executables have been tested quite a bit, there could be possible regressions. Be sure to report these on the Github bug tracker mentioned above.

Compatibility of Linux build
For Linux we now build against Qt 4.6, and filter the symbols for libstdc++ and glibc. This brings back compatibility with

Debian 6+ / Tails
Ubuntu 10.04
CentOS 6.5
0.9.2 - 0.9.2.1 Release notes
The OpenSSL dependency in the gitian builds has been upgraded to 1.0.1h because of CVE-2014-0224.

RPC:

Add getwalletinfo, getblockchaininfo and getnetworkinfo calls (will replace hodge-podge getinfo at some point)
Add a relayfee field to getnetworkinfo
Fix RPC related shutdown hangs and leaks
Always show syncnode in getpeerinfo
sendrawtransaction: report the reject code and reason, and make it possible to re-send transactions that are already in the mempool
getmininginfo show right genproclimit
Command-line options:

Fix -printblocktree output
Show error message if ReadConfigFile fails
Block-chain handling and storage:

Fix for GetBlockValue() after block 13,440,000 (BIP42)
Upgrade leveldb to 1.17
Protocol and network code:

Per-peer block download tracking and stalled download detection
Add new DNS seed from bitnodes.io
Prevent socket leak in ThreadSocketHandler and correct some proxy related socket leaks
Use pnode->nLastRecv as sync score (was the wrong way around)
Wallet:

Make GetAvailableCredit run GetHash() only once per transaction (performance improvement)
Lower paytxfee warning threshold from 0.25 BTC to 0.01 BTC
Fix importwallet nTimeFirstKey (trigger necessary rescans)
Log BerkeleyDB version at startup
CWallet init fix
Build system:

Add OSX build descriptors to gitian
Fix explicit –disable-qt-dbus
Don’t require db_cxx.h when compiling with wallet disabled and GUI enabled
Improve missing boost error reporting
Upgrade miniupnpc version to 1.9
gitian-linux: –enable-glibc-back-compat for binary compatibility with old distributions
gitian: don’t export any symbols from executable
gitian: build against Qt 4.6
devtools: add script to check symbols from Linux gitian executables
Remove build-time no-IPv6 setting
GUI:

Fix various coin control visual issues
Show number of in/out connections in debug console
Show weeks as well as years behind for long timespans behind
Enable and disable the Show and Remove buttons for requested payments history based on whether any entry is selected.
Show also value for options overridden on command line in options dialog
Fill in label from address book also for URIs
Fixes feel when resizing the last column on tables (issue #2862)
Fix ESC in disablewallet mode
Add expert section to wallet tab in optionsdialog
Do proper boost::path conversion (fixes unicode in datadir)
Only override -datadir if different from the default (fixes -datadir in config file)
Show rescan progress at start-up
Show importwallet progress
Get required locks upfront in polling functions (avoids hanging on locks)
Catch Windows shutdown events while client is running
Optionally add third party links to transaction context menu
Check for !pixmap() before trying to export QR code (avoids crashes when no QR code could be generated)
Fix “Start bitcoin on system login”
Miscellaneous:

Replace non-threadsafe C functions (gmtime, strerror and setlocale)
Add missing cs_main and wallet locks
Avoid exception at startup when system locale not recognized
Changed bitrpc.py’s raw_input to getpass for passwords to conceal characters during command line input
devtools: add a script to fetch and postprocess translations
Credits
Thanks to everyone who contributed to this release:

Addy Yeow
Altoidnerd
Andrea D’Amore
Andreas Schildbach
Bardi Harborow
Brandon Dahler
Bryan Bishop
Chris Beams
Christian von Roques
Cory Fields
Cozz Lovan
daniel
Daniel Newton
David A. Harding
ditto-b
duanemoody
Eric S. Bullington
Fabian Raetz
Gavin Andresen
Gregory Maxwell
gubatron
Haakon Nilsen
harry
Hector Jusforgues
Isidoro Ghezzi
Jeff Garzik
Johnathan Corgan
jtimon
Kamil Domanski
langerhans
Luke Dashjr
Manuel Araoz
Mark Friedenbach
Matt Corallo
Matthew Bogosian
Meeh
Michael Ford
Michagogo
Mikael Wikman
Mike Hearn
olalonde
paveljanik
peryaudo
Philip Kaufmann
philsong
Pieter Wuille
R E Broadley
richierichrawr
Rune K. Svendsen
rxl
shshshsh
Simon de la Rouviere
Stuart Cardall
super3
Telepatheic
Thomas Zander
Torstein Husebø
Warren Togami
Wladimir J. van der Laan
Yoichi Hirai


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.9.3 released
27 September 2014

Upgrading and downgrading
0.9.3 Release notes
Credits
Bitcoin Core version 0.9.3 is not available for security reasons:

https://bitcoin.org/bin/0.9.3/

This is a new minor version release, bringing only bug fixes and updated translations. Upgrading to this release is recommended.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

Upgrading and downgrading
How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

If you are upgrading from version 0.7.2 or earlier, the first time you run 0.9.3 your blockchain files will be re-indexed, which will take anywhere from 30 minutes to several hours, depending on the speed of your machine.

Downgrading warnings
The ‘chainstate’ for this release is not always compatible with previous releases, so if you run 0.9.x and then decide to switch back to a 0.8.x release you might get a blockchain validation error when starting the old release (due to ‘pruned outputs’ being omitted from the index of unspent transaction outputs).

Running the old release with the -reindex option will rebuild the chainstate data structures and correct the problem.

Also, the first time you run a 0.8.x release on a 0.9 wallet it will rescan the blockchain for missing spent coins, which will take a long time (tens of minutes on a typical machine).

0.9.3 Release notes
RPC:

Avoid a segfault on getblock if it can’t read a block from disk
Add paranoid return value checks in base58
Protocol and network code:

Don’t poll showmyip.com, it doesn’t exist anymore
Add a way to limit deserialized string lengths and use it
Add a new checkpoint at block 295,000
Increase IsStandard() scriptSig length
Avoid querying DNS seeds, if we have open connections
Remove a useless millisleep in socket handler
Stricter memory limits on CNode
Better orphan transaction handling
Add -maxorphantx=<n> and -maxorphanblocks=<n> options for control over the maximum orphan transactions and blocks
Wallet:

Check redeemScript size does not exceed 520 byte limit
Ignore (and warn about) too-long redeemScripts while loading wallet
GUI:

fix ‘opens in testnet mode when presented with a BIP-72 link with no fallback’
AvailableCoins: acquire cs_main mutex
Fix unicode character display on MacOSX
Miscellaneous:

key.cpp: fail with a friendlier message on missing ssl EC support
Remove bignum dependency for scripts
Upgrade OpenSSL to 1.0.1i (see https://www.openssl.org/news/secadv_20140806.txt - just to be sure, no critical issues for Bitcoin Core)
Upgrade miniupnpc to 1.9.20140701
Fix boost detection in build system on some platforms
Credits
Thanks to everyone who contributed to this release:

Andrew Poelstra
Cory Fields
Gavin Andresen
Jeff Garzik
Johnathan Corgan
Julian Haight
Michael Ford
Pavel Vasin
Peter Todd
phantomcircuit
Pieter Wuille
Rose Toomey
Ruben Dario Ponticelli
shshshsh
Trevin Hofmann
Warren Togami
Wladimir J. van der Laan
Zak Wilcox
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.10.0 released
16 February 2015

Upgrading and downgrading
Notable changes
Faster synchronization
Transaction fee changes
RPC access control changes
REST interface
RPC Server “Warm-Up” Mode
Improved signing security
Watch-only wallet support
Consensus library
Standard script rules relaxed for P2SH addresses
bitcoin-tx
Mining and relay policy enhancements
BIP 66: strict DER encoding for signatures
0.10.0 Change log
Credits
Bitcoin Core version 0.10.0 is not available for security reasons:

https://bitcoin.org/bin/0.10.0/

This is a new major version release, bringing both new features and bug fixes.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

Upgrading and downgrading
How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

Downgrading warning
Because release 0.10.0 makes use of headers-first synchronization and parallel block download (see further), the block files and databases are not backwards-compatible with older versions of Bitcoin Core or other software:

Blocks will be stored on disk out of order (in the order they are received, really), which makes it incompatible with some tools or other programs. Reindexing using earlier versions will also not work anymore as a result of this.

The block index database will now hold headers for which no block is stored on disk, which earlier versions won’t support.

If you want to be able to downgrade smoothly, make a backup of your entire data directory. Without this your node will need start syncing (or importing from bootstrap.dat) anew afterwards. It is possible that the data from a completely synchronised 0.10 node may be usable in older versions as-is, but this is not supported and may break as soon as the older version attempts to reindex.

This does not affect wallet forward or backward compatibility.

Notable changes
Faster synchronization
Bitcoin Core now uses ‘headers-first synchronization’. This means that we first ask peers for block headers (a total of 27 megabytes, as of December 2014) and validate those. In a second stage, when the headers have been discovered, we download the blocks. However, as we already know about the whole chain in advance, the blocks can be downloaded in parallel from all available peers.

In practice, this means a much faster and more robust synchronization. On recent hardware with a decent network link, it can be as little as 3 hours for an initial full synchronization. You may notice a slower progress in the very first few minutes, when headers are still being fetched and verified, but it should gain speed afterwards.

A few RPCs were added/updated as a result of this:

getblockchaininfo now returns the number of validated headers in addition to the number of validated blocks.
getpeerinfo lists both the number of blocks and headers we know we have in common with each peer. While synchronizing, the heights of the blocks that we have requested from peers (but haven’t received yet) are also listed as ‘inflight’.
A new RPC getchaintips lists all known branches of the block chain, including those we only have headers for.
Transaction fee changes
This release automatically estimates how high a transaction fee (or how high a priority) transactions require to be confirmed quickly. The default settings will create transactions that confirm quickly; see the new ‘txconfirmtarget’ setting to control the tradeoff between fees and confirmation times. Fees are added by default unless the ‘sendfreetransactions’ setting is enabled.

Prior releases used hard-coded fees (and priorities), and would sometimes create transactions that took a very long time to confirm.

Statistics used to estimate fees and priorities are saved in the data directory in the fee_estimates.dat file just before program shutdown, and are read in at startup.

New command line options for transaction fee changes:

-txconfirmtarget=n : create transactions that have enough fees (or priority) so they are likely to begin confirmation within n blocks (default: 1). This setting is over-ridden by the -paytxfee option.
-sendfreetransactions : Send transactions as zero-fee transactions if possible (default: 0)
New RPC commands for fee estimation:

estimatefee nblocks : Returns approximate fee-per-1,000-bytes needed for a transaction to begin confirmation within nblocks. Returns -1 if not enough transactions have been observed to compute a good estimate.
estimatepriority nblocks : Returns approximate priority needed for a zero-fee transaction to begin confirmation within nblocks. Returns -1 if not enough free transactions have been observed to compute a good estimate.
RPC access control changes
Subnet matching for the purpose of access control is now done by matching the binary network address, instead of with string wildcard matching. For the user this means that -rpcallowip takes a subnet specification, which can be

a single IP address (e.g. 1.2.3.4 or fe80::0012:3456:789a:bcde)
a network/CIDR (e.g. 1.2.3.0/24 or fe80::0000/64)
a network/netmask (e.g. 1.2.3.4/255.255.255.0 or fe80::0012:3456:789a:bcde/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff)
An arbitrary number of -rpcallow arguments can be given. An incoming connection will be accepted if its origin address matches one of them.

For example:

0.9.x and before	0.10.x
-rpcallowip=192.168.1.1	-rpcallowip=192.168.1.1 (unchanged)
-rpcallowip=192.168.1.*	-rpcallowip=192.168.1.0/24
-rpcallowip=192.168.*	-rpcallowip=192.168.0.0/16
-rpcallowip=* (dangerous!)	-rpcallowip=::/0 (still dangerous!)
Using wildcards will result in the rule being rejected with the following error in debug.log:

Error: Invalid -rpcallowip subnet specification: *. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).
REST interface
A new HTTP API is exposed when running with the -rest flag, which allows unauthenticated access to public node data.

It is served on the same port as RPC, but does not need a password, and uses plain HTTP instead of JSON-RPC.

Assuming a local RPC server running on port 8332, it is possible to request:

Blocks: http://localhost:8332/rest/block/HASH.EXT
Blocks without transactions: http://localhost:8332/rest/block/notxdetails/HASH.EXT
Transactions (requires -txindex): http://localhost:8332/rest/tx/HASH.EXT
In every case, EXT can be bin (for raw binary data), hex (for hex-encoded binary) or json.

For more details, see the doc/REST-interface.md document in the repository.

RPC Server “Warm-Up” Mode
The RPC server is started earlier now, before most of the expensive intialisations like loading the block index. It is available now almost immediately after starting the process. However, until all initialisations are done, it always returns an immediate error with code -28 to all calls.

This new behaviour can be useful for clients to know that a server is already started and will be available soon (for instance, so that they do not have to start it themselves).

Improved signing security
For 0.10 the security of signing against unusual attacks has been improved by making the signatures constant time and deterministic.

This change is a result of switching signing to use libsecp256k1 instead of OpenSSL. Libsecp256k1 is a cryptographic library optimized for the curve Bitcoin uses which was created by Bitcoin Core developer Pieter Wuille.

There exist attacks[1] against most ECC implementations where an attacker on shared virtual machine hardware could extract a private key if they could cause a target to sign using the same key hundreds of times. While using shared hosts and reusing keys are inadvisable for other reasons, it’s a better practice to avoid the exposure.

OpenSSL has code in their source repository for derandomization and reduction in timing leaks that we’ve eagerly wanted to use for a long time, but this functionality has still not made its way into a released version of OpenSSL. Libsecp256k1 achieves significantly stronger protection: As far as we’re aware this is the only deployed implementation of constant time signing for the curve Bitcoin uses and we have reason to believe that libsecp256k1 is better tested and more thoroughly reviewed than the implementation in OpenSSL.

[1] https://eprint.iacr.org/2014/161.pdf

Watch-only wallet support
The wallet can now track transactions to and from wallets for which you know all addresses (or scripts), even without the private keys.

This can be used to track payments without needing the private keys online on a possibly vulnerable system. In addition, it can help for (manual) construction of multisig transactions where you are only one of the signers.

One new RPC, importaddress, is added which functions similarly to importprivkey, but instead takes an address or script (in hexadecimal) as argument. After using it, outputs credited to this address or script are considered to be received, and transactions consuming these outputs will be considered to be sent.

The following RPCs have optional support for watch-only: getbalance, listreceivedbyaddress, listreceivedbyaccount, listtransactions, listaccounts, listsinceblock, gettransaction. See the RPC documentation for those methods for more information.

Compared to using getrawtransaction, this mechanism does not require -txindex, scales better, integrates better with the wallet, and is compatible with future block chain pruning functionality. It does mean that all relevant addresses need to added to the wallet before the payment, though.

Consensus library
Starting from 0.10.0, the Bitcoin Core distribution includes a consensus library.

The purpose of this library is to make the verification functionality that is critical to Bitcoin’s consensus available to other applications, e.g. to language bindings such as python-bitcoinlib or alternative node implementations.

This library is called libbitcoinconsensus.so (or, .dll for Windows). Its interface is defined in the C header bitcoinconsensus.h.

In its initial version the API includes two functions:

bitcoinconsensus_verify_script verifies a script. It returns whether the indicated input of the provided serialized transaction correctly spends the passed scriptPubKey under additional constraints indicated by flags
bitcoinconsensus_version returns the API version, currently at an experimental 0
The functionality is planned to be extended to e.g. UTXO management in upcoming releases, but the interface for existing methods should remain stable.

Standard script rules relaxed for P2SH addresses
The IsStandard() rules have been almost completely removed for P2SH redemption scripts, allowing applications to make use of any valid script type, such as “n-of-m OR y”, hash-locked oracle addresses, etc. While the Bitcoin protocol has always supported these types of script, actually using them on mainnet has been previously inconvenient as standard Bitcoin Core nodes wouldn’t relay them to miners, nor would most miners include them in blocks they mined.

bitcoin-tx
It has been observed that many of the RPC functions offered by bitcoind are “pure functions”, and operate independently of the bitcoind wallet. This included many of the RPC “raw transaction” API functions, such as createrawtransaction.

bitcoin-tx is a newly introduced command line utility designed to enable easy manipulation of bitcoin transactions. A summary of its operation may be obtained via “bitcoin-tx –help” Transactions may be created or signed in a manner similar to the RPC raw tx API. Transactions may be updated, deleting inputs or outputs, or appending new inputs and outputs. Custom scripts may be easily composed using a simple text notation, borrowed from the bitcoin test suite.

This tool may be used for experimenting with new transaction types, signing multi-party transactions, and many other uses. Long term, the goal is to deprecate and remove “pure function” RPC API calls, as those do not require a server round-trip to execute.

Other utilities “bitcoin-key” and “bitcoin-script” have been proposed, making key and script operations easily accessible via command line.

Mining and relay policy enhancements
Bitcoin Core’s block templates are now for version 3 blocks only, and any mining software relying on its getblocktemplate must be updated in parallel to use libblkmaker either version 0.4.2 or any version from 0.5.1 onward. If you are solo mining, this will affect you the moment you upgrade Bitcoin Core, which must be done prior to BIP66 achieving its 951/1001 status. If you are mining with the stratum mining protocol: this does not affect you. If you are mining with the getblocktemplate protocol to a pool: this will affect you at the pool operator’s discretion, which must be no later than BIP66 achieving its 951/1001 status.

The prioritisetransaction RPC method has been added to enable miners to manipulate the priority of transactions on an individual basis.

Bitcoin Core now supports BIP 22 long polling, so mining software can be notified immediately of new templates rather than having to poll periodically.

Support for BIP 23 block proposals is now available in Bitcoin Core’s getblocktemplate method. This enables miners to check the basic validity of their next block before expending work on it, reducing risks of accidental hardforks or mining invalid blocks.

Two new options to control mining policy:

-datacarrier=0/1 : Relay and mine “data carrier” (OP_RETURN) transactions if this is 1.
-datacarriersize=n : Maximum size, in bytes, we consider acceptable for “data carrier” outputs.
The relay policy has changed to more properly implement the desired behavior of not relaying free (or very low fee) transactions unless they have a priority above the AllowFreeThreshold(), in which case they are relayed subject to the rate limiter.

BIP 66: strict DER encoding for signatures
Bitcoin Core 0.10 implements BIP 66, which introduces block version 3, and a new consensus rule, which prohibits non-DER signatures. Such transactions have been non-standard since Bitcoin v0.8.0 (released in February 2013), but were technically still permitted inside blocks.

This change breaks the dependency on OpenSSL’s signature parsing, and is required if implementations would want to remove all of OpenSSL from the consensus code.

The same miner-voting mechanism as in BIP 34 is used: when 751 out of a sequence of 1001 blocks have version number 3 or higher, the new consensus rule becomes active for those blocks. When 951 out of a sequence of 1001 blocks have version number 3 or higher, it becomes mandatory for all blocks.

Backward compatibility with current mining software is NOT provided, thus miners should read the first paragraph of “Mining and relay policy enhancements” above.

0.10.0 Change log
Detailed release notes follow. This overview includes changes that affect external behavior, not code moves, refactors or string updates.

RPC:

f923c07 Support IPv6 lookup in bitcoin-cli even when IPv6 only bound on localhost
b641c9c Fix addnode “onetry”: Connect with OpenNetworkConnection
171ca77 estimatefee / estimatepriority RPC methods
b750cf1 Remove cli functionality from bitcoind
f6984e8 Add “chain” to getmininginfo, improve help in getblockchaininfo
99ddc6c Add nLocalServices info to RPC getinfo
cf0c47b Remove getwork() RPC call
2a72d45 prioritisetransaction <txid> <priority delta> <priority tx fee>
e44fea5 Add an option -datacarrier to allow users to disable relaying/mining data carrier transactions
2ec5a3d Prevent easy RPC memory exhaustion attack
d4640d7 Added argument to getbalance to include watchonly addresses and fixed errors in balance calculation
83f3543 Added argument to listaccounts to include watchonly addresses
952877e Showing ‘involvesWatchonly’ property for transactions returned by ‘listtransactions’ and ‘listsinceblock’. It is only appended when the transaction involves a watchonly address
d7d5d23 Added argument to listtransactions and listsinceblock to include watchonly addresses
f87ba3d added includeWatchonly argument to ‘gettransaction’ because it affects balance calculation
0fa2f88 added includedWatchonly argument to listreceivedbyaddress/…account
6c37f7f getrawchangeaddress: fail when keypool exhausted and wallet locked
ff6a7af getblocktemplate: longpolling support
c4a321f Add peerid to getpeerinfo to allow correlation with the logs
1b4568c Add vout to ListTransactions output
b33bd7a Implement “getchaintips” RPC command to monitor blockchain forks
733177e Remove size limit in RPC client, keep it in server
6b5b7cb Categorize rpc help overview
6f2c26a Closely track mempool byte total. Add “getmempoolinfo” RPC
aa82795 Add detailed network info to getnetworkinfo RPC
01094bd Don’t reveal whether password is <20 or >20 characters in RPC
57153d4 rpc: Compute number of confirmations of a block from block height
ff36cbe getnetworkinfo: export local node’s client sub-version string
d14d7de SanitizeString: allow ‘(‘ and ‘)’
31d6390 Fixed setaccount accepting foreign address
b5ec5fe update getnetworkinfo help with subversion
ad6e601 RPC additions after headers-first
33dfbf5 rpc: Fix leveldb iterator leak, and flush before gettxoutsetinfo
2aa6329 Enable customising node policy for datacarrier data size with a -datacarriersize option
f877aaa submitblock: Use a temporary CValidationState to determine accurately the outcome of ProcessBlock
e69a587 submitblock: Support for returning specific rejection reasons
af82884 Add “warmup mode” for RPC server
e2655e0 Add unauthenticated HTTP REST interface to public blockchain data
683dc40 Disable SSLv3 (in favor of TLS) for the RPC client and server
44b4c0d signrawtransaction: validate private key
9765a50 Implement BIP 23 Block Proposal
f9de17e Add warning comment to getinfo
Command-line options:

ee21912 Use netmasks instead of wildcards for IP address matching
deb3572 Add -rpcbind option to allow binding RPC port on a specific interface
96b733e Add -version option to get just the version
1569353 Add -stopafterblockimport option
77cbd46 Let -zapwallettxes recover transaction meta data
1c750db remove -tor compatibility code (only allow -onion)
4aaa017 rework help messages for fee-related options
4278b1d Clarify error message when invalid -rpcallowip
6b407e4 -datadir is now allowed in config files
bdd5b58 Add option -sysperms to disable 077 umask (create new files with system default umask)
cbe39a3 Add “bitcoin-tx” command line utility and supporting modules
dbca89b Trigger -alertnotify if network is upgrading without you
ad96e7c Make -reindex cope with out-of-order blocks
16d5194 Skip reindexed blocks individually
ec01243 –tracerpc option for regression tests
f654f00 Change -genproclimit default to 1
3c77714 Make -proxy set all network types, avoiding a connect leak
57be955 Remove -printblock, -printblocktree, and -printblockindex
ad3d208 remove -maxorphanblocks config parameter since it is no longer functional
Block and transaction handling:

7a0e84d ProcessGetData(): abort if a block file is missing from disk
8c93bf4 LoadBlockIndexDB(): Require block db reindex if any blk*.dat files are missing
77339e5 Get rid of the static chainMostWork (optimization)
4e0eed8 Allow ActivateBestChain to release its lock on cs_main
18e7216 Push cs_mains down in ProcessBlock
fa126ef Avoid undefined behavior using CFlatData in CScript serialization
7f3b4e9 Relax IsStandard rules for pay-to-script-hash transactions
c9a0918 Add a skiplist to the CBlockIndex structure
bc42503 Use unordered_map for CCoinsViewCache with salted hash (optimization)
d4d3fbd Do not flush the cache after every block outside of IBD (optimization)
ad08d0b Bugfix: make CCoinsViewMemPool support pruned entries in underlying cache
5734d4d Only remove actualy failed blocks from setBlockIndexValid
d70bc52 Rework block processing benchmark code
714a3e6 Only keep setBlockIndexValid entries that are possible improvements
ea100c7 Reduce maximum coinscache size during verification (reduce memory usage)
4fad8e6 Reject transactions with excessive numbers of sigops
b0875eb Allow BatchWrite to destroy its input, reducing copying (optimization)
92bb6f2 Bypass reloading blocks from disk (optimization)
2e28031 Perform CVerifyDB on pcoinsdbview instead of pcoinsTip (reduce memory usage)
ab15b2e Avoid copying undo data (optimization)
341735e Headers-first synchronization
afc32c5 Fix rebuild-chainstate feature and improve its performance
e11b2ce Fix large reorgs
ed6d1a2 Keep information about all block files in memory
a48f2d6 Abstract context-dependent block checking from acceptance
7e615f5 Fixed mempool sync after sending a transaction
51ce901 Improve chainstate/blockindex disk writing policy
a206950 Introduce separate flushing modes
9ec75c5 Add a locking mechanism to IsInitialBlockDownload to ensure it never goes from false to true
868d041 Remove coinbase-dependant transactions during reorg
723d12c Remove txn which are invalidated by coinbase maturity during reorg
0cb8763 Check against MANDATORY flags prior to accepting to mempool
8446262 Reject headers that build on an invalid parent
008138c Bugfix: only track UTXO modification after lookup
P2P protocol and network code:

f80cffa Do not trigger a DoS ban if SCRIPT_VERIFY_NULLDUMMY fails
c30329a Add testnet DNS seed of Alex Kotenko
45a4baf Add testnet DNS seed of Andreas Schildbach
f1920e8 Ping automatically every 2 minutes (unconditionally)
806fd19 Allocate receive buffers in on the fly
6ecf3ed Display unknown commands received
aa81564 Track peers’ available blocks
caf6150 Use async name resolving to improve net thread responsiveness
9f4da19 Use pong receive time rather than processing time
0127a9b remove SOCKS4 support from core and GUI, use SOCKS5
40f5cb8 Send rejects and apply DoS scoring for errors in direct block validation
dc942e6 Introduce whitelisted peers
c994d2e prevent SOCKET leak in BindListenPort()
a60120e Add built-in seeds for .onion
60dc8e4 Allow -onlynet=onion to be used
3a56de7 addrman: Do not propagate obviously poor addresses onto the network
6050ab6 netbase: Make SOCKS5 negotiation interruptible
604ee2a Remove tx from AlreadyAskedFor list once we receive it, not when we process it
efad808 Avoid reject message feedback loops
71697f9 Separate protocol versioning from clientversion
20a5f61 Don’t relay alerts to peers before version negotiation
b4ee0bd Introduce preferred download peers
845c86d Do not use third party services for IP detection
12a49ca Limit the number of new addressses to accumulate
35e408f Regard connection failures as attempt for addrman
a3a7317 Introduce 10 minute block download timeout
3022e7d Require sufficent priority for relay of free transactions
58fda4d Update seed IPs, based on bitcoin.sipa.be crawler data
18021d0 Remove bitnodes.io from dnsseeds.
Validation:

6fd7ef2 Also switch the (unused) verification code to low-s instead of even-s
584a358 Do merkle root and txid duplicates check simultaneously
217a5c9 When transaction outputs exceed inputs, show the offending amounts so as to aid debugging
f74fc9b Print input index when signature validation fails, to aid debugging
6fd59ee script.h: set_vch() should shift a >32 bit value
d752ba8 Add SCRIPT_VERIFY_SIGPUSHONLY (BIP62 rule 2) (test only)
698c6ab Add SCRIPT_VERIFY_MINIMALDATA (BIP62 rules 3 and 4) (test only)
ab9edbd script: create sane error return codes for script validation and remove logging
219a147 script: check ScriptError values in script tests
0391423 Discourage NOPs reserved for soft-fork upgrades
98b135f Make STRICTENC invalid pubkeys fail the script rather than the opcode
307f7d4 Report script evaluation failures in log and reject messages
ace39db consensus: guard against openssl’s new strict DER checks
12b7c44 Improve robustness of DER recoding code
76ce5c8 fail immediately on an empty signature
Build system:

f25e3ad Fix build in OS X 10.9
65e8ba4 build: Switch to non-recursive make
460b32d build: fix broken boost chrono check on some platforms
9ce0774 build: Fix windows configure when using –with-qt-libdir
ea96475 build: Add mention of –disable-wallet to bdb48 error messages
1dec09b depends: add shared dependency builder
c101c76 build: Add –with-utils (bitcoin-cli and bitcoin-tx, default=yes). Help string consistency tweaks. Target sanity check fix
e432a5f build: add option for reducing exports (v2)
6134b43 Fixing condition ‘sabotaging’ MSVC build
af0bd5e osx: fix signing to make Gatekeeper happy (again)
a7d1f03 build: fix dynamic boost check when –with-boost= is used
d5fd094 build: fix qt test build when libprotobuf is in a non-standard path
2cf5f16 Add libbitcoinconsensus library
914868a build: add a deterministic dmg signer
2d375fe depends: bump openssl to 1.0.1k
b7a4ecc Build: Only check for boost when building code that requires it
Wallet:

b33d1f5 Use fee/priority estimates in wallet CreateTransaction
4b7b1bb Sanity checks for estimates
c898846 Add support for watch-only addresses
d5087d1 Use script matching rather than destination matching for watch-only
d88af56 Fee fixes
a35b55b Dont run full check every time we decrypt wallet
3a7c348 Fix make_change to not create half-satoshis
f606bb9 fix a possible memory leak in CWalletDB::Recover
870da77 fix possible memory leaks in CWallet::EncryptWallet
ccca27a Watch-only fixes
9b1627d [Wallet] Reduce minTxFee for transaction creation to 1000 satoshis
a53fd41 Deterministic signing
15ad0b5 Apply AreSane() checks to the fees from the network
11855c1 Enforce minRelayTxFee on wallet created tx and add a maxtxfee option
GUI:

c21c74b osx: Fix missing dock menu with qt5
b90711c Fix Transaction details shows wrong To:
516053c Make links in ‘About Bitcoin Core’ clickable
bdc83e8 Ensure payment request network matches client network
65f78a1 Add GUI view of peer information
06a91d9 VerifyDB progress reporting
fe6bff2 Add BerkeleyDB version info to RPCConsole
b917555 PeerTableModel: Fix potential deadlock. #4296
dff0e3b Improve rpc console history behavior
95a9383 Remove CENT-fee-rule from coin control completely
56b07d2 Allow setting listen via GUI
d95ba75 Log messages with type>QtDebugMsg as non-debug
8969828 New status bar Unit Display Control and related changes
674c070 seed OpenSSL PNRG with Windows event data
509f926 Payment request parsing on startup now only changes network if a valid network name is specified
acd432b Prevent balloon-spam after rescan
7007402 Implement SI-style (thin space) thoudands separator
91cce17 Use fixed-point arithmetic in amount spinbox
bdba2dd Remove an obscure option no-one cares about
bd0aa10 Replace the temporary file hack currently used to change Bitcoin-Qt’s dock icon (OS X) with a buffer-based solution
94e1b9e Re-work overviewpage UI
8bfdc9a Better looking trayicon
b197bf3 disable tray interactions when client model set to 0
1c5f0af Add column Watch-only to transactions list
21f139b Fix tablet crash. closes #4854
e84843c Broken addresses on command line no longer trigger testnet
a49f11d Change splash screen to normal window
1f9be98 Disable App Nap on OSX 10.9+
27c3e91 Add proxy to options overridden if necessary
4bd1185 Allow “emergency” shutdown during startup
d52f072 Don’t show wallet options in the preferences menu when running with -disablewallet
6093aa1 Qt: QProgressBar CPU-Issue workaround
0ed9675 [Wallet] Add global boolean whether to send free transactions (default=true)
ed3e5e4 [Wallet] Add global boolean whether to pay at least the custom fee (default=true)
e7876b2 [Wallet] Prevent user from paying a non-sense fee
c1c9d5b Add Smartfee to GUI
e0a25c5 Make askpassphrase dialog behave more sanely
94b362d On close of splashscreen interrupt verifyDB
b790d13 English translation update
8543b0d Correct tooltip on address book page
Tests:

b41e594 Fix script test handling of empty scripts
d3a33fc Test CHECKMULTISIG with m == 0 and n == 0
29c1749 Let tx (in)valid tests use any SCRIPT_VERIFY flag
6380180 Add rejection of non-null CHECKMULTISIG dummy values
21bf3d2 Add tests for BoostAsioToCNetAddr
b5ad5e7 Add Python test for -rpcbind and -rpcallowip
9ec0306 Add CODESEPARATOR/FindAndDelete() tests
75ebced Added many rpc wallet tests
0193fb8 Allow multiple regression tests to run at once
92a6220 Hook up sanity checks
3820e01 Extend and move all crypto tests to crypto_tests.cpp
3f9a019 added list/get received by address/ account tests
a90689f Remove timing-based signature cache unit test
236982c Add skiplist unit tests
f4b00be Add CChain::GetLocator() unit test
b45a6e8 Add test for getblocktemplate longpolling
cdf305e Set -discover=0 in regtest framework
ed02282 additional test for OP_SIZE in script_valid.json
0072d98 script tests: BOOLAND, BOOLOR decode to integer
833ff16 script tests: values that overflow to 0 are true
4cac5db script tests: value with trailing 0x00 is true
89101c6 script test: test case for 5-byte bools
d2d9dc0 script tests: add tests for CHECKMULTISIG limits
d789386 Add “it works” test for bitcoin-tx
df4d61e Add bitcoin-tx tests
aa41ac2 Test IsPushOnly() with invalid push
6022b5d Make script_{valid,invalid}.json validation flags configurable
8138cbe Add automatic script test generation, and actual checksig tests
ed27e53 Add coins_tests with a large randomized CCoinViewCache test
9df9cf5 Make SCRIPT_VERIFY_STRICTENC compatible with BIP62
dcb9846 Extend getchaintips RPC test
554147a Ensure MINIMALDATA invalid tests can only fail one way
dfeec18 Test every numeric-accepting opcode for correct handling of the numeric minimal encoding rule
2b62e17 Clearly separate PUSHDATA and numeric argument MINIMALDATA tests
16d78bd Add valid invert of invalid every numeric opcode tests
f635269 tests: enable alertnotify test for Windows
7a41614 tests: allow rpc-tests to get filenames for bitcoind and bitcoin-cli from the environment
5122ea7 tests: fix forknotify.py on windows
fa7f8cd tests: remove old pull-tester scripts
7667850 tests: replace the old (unused since Travis) tests with new rpc test scripts
f4e0aef Do signature-s negation inside the tests
1837987 Optimize -regtest setgenerate block generation
2db4c8a Fix node ranges in the test framework
a8b2ce5 regression test only setmocktime RPC call
daf03e7 RPC tests: create initial chain with specific timestamps
8656dbb Port/fix txnmall.sh regression test
ca81587 Test the exact order of CHECKMULTISIG sig/pubkey evaluation
7357893 Prioritize and display -testsafemode status in UI
f321d6b Add key generation/verification to ECC sanity check
132ea9b miner_tests: Disable checkpoints so they don’t fail the subsidy-change test
bc6cb41 QA RPC tests: Add tests block block proposals
f67a9ce Use deterministically generated script tests
11d7a7d [RPC] add rpc-test for http keep-alive (persistent connections)
34318d7 RPC-test based on invalidateblock for mempool coinbase spends
76ec867 Use actually valid transactions for script tests
c8589bf Add actual signature tests
e2677d7 Fix smartfees test for change to relay policy
263b65e tests: run sanity checks in tests too
Miscellaneous:

122549f Fix incorrect checkpoint data for testnet3
5bd02cf Log used config file to debug.log on startup
68ba85f Updated Debian example bitcoin.conf with config from wiki + removed some cruft and updated comments
e5ee8f0 Remove -beta suffix
38405ac Add comment regarding experimental-use service bits
be873f6 Issue warning if collecting RandSeed data failed
8ae973c Allocate more space if necessary in RandSeedAddPerfMon
675bcd5 Correct comment for 15-of-15 p2sh script size
fda3fed libsecp256k1 integration
2e36866 Show nodeid instead of addresses in log (for anonymity) unless otherwise requested
cd01a5e Enable paranoid corruption checks in LevelDB >= 1.16
9365937 Add comment about never updating nTimeOffset past 199 samples
403c1bf contrib: remove getwork-based pyminer (as getwork API call has been removed)
0c3e101 contrib: Added systemd .service file in order to help distributions integrate bitcoind
0a0878d doc: Add new DNSseed policy
2887bff Update coding style and add .clang-format
5cbda4f Changed LevelDB cursors to use scoped pointers to ensure destruction when going out of scope
b4a72a7 contrib/linearize: split output files based on new-timestamp-year or max-file-size
e982b57 Use explicit fflush() instead of setvbuf()
234bfbf contrib: Add init scripts and docs for Upstart and OpenRC
01c2807 Add warning about the merkle-tree algorithm duplicate txid flaw
d6712db Also create pid file in non-daemon mode
772ab0e contrib: use batched JSON-RPC in linarize-hashes (optimization)
7ab4358 Update bash-completion for v0.10
6e6a36c contrib: show pull # in prompt for github-merge script
5b9f842 Upgrade leveldb to 1.18, make chainstate databases compatible between ARM and x86 (issue #2293)
4e7c219 Catch UTXO set read errors and shutdown
867c600 Catch LevelDB errors during flush
06ca065 Fix CScriptID(const CScript& in) in empty script case
Credits
Thanks to everyone who contributed to this release:

21E14
Adam Weiss
Aitor Pazos
Alexander Jeng
Alex Morcos
Alon Muroch
Andreas Schildbach
Andrew Poelstra
Andy Alness
Ashley Holman
Benedict Chan
Ben Holden-Crowther
Bryan Bishop
BtcDrak
Christian von Roques
Clinton Christian
Cory Fields
Cozz Lovan
daniel
Daniel Kraft
David Hill
Derek701
dexX7
dllud
Dominyk Tiller
Doug
elichai
elkingtowa
ENikS
Eric Shaw
Federico Bond
Francis GASCHET
Gavin Andresen
Giuseppe Mazzotta
Glenn Willen
Gregory Maxwell
gubatron
HarryWu
himynameismartin
Huang Le
Ian Carroll
imharrywu
Jameson Lopp
Janusz Lenar
JaSK
Jeff Garzik
JL2035
Johnathan Corgan
Jonas Schnelli
jtimon
Julian Haight
Kamil Domanski
kazcw
kevin
kiwigb
Kosta Zertsekel
LongShao007
Luke Dashjr
Mark Friedenbach
Mathy Vanvoorden
Matt Corallo
Matthew Bogosian
Micha
Michael Ford
Mike Hearn
mrbandrews
mruddy
ntrgn
Otto Allmendinger
paveljanik
Pavel Vasin
Peter Todd
phantomcircuit
Philip Kaufmann
Pieter Wuille
pryds
randy-waterhouse
R E Broadley
Rose Toomey
Ross Nicoll
Roy Badami
Ruben Dario Ponticelli
Rune K. Svendsen
Ryan X. Charles
Saivann
sandakersmann
SergioDemianLerner
shshshsh
sinetek
Stuart Cardall
Suhas Daftuar
Tawanda Kembo
Teran McKinney
tm314159
Tom Harding
Trevin Hofmann
Whit J
Wladimir J. van der Laan
Yoichi Hirai
Zak Wilcox
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.10.1 released
27 April 2015

Upgrading and downgrading
How to Upgrade
Downgrade warning
Notable changes
0.10.1 Change log
Credits
Bitcoin Core version 0.10.1 is now available from:

https://bitcoin.org/bin/bitcoin-core-0.10.1/

This is a new minor version release, bringing bug fixes and translation updates. If you are using 0.10.0, it is recommended to upgrade to this version.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

Upgrading and downgrading
How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

Downgrade warning
Because release 0.10.0 and later makes use of headers-first synchronization and parallel block download (see further), the block files and databases are not backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:

Blocks will be stored on disk out of order (in the order they are received, really), which makes it incompatible with some tools or other programs. Reindexing using earlier versions will also not work anymore as a result of this.

The block index database will now hold headers for which no block is stored on disk, which earlier versions won’t support.

If you want to be able to downgrade smoothly, make a backup of your entire data directory. Without this your node will need start syncing (or importing from bootstrap.dat) anew afterwards. It is possible that the data from a completely synchronised 0.10 node may be usable in older versions as-is, but this is not supported and may break as soon as the older version attempts to reindex.

This does not affect wallet forward or backward compatibility.

Notable changes
This is a minor release and hence there are no notable changes. For the notable changes in 0.10, refer to the release notes for the 0.10.0 release at https://github.com/bitcoin/bitcoin/blob/v0.10.0/doc/release-notes.md

0.10.1 Change log
Detailed release notes follow. This overview includes changes that affect external behavior, not code moves, refactors or string updates.

RPC:

7f502be fix crash: createmultisig and addmultisigaddress
eae305f Fix missing lock in submitblock
Block (database) and transaction handling:

1d2cdd2 Fix InvalidateBlock to add chainActive.Tip to setBlockIndexCandidates
c91c660 fix InvalidateBlock to repopulate setBlockIndexCandidates
002c8a2 fix possible block db breakage during re-index
a1f425b Add (optional) consistency check for the block chain data structures
1c62e84 Keep mempool consistent during block-reorgs
57d1f46 Fix CheckBlockIndex for reindex
bac6fca Set nSequenceId when a block is fully linked
P2P protocol and network code:

78f64ef don’t trickle for whitelisted nodes
ca301bf Reduce fingerprinting through timestamps in ‘addr’ messages.
200f293 Ignore getaddr messages on Outbound connections.
d5d8998 Limit message sizes before transfer
aeb9279 Better fingerprinting protection for non-main-chain getdatas.
cf0218f Make addrman’s bucket placement deterministic (countermeasure 1 against eclipse attacks, see http://cs-people.bu.edu/heilman/eclipse/)
0c6f334 Always use a 50% chance to choose between tried and new entries (countermeasure 2 against eclipse attacks)
214154e Do not bias outgoing connections towards fresh addresses (countermeasure 2 against eclipse attacks)
aa587d4 Scale up addrman (countermeasure 6 against eclipse attacks)
139cd81 Cap nAttempts penalty at 8 and switch to pow instead of a division loop
Validation:

d148f62 Acquire CCheckQueue’s lock to avoid race condition
Build system:

8752b5c 0.10 fix for crashes on OSX 10.6
Wallet:

N/A
GUI:

2c08406 some mac specifiy cleanup (memory handling, unnecessary code)
81145a6 fix OSX dock icon window reopening
786cf72 fix a issue where “command line options”-action overwrite “Preference”-action (on OSX)
Tests:

1117378 add RPC test for InvalidateBlock
Miscellaneous:

c9e022b Initialization: set Boost path locale in main thread
23126a0 Sanitize command strings before logging them.
323de27 Initialization: setup environment before starting QT tests
7494e09 Initialization: setup environment before starting tests
df45564 Initialization: set fallback locale as environment variable
Credits
Thanks to everyone who contributed to this release:

Alex Morcos
Cory Fields
dexX7
fsb4000
Gavin Andresen
Gregory Maxwell
Ivan Pustogarov
Jonas Nick
Jonas Schnelli
Matt Corallo
mrbandrews
Pieter Wuille
Ruben de Vries
Suhas Daftuar
Wladimir J. van der Laan
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.10.2 released
19 May 2015

Upgrading and downgrading
How to Upgrade
Downgrade warning
Notable changes
0.10.2 Change log
Credits
Bitcoin Core version 0.10.2 is now available from:

https://bitcoin.org/bin/bitcoin-core-0.10.2/

This is a new minor version release, bringing minor bug fixes and translation updates. It is recommended to upgrade to this version.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

Upgrading and downgrading
How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

Downgrade warning
Because release 0.10.0 and later makes use of headers-first synchronization and parallel block download (see further), the block files and databases are not backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:

Blocks will be stored on disk out of order (in the order they are received, really), which makes it incompatible with some tools or other programs. Reindexing using earlier versions will also not work anymore as a result of this.

The block index database will now hold headers for which no block is stored on disk, which earlier versions won’t support.

If you want to be able to downgrade smoothly, make a backup of your entire data directory. Without this your node will need start syncing (or importing from bootstrap.dat) anew afterwards. It is possible that the data from a completely synchronised 0.10 node may be usable in older versions as-is, but this is not supported and may break as soon as the older version attempts to reindex.

This does not affect wallet forward or backward compatibility.

Notable changes
This fixes a serious problem on Windows with data directories that have non-ASCII characters (https://github.com/bitcoin/bitcoin/issues/6078).

For other platforms there are no notable changes.

For the notable changes in 0.10, refer to the release notes at https://github.com/bitcoin/bitcoin/blob/v0.10.0/doc/release-notes.md

0.10.2 Change log
Detailed release notes follow. This overview includes changes that affect external behavior, not code moves, refactors or string updates.

Wallet:

824c011 fix boost::get usage with boost 1.58
Miscellaneous:

da65606 Avoid crash on start in TestBlockValidity with gen=1.
424ae66 don’t imbue boost::filesystem::path with locale “C” on windows (fixes #6078)
Credits
Thanks to everyone who directly contributed to this release:

Cory Fields
Gregory Maxwell
Jonas Schnelli
Wladimir J. van der Laan
And all those who contributed additional code review and/or security research:

dexX7
Pieter Wuille
vayvanne
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.11.0 released
12 July 2015

Upgrading and downgrading
Important information
Notable changes
0.11.0 Change log
- {:.}
RPC and REST
- {:.}
Configuration and command-line options
- {:.}
Block and transaction handling
- {:.}
P2P protocol and network code
- {:.}
Validation
- {:.}
Build system
- {:.}
Wallet
- {:.}
GUI
- {:.}
Tests
- {:.}
Miscellaneous
Credits
Bitcoin Core version 0.11.0 is now available from:

https://bitcoin.org/bin/bitcoin-core-0.11.0/

This is a new major version release, bringing both new features and bug fixes.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

Upgrading and downgrading
How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

Downgrade warning
Because release 0.10.0 and later makes use of headers-first synchronization and parallel block download (see further), the block files and databases are not backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:

Blocks will be stored on disk out of order (in the order they are received, really), which makes it incompatible with some tools or other programs. Reindexing using earlier versions will also not work anymore as a result of this.

The block index database will now hold headers for which no block is stored on disk, which earlier versions won’t support.

If you want to be able to downgrade smoothly, make a backup of your entire data directory. Without this your node will need start syncing (or importing from bootstrap.dat) anew afterwards. It is possible that the data from a completely synchronised 0.10 node may be usable in older versions as-is, but this is not supported and may break as soon as the older version attempts to reindex.

This does not affect wallet forward or backward compatibility. There are no known problems when downgrading from 0.11.x to 0.10.x.

Important information
Transaction flooding
At the time of this release, the P2P network is being flooded with low-fee transactions. This causes a ballooning of the mempool size.

If this growth of the mempool causes problematic memory use on your node, it is possible to change a few configuration options to work around this. The growth of the mempool can be monitored with the RPC command getmempoolinfo.

One is to increase the minimum transaction relay fee minrelaytxfee, which defaults to 0.00001. This will cause transactions with fewer BTC/kB fee to be rejected, and thus fewer transactions entering the mempool.

The other is to restrict the relaying of free transactions with limitfreerelay. This option sets the number of kB/minute at which free transactions (with enough priority) will be accepted. It defaults to 15. Reducing this number reduces the speed at which the mempool can grow due to free transactions.

For example, add the following to bitcoin.conf:

minrelaytxfee=0.00005
limitfreerelay=5
More robust solutions are being worked on for a follow-up release.

Notable changes
Block file pruning
This release supports running a fully validating node without maintaining a copy of the raw block and undo data on disk. To recap, there are four types of data related to the blockchain in the bitcoin system: the raw blocks as received over the network (blk???.dat), the undo data (rev???.dat), the block index and the UTXO set (both LevelDB databases). The databases are built from the raw data.

Block pruning allows Bitcoin Core to delete the raw block and undo data once it’s been validated and used to build the databases. At that point, the raw data is used only to relay blocks to other nodes, to handle reorganizations, to look up old transactions (if -txindex is enabled or via the RPC/REST interfaces), or for rescanning the wallet. The block index continues to hold the metadata about all blocks in the blockchain.

The user specifies how much space to allot for block & undo files. The minimum allowed is 550MB. Note that this is in addition to whatever is required for the block index and UTXO databases. The minimum was chosen so that Bitcoin Core will be able to maintain at least 288 blocks on disk (two days worth of blocks at 10 minutes per block). In rare instances it is possible that the amount of space used will exceed the pruning target in order to keep the required last 288 blocks on disk.

Block pruning works during initial sync in the same way as during steady state, by deleting block files “as you go” whenever disk space is allocated. Thus, if the user specifies 550MB, once that level is reached the program will begin deleting the oldest block and undo files, while continuing to download the blockchain.

For now, block pruning disables block relay. In the future, nodes with block pruning will at a minimum relay “new” blocks, meaning blocks that extend their active chain.

Block pruning is currently incompatible with running a wallet due to the fact that block data is used for rescanning the wallet and importing keys or addresses (which require a rescan.) However, running the wallet with block pruning will be supported in the near future, subject to those limitations.

Block pruning is also incompatible with -txindex and will automatically disable it.

Once you have pruned blocks, going back to unpruned state requires re-downloading the entire blockchain. To do this, re-start the node with -reindex. Note also that any problem that would cause a user to reindex (e.g., disk corruption) will cause a pruned node to redownload the entire blockchain. Finally, note that when a pruned node reindexes, it will delete any blk???.dat and rev???.dat files in the data directory prior to restarting the download.

To enable block pruning on the command line:

-prune=N: where N is the number of MB to allot for raw block & undo data.
Modified RPC calls:

getblockchaininfo now includes whether we are in pruned mode or not.
getblock will check if the block’s data has been pruned and if so, return an error.
getrawtransaction will no longer be able to locate a transaction that has a UTXO but where its block file has been pruned.
Pruning is disabled by default.

Big endian support
Experimental support for big-endian CPU architectures was added in this release. All little-endian specific code was replaced with endian-neutral constructs. This has been tested on at least MIPS and PPC hosts. The build system will automatically detect the endianness of the target.

Memory usage optimization
There have been many changes in this release to reduce the default memory usage of a node, among which:

Accurate UTXO cache size accounting (#6102); this makes the option -dbcache precise where this grossly underestimated memory usage before
Reduce size of per-peer data structure (#6064 and others); this increases the number of connections that can be supported with the same amount of memory
Reduce the number of threads (#5964, #5679); lowers the amount of (esp. virtual) memory needed
Fee estimation changes
This release improves the algorithm used for fee estimation. Previously, -1 was returned when there was insufficient data to give an estimate. Now, -1 will also be returned when there is no fee or priority high enough for the desired confirmation target. In those cases, it can help to ask for an estimate for a higher target number of blocks. It is not uncommon for there to be no fee or priority high enough to be reliably (85%) included in the next block and for this reason, the default for -txconfirmtarget=n has changed from 1 to 2.

Privacy: Disable wallet transaction broadcast
This release adds an option -walletbroadcast=0 to prevent automatic transaction broadcast and rebroadcast (#5951). This option allows separating transaction submission from the node functionality.

Making use of this, third-party scripts can be written to take care of transaction (re)broadcast:

Send the transaction as normal, either through RPC or the GUI
Retrieve the transaction data through RPC using gettransaction (NOT getrawtransaction). The hex field of the result will contain the raw hexadecimal representation of the transaction
The transaction can then be broadcasted through arbitrary mechanisms supported by the script
One such application is selective Tor usage, where the node runs on the normal internet but transactions are broadcasted over Tor.

For an example script see bitcoin-submittx.

Privacy: Stream isolation for Tor
This release adds functionality to create a new circuit for every peer connection, when the software is used with Tor. The new option, -proxyrandomize, is on by default.

When enabled, every outgoing connection will (potentially) go through a different exit node. That significantly reduces the chance to get unlucky and pick a single exit node that is either malicious, or widely banned from the P2P network. This improves connection reliability as well as privacy, especially for the initial connections.

Important note: If a non-Tor SOCKS5 proxy is configured that supports authentication, but doesn’t require it, this change may cause that proxy to reject connections. A user and password is sent where they weren’t before. This setup is exceedingly rare, but in this case -proxyrandomize=0 can be passed to disable the behavior.

0.11.0 Change log
Detailed release notes follow. This overview includes changes that affect behavior, not code moves, refactors and string updates. For convenience in locating the code changes and accompanying discussion, both the pull request and git merge commit are mentioned.

RPC and REST
#5461 5f7279a signrawtransaction: validate private key
#5444 103f66b Add /rest/headers/<count>/<hash>.<ext>
#4964 95ecc0a Add scriptPubKey field to validateaddress RPC call
#5476 c986972 Add time offset into getpeerinfo output
#5540 84eba47 Add unconfirmed and immature balances to getwalletinfo
#5599 40e96a3 Get rid of the internal miner’s hashmeter
#5711 87ecfb0 Push down RPC locks
#5754 1c4e3f9 fix getblocktemplate lock issue
#5756 5d901d8 Fix getblocktemplate_proposals test by mining one block
#5548 d48ce48 Add /rest/chaininfos
#5992 4c4f1b4 Push down RPC reqWallet flag
#6036 585b5db Show zero value txouts in listunspent
#5199 6364408 Add RPC call gettxoutproof to generate and verify merkle blocks
#5418 16341cc Report missing inputs in sendrawtransaction
#5937 40f5e8d show script verification errors in signrawtransaction result
#5420 1fd2d39 getutxos REST command (based on Bip64)
#6193 42746b0 [REST] remove json input for getutxos, limit to query max. 15 outpoints
#6226 5901596 json: fail read_string if string contains trailing garbage
Configuration and command-line options
#5636 a353ad4 Add option -allowselfsignedrootcertificate to allow self signed root certs (for testing payment requests)
#5900 3e8a1f2 Add a consistency check -checkblockindex for the block chain data structures
#5951 7efc9cf Make it possible to disable wallet transaction broadcast (using -walletbroadcast=0)
#5911 b6ea3bc privacy: Stream isolation for Tor (on by default, use -proxyrandomize=0 to disable)
#5863 c271304 Add autoprune functionality (-prune=<size>)
#6153 0bcf04f Parameter interaction: disable upnp if -proxy set
#6274 4d9c7fe Add option -alerts to opt out of alert system
Block and transaction handling
#5367 dcc1304 Do all block index writes in a batch
#5253 203632d Check against MANDATORY flags prior to accepting to mempool
#5459 4406c3e Reject headers that build on an invalid parent
#5481 055f3ae Apply AreSane() checks to the fees from the network
#5580 40d65eb Preemptively catch a few potential bugs
#5349 f55c5e9 Implement test for merkle tree malleability in CPartialMerkleTree
#5564 a89b837 clarify obscure uses of EvalScript()
#5521 8e4578a Reject non-final txs even in testnet/regtest
#5707 6af674e Change hardcoded character constants to descriptive named constants for db keys
#5286 fcf646c Change the default maximum OP_RETURN size to 80 bytes
#5710 175d86e Add more information to errors in ReadBlockFromDisk
#5948 b36f1ce Use GetAncestor to compute new target
#5959 a0bfc69 Add additional block index consistency checks
#6058 7e0e7f8 autoprune minor post-merge improvements
#5159 2cc1372 New fee estimation code
#6102 6fb90d8 Implement accurate UTXO cache size accounting
#6129 2a82298 Bug fix for clearing fCheckForPruning
#5947 e9af4e6 Alert if it is very likely we are getting a bad chain
#6203 c00ae64 Remove P2SH coinbase flag, no longer interesting
#5985 37b4e42 Fix removing of orphan transactions
#6221 6cb70ca Prune: Support noncontiguous block files
#6256 fce474c Use best header chain timestamps to detect partitioning
#6233 a587606 Advance pindexLastCommonBlock for blocks in chainActive
P2P protocol and network code
#5507 844ace9 Prevent DOS attacks on in-flight data structures
#5770 32a8b6a Sanitize command strings before logging them
#5859 dd4ffce Add correct bool combiner for net signals
#5876 8e4fd0c Add a NODE_GETUTXO service bit and document NODE_NETWORK
#6028 b9311fb Move nLastTry from CAddress to CAddrInfo
#5662 5048465 Change download logic to allow calling getdata on inbound peers
#5971 18d2832 replace absolute sleep with conditional wait
#5918 7bf5d5e Use equivalent PoW for non-main-chain requests
#6059 f026ab6 chainparams: use SeedSpec6’s rather than CAddress’s for fixed seeds
#6080 31c0bf1 Add jonasschnellis dns seeder
#5976 9f7809f Reduce download timeouts as blocks arrive
#6172 b4bbad1 Ignore getheaders requests when not synced
#5875 304892f Be stricter in processing unrequested blocks
#6333 41bbc85 Hardcoded seeds update June 2015
Validation
#5143 48e1765 Implement BIP62 rule 6
#5713 41e6e4c Implement BIP66
Build system
#5501 c76c9d2 Add mips, mipsel and aarch64 to depends platforms
#5334 cf87536 libbitcoinconsensus: Add pkg-config support
#5514 ed11d53 Fix ‘make distcheck’
#5505 a99ef7d Build winshutdownmonitor.cpp on Windows only
#5582 e8a6639 Osx toolchain update
#5684 ab64022 osx: bump build sdk to 10.9
#5695 23ef5b7 depends: latest config.guess and config.sub
#5509 31dedb4 Fixes when compiling in c++11 mode
#5819 f8e68f7 release: use static libstdc++ and disable reduced exports by default
#5510 7c3fbc3 Big endian support
#5149 c7abfa5 Add script to verify all merge commits are signed
#6082 7abbb7e qt: disable qt tests when one of the checks for the gui fails
#6244 0401aa2 configure: Detect (and reject) LibreSSL
#6269 95aca44 gitian: Use the new bitcoin-detached-sigs git repo for OSX signatures
#6285 ef1d506 Fix scheduler build with some boost versions.
#6280 25c2216 depends: fix Boost 1.55 build on GCC 5
#6303 b711599 gitian: add a gitian-win-signer descriptor
#6246 8ea6d37 Fix build on FreeBSD
#6282 daf956b fix crash on shutdown when e.g. changing -txindex and abort action
#6354 bdf0d94 Gitian windows signing normalization
Wallet
#2340 811c71d Discourage fee sniping with nLockTime
#5485 d01bcc4 Enforce minRelayTxFee on wallet created tx and add a maxtxfee option
#5508 9a5cabf Add RandAddSeedPerfmon to MakeNewKey
#4805 8204e19 Do not flush the wallet in AddToWalletIfInvolvingMe(..)
#5319 93b7544 Clean up wallet encryption code
#5831 df5c246 Subtract fee from amount
#6076 6c97fd1 wallet: fix boost::get usage with boost 1.58
#5511 23c998d Sort pending wallet transactions before reaccepting
#6126 26e08a1 Change default nTxConfirmTarget to 2
#6183 75a4d51 Fix off-by-one error w/ nLockTime in the wallet
#6276 c9fd907 Fix getbalance * 0
GUI
#5219 f3af0c8 New icons
#5228 bb3c75b HiDPI (retina) support for splash screen
#5258 73cbf0a The RPC Console should be a QWidget to make window more independent
#5488 851dfc7 Light blue icon color for regtest
#5547 a39aa74 New icon for the debug window
#5493 e515309 Adopt style colour for button icons
#5557 70477a0 On close of splashscreen interrupt verifyDB
#5559 83be8fd Make the command-line-args dialog better
#5144 c5380a9 Elaborate on signverify message dialog warning
#5489 d1aa3c6 Optimize PNG files
#5649 e0cd2f5 Use text-color icons for system tray Send/Receive menu entries
#5651 848f55d Coin Control: Use U+2248 “ALMOST EQUAL TO” rather than a simple tilde
#5626 ab0d798 Fix icon sizes and column width
#5683 c7b22aa add new osx dmg background picture
#5620 7823598 Payment request expiration bug fix
#5729 9c4a5a5 Allow unit changes for read-only BitcoinAmountField
#5753 0f44672 Add bitcoin logo to about screen
#5629 a956586 Prevent amount overflow problem with payment requests
#5830 215475a Don’t save geometry for options and about/help window
#5793 d26f0b2 Honor current network when creating autostart link
#5847 f238add Startup script for centos, with documentation
#5915 5bd3a92 Fix a static qt5 crash when using certain versions of libxcb
#5898 bb56781 Fix rpc console font size to flexible metrics
#5467 bc8535b Payment request / server work - part 2
#6161 180c164 Remove movable option for toolbar
#6160 0d862c2 Overviewpage: make sure warning icons gets colored
Tests
#5453 2f2d337 Add ability to run single test manually to RPC tests
#5421 886eb57 Test unexecuted OP_CODESEPARATOR
#5530 565b300 Additional rpc tests
#5611 37b185c Fix spurious windows test failures after 012598880c
#5613 2eda47b Fix smartfees test for change to relay policy
#5612 e3f5727 Fix zapwallettxes test
#5642 30a5b5f Prepare paymentservertests for new unit tests
#5784 e3a3cd7 Fix usage of NegateSignatureS in script_tests
#5813 ee9f2bf Add unit tests for next difficulty calculations
#5855 d7989c0 Travis: run unit tests in different orders
#5852 cdae53e Reinitialize state in between individual unit tests.
#5883 164d7b6 tests: add a BasicTestingSetup and apply to all tests
#5940 446bb70 Regression test for ResendWalletTransactions
#6052 cf7adad fix and enable bip32 unit test
#6039 734f80a tests: Error when setgenerate is used on regtest
#6074 948beaf Correct the PUSHDATA4 minimal encoding test in script_invalid.json
#6032 e08886d Stop nodes after RPC tests, even with –nocleanup
#6075 df1609f Add additional script edge condition tests
#5981 da38dc6 Python P2P testing
#5958 9ef00c3 Add multisig rpc tests
#6112 fec5c0e Add more script edge condition tests
Miscellaneous
#5457, #5506, #5952, #6047 Update libsecp256k1
#5437 84857e8 Add missing CAutoFile::IsNull() check in main
#5490 ec20fd7 Replace uint256/uint160 with opaque blobs where possible
#5654, #5764 Adding jonasschnelli’s GPG key
#5477 5f04d1d OS X 10.10: LSSharedFileListItemResolve() is deprecated
#5679 beff11a Get rid of DetectShutdownThread
#5787 9bd8c9b Add fanquake PGP key
#5366 47a79bb No longer check osx compatibility in RenameThread
#5689 07f4386 openssl: abstract out OPENSSL_cleanse
#5708 8b298ca Add list of implemented BIPs
#5809 46bfbe7 Add bitcoin-cli man page
#5839 86eb461 keys: remove libsecp256k1 verification until it’s actually supported
#5749 d734d87 Help messages correctly formatted (79 chars)
#5884 7077fe6 BUGFIX: Stack around the variable ‘rv’ was corrupted
#5849 41259ca contrib/init/bitcoind.openrc: Compatibility with previous OpenRC init script variables
#5950 41113e3 Fix locale fallback and guard tests against invalid locale settings
#5965 7c6bfb1 Add git-subtree-check.sh script
#6033 1623f6e FreeBSD, OpenBSD thread renaming
#6064 b46e7c2 Several changes to mruset
#6104 3e2559c Show an init message while activating best chain
#6125 351f73e Clean up parsing of bool command line args
#5964 b4c219b Lightweight task scheduler
#6116 30dc3c1 [OSX] rename Bitcoin-Qt.app to Bitcoin-Core.app
#6168 b3024f0 contrib/linearize: Support linearization of testnet blocks
#6098 7708fcd Update Windows resource files (and add one for bitcoin-tx)
#6159 e1412d3 Catch errors on datadir lock and pidfile delete
#6186 182686c Fix two problems in CSubnet parsing
#6174 df992b9 doc: add translation strings policy
#6210 dfdb6dd build: disable optional use of gmp in internal secp256k1 build
#6264 94cd705 Remove translation for -help-debug options
#6286 3902c15 Remove berkeley-db4 workaround in MacOSX build docs
#6319 3f8fcc9 doc: update mailing list address
Credits
Thanks to everyone who directly contributed to this release:

21E14
Adam Weiss
Alex Morcos
ayeowch
azeteki
Ben Holden-Crowther
bikinibabe
BitcoinPRReadingGroup
Blake Jakopovic
BtcDrak
charlescharles
Chris Arnesen
Ciemon
CohibAA
Corinne Dashjr
Cory Fields
Cozz Lovan
Daira Hopwood
Daniel Kraft
Dave Collins
David A. Harding
dexX7
Earlz
Eric Lombrozo
Eric R. Schulz
Everett Forth
Flavien Charlon
fsb4000
Gavin Andresen
Gregory Maxwell
Heath
Ivan Pustogarov
Jacob Welsh
Jameson Lopp
Jason Lewicki
Jeff Garzik
Jonas Schnelli
Jonathan Brown
Jorge Timón
joshr
jtimon
Julian Yap
Luca Venturini
Luke Dashjr
Manuel Araoz
MarcoFalke
Matt Bogosian
Matt Corallo
Micha
Michael Ford
Mike Hearn
mrbandrews
Nicolas Benoit
paveljanik
Pavel Janík
Pavel Vasin
Peter Todd
Philip Kaufmann
Pieter Wuille
pstratem
randy-waterhouse
rion
Rob Van Mieghem
Ross Nicoll
Ruben de Vries
sandakersmann
Shaul Kfir
Shawn Wilkinson
sinetek
Suhas Daftuar
svost
Thomas Zander
Tom Harding
UdjinM6
Vitalii Demianets
Wladimir J. van der Laan
And all those who contributed additional code review and/or security research:

Sergio Demian Lerner
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.10.3 released
14 October 2015

Upgrading and downgrading
Notable changes
Fix buffer overflow in bundled upnp
Test for LowS signatures before relaying
Minimum relay fee default increase
0.10.3 Change log
Credits
Bitcoin Core version 0.10.3 is now available from:

https://bitcoin.org/bin/bitcoin-core-0.10.3/

This is a new minor version release, bringing security fixes and translation updates. It is recommended to upgrade to this version as soon as possible.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

Upgrading and downgrading
How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

Downgrade warning
Because release 0.10.0 and later makes use of headers-first synchronization and parallel block download (see further), the block files and databases are not backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:

Blocks will be stored on disk out of order (in the order they are received, really), which makes it incompatible with some tools or other programs. Reindexing using earlier versions will also not work anymore as a result of this.

The block index database will now hold headers for which no block is stored on disk, which earlier versions won’t support.

If you want to be able to downgrade smoothly, make a backup of your entire data directory. Without this your node will need start syncing (or importing from bootstrap.dat) anew afterwards. It is possible that the data from a completely synchronised 0.10 node may be usable in older versions as-is, but this is not supported and may break as soon as the older version attempts to reindex.

This does not affect wallet forward or backward compatibility.

Notable changes
Fix buffer overflow in bundled upnp
Bundled miniupnpc was updated to 1.9.20151008. This fixes a buffer overflow in the XML parser during initial network discovery.

Details can be found here: http://talosintel.com/reports/TALOS-2015-0035/

This applies to the distributed executables only, not when building from source or using distribution provided packages.

Additionally, upnp has been disabled by default. This may result in a lower number of reachable nodes on IPv4, however this prevents future libupnpc vulnerabilities from being a structural risk to the network (see https://github.com/bitcoin/bitcoin/pull/6795).

Test for LowS signatures before relaying
Make the node require the canonical ‘low-s’ encoding for ECDSA signatures when relaying or mining. This removes a nuisance malleability vector.

Consensus behavior is unchanged.

If widely deployed this change would eliminate the last remaining known vector for nuisance malleability on SIGHASH_ALL P2PKH transactions. On the down-side it will block most transactions made by sufficiently out of date software.

Unlike the other avenues to change txids on transactions this one was randomly violated by all deployed bitcoin software prior to its discovery. So, while other malleability vectors where made non-standard as soon as they were discovered, this one has remained permitted. Even BIP62 did not propose applying this rule to old version transactions, but conforming implementations have become much more common since BIP62 was initially written.

Bitcoin Core has produced compatible signatures since a28fb70e in September 2013, but this didn’t make it into a release until 0.9 in March 2014; Bitcoinj has done so for a similar span of time. Bitcoinjs and electrum have been more recently updated.

This does not replace the need for BIP62 or similar, as miners can still cooperate to break transactions. Nor does it replace the need for wallet software to handle malleability sanely[1]. This only eliminates the cheap and irritating DOS attack.

[1] On the Malleability of Bitcoin Transactions Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, Łukasz Mazurek http://fc15.ifca.ai/preproceedings/bitcoin/paper_9.pdf

Minimum relay fee default increase
The default for the -minrelaytxfee setting has been increased from 0.00001 to 0.00005.

This is necessitated by the current transaction flooding, causing outrageous memory usage on nodes due to the mempool ballooning. This is a temporary measure, bridging the time until a dynamic method for determining this fee is merged (which will be in 0.12).

(see https://github.com/bitcoin/bitcoin/pull/6793, as well as the 0.11.0 release notes, in which this value was suggested)

0.10.3 Change log
Detailed release notes follow. This overview includes changes that affect external behavior, not code moves, refactors or string updates.

#6186 e4a7d51 Fix two problems in CSubnet parsing
#6153 ebd7d8d Parameter interaction: disable upnp if -proxy set
#6203 ecc96f5 Remove P2SH coinbase flag, no longer interesting
#6226 181771b json: fail read_string if string contains trailing garbage
#6244 09334e0 configure: Detect (and reject) LibreSSL
#6276 0fd8464 Fix getbalance * 0
#6274 be64204 Add option -alerts to opt out of alert system
#6319 3f55638 doc: update mailing list address
#6438 7e66e9c openssl: avoid config file load/race
#6439 255eced Updated URL location of netinstall for Debian
#6412 0739e6e Test whether created sockets are select()able
#6694 f696ea1 [QT] fix thin space word wrap line brake issue
#6704 743cc9e Backport bugfixes to 0.10
#6769 1cea6b0 Test LowS in standardness, removes nuisance malleability vector.
#6789 093d7b5 Update miniupnpc to 1.9.20151008
#6795 f2778e0 net: Disable upnp by default
#6797 91ef4d9 Do not store more than 200 timedata samples
#6793 842c48d Bump minrelaytxfee default
Credits
Thanks to everyone who directly contributed to this release:

Adam Weiss
Alex Morcos
Casey Rodarmor
Cory Fields
fanquake
Gregory Maxwell
Jonas Schnelli
J Ross Nicoll
Luke Dashjr
Pavel Vasin
Pieter Wuille
randy-waterhouse
฿tcDrak
Tom Harding
Veres Lajos
Wladimir J. van der Laan
And all those who contributed additional code review and/or security research:

timothy on IRC for reporting the issue
Vulnerability in miniupnp discovered by Aleksandar Nikolic of Cisco Talos
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.11.1 released
15 October 2015

Upgrading and downgrading
Notable changes
Fix buffer overflow in bundled upnp
Test for LowS signatures before relaying
Minimum relay fee default increase
0.11.1 Change log
Credits
Bitcoin Core version 0.11.1 is now available from:

https://bitcoin.org/bin/bitcoin-core-0.11.1/

This is a new minor version release, bringing security fixes. It is recommended to upgrade to this version as soon as possible.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

Upgrading and downgrading
How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

Downgrade warning
Because release 0.10.0 and later makes use of headers-first synchronization and parallel block download (see further), the block files and databases are not backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:

Blocks will be stored on disk out of order (in the order they are received, really), which makes it incompatible with some tools or other programs. Reindexing using earlier versions will also not work anymore as a result of this.

The block index database will now hold headers for which no block is stored on disk, which earlier versions won’t support.

If you want to be able to downgrade smoothly, make a backup of your entire data directory. Without this your node will need start syncing (or importing from bootstrap.dat) anew afterwards. It is possible that the data from a completely synchronised 0.10 node may be usable in older versions as-is, but this is not supported and may break as soon as the older version attempts to reindex.

This does not affect wallet forward or backward compatibility. There are no known problems when downgrading from 0.11.x to 0.10.x.

Notable changes
Fix buffer overflow in bundled upnp
Bundled miniupnpc was updated to 1.9.20151008. This fixes a buffer overflow in the XML parser during initial network discovery.

Details can be found here: http://talosintel.com/reports/TALOS-2015-0035/

This applies to the distributed executables only, not when building from source or using distribution provided packages.

Additionally, upnp has been disabled by default. This may result in a lower number of reachable nodes on IPv4, however this prevents future libupnpc vulnerabilities from being a structural risk to the network (see https://github.com/bitcoin/bitcoin/pull/6795).

Test for LowS signatures before relaying
Make the node require the canonical ‘low-s’ encoding for ECDSA signatures when relaying or mining. This removes a nuisance malleability vector.

Consensus behavior is unchanged.

If widely deployed this change would eliminate the last remaining known vector for nuisance malleability on SIGHASH_ALL P2PKH transactions. On the down-side it will block most transactions made by sufficiently out of date software.

Unlike the other avenues to change txids on transactions this one was randomly violated by all deployed bitcoin software prior to its discovery. So, while other malleability vectors where made non-standard as soon as they were discovered, this one has remained permitted. Even BIP62 did not propose applying this rule to old version transactions, but conforming implementations have become much more common since BIP62 was initially written.

Bitcoin Core has produced compatible signatures since a28fb70e in September 2013, but this didn’t make it into a release until 0.9 in March 2014; Bitcoinj has done so for a similar span of time. Bitcoinjs and electrum have been more recently updated.

This does not replace the need for BIP62 or similar, as miners can still cooperate to break transactions. Nor does it replace the need for wallet software to handle malleability sanely[1]. This only eliminates the cheap and irritating DOS attack.

[1] On the Malleability of Bitcoin Transactions Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, Łukasz Mazurek http://fc15.ifca.ai/preproceedings/bitcoin/paper_9.pdf

Minimum relay fee default increase
The default for the -minrelaytxfee setting has been increased from 0.00001 to 0.00005.

This is necessitated by the current transaction flooding, causing outrageous memory usage on nodes due to the mempool ballooning. This is a temporary measure, bridging the time until a dynamic method for determining this fee is merged (which will be in 0.12).

(see https://github.com/bitcoin/bitcoin/pull/6793, as well as the 0.11 release notes, in which this value was suggested)

0.11.1 Change log
Detailed release notes follow. This overview includes changes that affect behavior, not code moves, refactors and string updates. For convenience in locating the code changes and accompanying discussion, both the pull request and git merge commit are mentioned.

#6438 2531438 openssl: avoid config file load/race
#6439 980f820 Updated URL location of netinstall for Debian
#6384 8e5a969 qt: Force TLS1.0+ for SSL connections
#6471 92401c2 Depends: bump to qt 5.5
#6224 93b606a Be even stricter in processing unrequested blocks
#6571 100ac4e libbitcoinconsensus: avoid a crash in multi-threaded environments
#6545 649f5d9 Do not store more than 200 timedata samples.
#6694 834e299 [QT] fix thin space word wrap line break issue
#6703 1cd7952 Backport bugfixes to 0.11
#6750 5ed8d0b Recent rejects backport to v0.11
#6769 71cc9d9 Test LowS in standardness, removes nuisance malleability vector.
#6789 b4ad73f Update miniupnpc to 1.9.20151008
#6785 b4dc33e Backport to v0.11: In (strCommand == “tx”), return if AlreadyHave()
#6412 0095b9a Test whether created sockets are select()able
#6795 4dbcec0 net: Disable upnp by default
#6793 e7bcc4a Bump minrelaytxfee default
Credits
Thanks to everyone who directly contributed to this release:

Adam Weiss
Alex Morcos
Casey Rodarmor
Cory Fields
fanquake
Gregory Maxwell
Jonas Schnelli
J Ross Nicoll
Luke Dashjr
Pavel Janík
Pavel Vasin
Peter Todd
Pieter Wuille
randy-waterhouse
Ross Nicoll
Suhas Daftuar
tailsjoin
฿tcDrak
Tom Harding
Veres Lajos
Wladimir J. van der Laan
And those who contributed additional code review and/or security research:

timothy on IRC for reporting the issue
Vulnerability in miniupnp discovered by Aleksandar Nikolic of Cisco Talos
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.11.2 released
13 November 2015

Upgrading and downgrading
Notable changes since 0.11.1
BIP65 soft fork to enforce OP_CHECKLOCKTIMEVERIFY opcode
BIP113 mempool-only locktime enforcement using GetMedianTimePast()
Windows bug fix for corrupted UTXO database on unclean shutdowns
0.11.2 Change log
Credits
Bitcoin Core version 0.11.2 is now available from:

https://bitcoin.org/bin/bitcoin-core-0.11.2/

This is a new minor version release, bringing bug fixes, the BIP65 (CLTV) consensus change, and relay policy preparation for BIP113. It is recommended to upgrade to this version as soon as possible.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

Upgrading and downgrading
How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

Downgrade warning
Because release 0.10.0 and later makes use of headers-first synchronization and parallel block download (see further), the block files and databases are not backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:

Blocks will be stored on disk out of order (in the order they are received, really), which makes it incompatible with some tools or other programs. Reindexing using earlier versions will also not work anymore as a result of this.

The block index database will now hold headers for which no block is stored on disk, which earlier versions won’t support.

If you want to be able to downgrade smoothly, make a backup of your entire data directory. Without this your node will need start syncing (or importing from bootstrap.dat) anew afterwards. It is possible that the data from a completely synchronised 0.10 node may be usable in older versions as-is, but this is not supported and may break as soon as the older version attempts to reindex.

This does not affect wallet forward or backward compatibility. There are no known problems when downgrading from 0.11.x to 0.10.x.

Notable changes since 0.11.1
BIP65 soft fork to enforce OP_CHECKLOCKTIMEVERIFY opcode
This release includes several changes related to the BIP65 soft fork which redefines the existing OP_NOP2 opcode as OP_CHECKLOCKTIMEVERIFY (CLTV) so that a transaction output can be made unspendable until a specified point in the future.

This release will only relay and mine transactions spending a CLTV output if they comply with the BIP65 rules as provided in code.

This release will produce version 4 blocks by default. Please see the notice to miners below.

Once 951 out of a sequence of 1,001 blocks on the local node’s best block chain contain version 4 (or higher) blocks, this release will no longer accept new version 3 blocks and it will only accept version 4 blocks if they comply with the BIP65 rules for CLTV.

For more information about the soft-forking change, please see https://github.com/bitcoin/bitcoin/pull/6351

Graphs showing the progress towards block version 4 adoption may be found at the URLs below:

Block versions over the last 50,000 blocks as progress towards BIP65 consensus enforcement: http://bitcoin.sipa.be/ver-50k.png

Block versions over the last 2,000 blocks showing the days to the earliest possible BIP65 consensus-enforced block: http://bitcoin.sipa.be/ver-2k.png

Notice to miners: Bitcoin Core’s block templates are now for version 4 blocks only, and any mining software relying on its getblocktemplate must be updated in parallel to use libblkmaker either version 0.4.3 or any version from 0.5.2 onward.

If you are solo mining, this will affect you the moment you upgrade Bitcoin Core, which must be done prior to BIP65 achieving its 951/1001 status.

If you are mining with the stratum mining protocol: this does not affect you.

If you are mining with the getblocktemplate protocol to a pool: this will affect you at the pool operator’s discretion, which must be no later than BIP65 achieving its 951/1001 status.

BIP113 mempool-only locktime enforcement using GetMedianTimePast()
Bitcoin transactions currently may specify a locktime indicating when they may be added to a valid block. Current consensus rules require that blocks have a block header time greater than the locktime specified in any transaction in that block.

Miners get to choose what time they use for their header time, with the consensus rule being that no node will accept a block whose time is more than two hours in the future. This creates a incentive for miners to set their header times to future values in order to include locktimed transactions which weren’t supposed to be included for up to two more hours.

The consensus rules also specify that valid blocks may have a header time greater than that of the median of the 11 previous blocks. This GetMedianTimePast() time has a key feature we generally associate with time: it can’t go backwards.

BIP113 specifies a soft fork (not enforced in this release) that weakens this perverse incentive for individual miners to use a future time by requiring that valid blocks have a computed GetMedianTimePast() greater than the locktime specified in any transaction in that block.

Mempool inclusion rules currently require transactions to be valid for immediate inclusion in a block in order to be accepted into the mempool. This release begins applying the BIP113 rule to received transactions, so transaction whose time is greater than the GetMedianTimePast() will no longer be accepted into the mempool.

Implication for miners: you will begin rejecting transactions that would not be valid under BIP113, which will prevent you from producing invalid blocks if/when BIP113 is enforced on the network. Any transactions which are valid under the current rules but not yet valid under the BIP113 rules will either be mined by other miners or delayed until they are valid under BIP113. Note, however, that time-based locktime transactions are more or less unseen on the network currently.

Implication for users: GetMedianTimePast() always trails behind the current time, so a transaction locktime set to the present time will be rejected by nodes running this release until the median time moves forward. To compensate, subtract one hour (3,600 seconds) from your locktimes to allow those transactions to be included in mempools at approximately the expected time.

Windows bug fix for corrupted UTXO database on unclean shutdowns
Several Windows users reported that they often need to reindex the entire blockchain after an unclean shutdown of Bitcoin Core on Windows (or an unclean shutdown of Windows itself). Although unclean shutdowns remain unsafe, this release no longer relies on memory-mapped files for the UTXO database, which significantly reduced the frequency of unclean shutdowns leading to required reindexes during testing.

For more information, see: https://github.com/bitcoin/bitcoin/pull/6917

Other fixes for database corruption on Windows are expected in the next major release.

0.11.2 Change log
Detailed release notes follow. This overview includes changes that affect behavior, not code moves, refactors and string updates. For convenience in locating the code changes and accompanying discussion, both the pull request and git merge commit are mentioned.

#6124 684636b Make CScriptNum() take nMaxNumSize as an argument
#6124 4fa7a04 Replace NOP2 with CHECKLOCKTIMEVERIFY (BIP65)
#6124 6ea5ca4 Enable CHECKLOCKTIMEVERIFY as a standard script verify flag
#6351 5e82e1c Add CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic
#6353 ba1da90 Show softfork status in getblockchaininfo
#6351 6af25b0 Add BIP65 to getblockchaininfo softforks list
#6688 01878c9 Fix locking in GetTransaction
#6653 b3eaa30 [Qt] Raise debug window when requested
#6600 1e672ae Debian/Ubuntu: Include bitcoin-tx binary
#6600 2394f4d Debian/Ubuntu: Split bitcoin-tx into its own package
#5987 33d6825 Bugfix: Allow mining on top of old tip blocks for testnet
#6852 21e58b8 build: make sure OpenSSL heeds noexecstack
#6846 af6edac alias -h for --help
#6867 95a5039 Set TCP_NODELAY on P2P sockets.
#6856 dfe55bd Do not allow blockfile pruning during reindex.
#6566 a1d3c6f Add rules–presently disabled–for using GetMedianTimePast as end point for lock-time calculations
#6566 f720c5f Enable policy enforcing GetMedianTimePast as the end point of lock-time constraints
#6917 0af5b8e leveldb: Win32WritableFile without memory mapping
#6948 4e895b0 Always flush block and undo when switching to new file
Credits
Thanks to everyone who directly contributed to this release:

Alex Morcos
฿tcDrak
Chris Kleeschulte
Daniel Cousens
Diego Viola
Eric Lombrozo
Esteban Ordano
Gregory Maxwell
Luke Dashjr
Marco Falke
Mark Friedenbach
Matt Corallo
Micha
Mitchell Cash
Peter Todd
Pieter Wuille
Wladimir J. van der Laan
Zak Wilcox
And those who contributed additional code review and/or security research.

As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.12.0 released
23 February 2016

Upgrading and downgrading
Notable changes
0.12.0 Change log
- {:.}
RPC and REST
- {:.}
Configuration and command-line options
- {:.}
Block and transaction handling
- {:.}
P2P protocol and network code
- {:.}
Validation
- {:.}
Build system
- {:.}
Wallet
- {:.}
GUI
- {:.}
Tests and QA
- {:.}
Miscellaneous
Credits
Bitcoin Core version 0.12.0 is now available from:

https://bitcoin.org/bin/bitcoin-core-0.12.0/

This is a new major version release, bringing new features and other improvements.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

Upgrading and downgrading
How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

Downgrade warning
Downgrade to a version < 0.10.0
Because release 0.10.0 and later makes use of headers-first synchronization and parallel block download (see further), the block files and databases are not backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:

Blocks will be stored on disk out of order (in the order they are received, really), which makes it incompatible with some tools or other programs. Reindexing using earlier versions will also not work anymore as a result of this.

The block index database will now hold headers for which no block is stored on disk, which earlier versions won’t support.

If you want to be able to downgrade smoothly, make a backup of your entire data directory. Without this your node will need start syncing (or importing from bootstrap.dat) anew afterwards. It is possible that the data from a completely synchronised 0.10 node may be usable in older versions as-is, but this is not supported and may break as soon as the older version attempts to reindex.

This does not affect wallet forward or backward compatibility.

Downgrade to a version < 0.12.0
Because release 0.12.0 and later will obfuscate the chainstate on every fresh sync or reindex, the chainstate is not backwards-compatible with pre-0.12 versions of Bitcoin Core or other software.

If you want to downgrade after you have done a reindex with 0.12.0 or later, you will need to reindex when you first start Bitcoin Core version 0.11 or earlier.

Notable changes
Signature validation using libsecp256k1
ECDSA signatures inside Bitcoin transactions now use validation using libsecp256k1 instead of OpenSSL.

Depending on the platform, this means a significant speedup for raw signature validation speed. The advantage is largest on x86_64, where validation is over five times faster. In practice, this translates to a raw reindexing and new block validation times that are less than half of what it was before.

Libsecp256k1 has undergone very extensive testing and validation.

A side effect of this change is that libconsensus no longer depends on OpenSSL.

Reduce upload traffic
A major part of the outbound traffic is caused by serving historic blocks to other nodes in initial block download state.

It is now possible to reduce the total upload traffic via the -maxuploadtarget parameter. This is not a hard limit but a threshold to minimize the outbound traffic. When the limit is about to be reached, the uploaded data is cut by not serving historic blocks (blocks older than one week). Moreover, any SPV peer is disconnected when they request a filtered block.

This option can be specified in MiB per day and is turned off by default (-maxuploadtarget=0). The recommended minimum is 144 * MAX_BLOCK_SIZE (currently 144MB) per day.

Whitelisted peers will never be disconnected, although their traffic counts for calculating the target.

A more detailed documentation about keeping traffic low can be found in /doc/reduce-traffic.md.

Direct headers announcement (BIP 130)
Between compatible peers, [BIP 130] (https://github.com/bitcoin/bips/blob/master/bip-0130.mediawiki) direct headers announcement is used. This means that blocks are advertised by announcing their headers directly, instead of just announcing the hash. In a reorganization, all new headers are sent, instead of just the new tip. This can often prevent an extra roundtrip before the actual block is downloaded.

With this change, pruning nodes are now able to relay new blocks to compatible peers.

Memory pool limiting
Previous versions of Bitcoin Core had their mempool limited by checking a transaction’s fees against the node’s minimum relay fee. There was no upper bound on the size of the mempool and attackers could send a large number of transactions paying just slighly more than the default minimum relay fee to crash nodes with relatively low RAM. A temporary workaround for previous versions of Bitcoin Core was to raise the default minimum relay fee.

Bitcoin Core 0.12 will have a strict maximum size on the mempool. The default value is 300 MB and can be configured with the -maxmempool parameter. Whenever a transaction would cause the mempool to exceed its maximum size, the transaction that (along with in-mempool descendants) has the lowest total feerate (as a package) will be evicted and the node’s effective minimum relay feerate will be increased to match this feerate plus the initial minimum relay feerate. The initial minimum relay feerate is set to 1000 satoshis per kB.

Bitcoin Core 0.12 also introduces new default policy limits on the length and size of unconfirmed transaction chains that are allowed in the mempool (generally limiting the length of unconfirmed chains to 25 transactions, with a total size of 101 KB). These limits can be overriden using command line arguments; see the extended help (--help -help-debug) for more information.

Opt-in Replace-by-fee transactions
It is now possible to replace transactions in the transaction memory pool of Bitcoin Core 0.12 nodes. Bitcoin Core will only allow replacement of transactions which have any of their inputs’ nSequence number set to less than 0xffffffff - 1. Moreover, a replacement transaction may only be accepted when it pays sufficient fee, as described in [BIP 125] (https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki).

Transaction replacement can be disabled with a new command line option, -mempoolreplacement=0. Transactions signaling replacement under BIP125 will still be allowed into the mempool in this configuration, but replacements will be rejected. This option is intended for miners who want to continue the transaction selection behavior of previous releases.

The -mempoolreplacement option is not recommended for wallet users seeking to avoid receipt of unconfirmed opt-in transactions, because this option does not prevent transactions which are replaceable under BIP 125 from being accepted (only subsequent replacements, which other nodes on the network that implement BIP 125 are likely to relay and mine). Wallet users wishing to detect whether a transaction is subject to replacement under BIP 125 should instead use the updated RPC calls gettransaction and listtransactions, which now have an additional field in the output indicating if a transaction is replaceable under BIP125 (“bip125-replaceable”).

Note that the wallet in Bitcoin Core 0.12 does not yet have support for creating transactions that would be replaceable under BIP 125.

RPC: Random-cookie RPC authentication
When no -rpcpassword is specified, the daemon now uses a special ‘cookie’ file for authentication. This file is generated with random content when the daemon starts, and deleted when it exits. Its contents are used as authentication token. Read access to this file controls who can access through RPC. By default it is stored in the data directory but its location can be overridden with the option -rpccookiefile.

This is similar to Tor’s CookieAuthentication: see https://www.torproject.org/docs/tor-manual.html.en

This allows running bitcoind without having to do any manual configuration.

Relay: Any sequence of pushdatas in OP_RETURN outputs now allowed
Previously OP_RETURN outputs with a payload were only relayed and mined if they had a single pushdata. This restriction has been lifted to allow any combination of data pushes and numeric constant opcodes (OP_1 to OP_16) after the OP_RETURN. The limit on OP_RETURN output size is now applied to the entire serialized scriptPubKey, 83 bytes by default. (the previous 80 byte default plus three bytes overhead)

Relay and Mining: Priority transactions
Bitcoin Core has a heuristic ‘priority’ based on coin value and age. This calculation is used for relaying of transactions which do not pay the minimum relay fee, and can be used as an alternative way of sorting transactions for mined blocks. Bitcoin Core will relay transactions with insufficient fees depending on the setting of -limitfreerelay=<r> (default: r=15 kB per minute) and -blockprioritysize=<s>.

In Bitcoin Core 0.12, when mempool limit has been reached a higher minimum relay fee takes effect to limit memory usage. Transactions which do not meet this higher effective minimum relay fee will not be relayed or mined even if they rank highly according to the priority heuristic.

The mining of transactions based on their priority is also now disabled by default. To re-enable it, simply set -blockprioritysize=<n> where is the size in bytes of your blocks to reserve for these transactions. The old default was 50k, so to retain approximately the same policy, you would set -blockprioritysize=50000.

Additionally, as a result of computational simplifications, the priority value used for transactions received with unconfirmed inputs is lower than in prior versions due to avoiding recomputing the amounts as input transactions confirm.

External miner policy set via the prioritisetransaction RPC to rank transactions already in the mempool continues to work as it has previously. Note, however, that if mining priority transactions is left disabled, the priority delta will be ignored and only the fee metric will be effective.

This internal automatic prioritization handling is being considered for removal entirely in Bitcoin Core 0.13, and it is at this time undecided whether the more accurate priority calculation for chained unconfirmed transactions will be restored. Community direction on this topic is particularly requested to help set project priorities.

Automatically use Tor hidden services
Starting with Tor version 0.2.7.1 it is possible, through Tor’s control socket API, to create and destroy ‘ephemeral’ hidden services programmatically. Bitcoin Core has been updated to make use of this.

This means that if Tor is running (and proper authorization is available), Bitcoin Core automatically creates a hidden service to listen on, without manual configuration. Bitcoin Core will also use Tor automatically to connect to other .onion nodes if the control socket can be successfully opened. This will positively affect the number of available .onion nodes and their usage.

This new feature is enabled by default if Bitcoin Core is listening, and a connection to Tor can be made. It can be configured with the -listenonion, -torcontrol and -torpassword settings. To show verbose debugging information, pass -debug=tor.

Notifications through ZMQ
Bitcoind can now (optionally) asynchronously notify clients through a ZMQ-based PUB socket of the arrival of new transactions and blocks. This feature requires installation of the ZMQ C API library 4.x and configuring its use through the command line or configuration file. Please see docs/zmq.md for details of operation.

Wallet: Transaction fees
Various improvements have been made to how the wallet calculates transaction fees.

Users can decide to pay a predefined fee rate by setting -paytxfee=<n> (or settxfee <n> rpc during runtime). A value of n=0 signals Bitcoin Core to use floating fees. By default, Bitcoin Core will use floating fees.

Based on past transaction data, floating fees approximate the fees required to get into the mth block from now. This is configurable with -txconfirmtarget=<m> (default: 2).

Sometimes, it is not possible to give good estimates, or an estimate at all. Therefore, a fallback value can be set with -fallbackfee=<f> (default: 0.0002 BTC/kB).

At all times, Bitcoin Core will cap fees at -maxtxfee=<x> (default: 0.10) BTC. Furthermore, Bitcoin Core will never create transactions paying less than the current minimum relay fee. Finally, a user can set the minimum fee rate for all transactions with -mintxfee=<i>, which defaults to 1000 satoshis per kB.

Wallet: Negative confirmations and conflict detection
The wallet will now report a negative number for confirmations that indicates how deep in the block chain the conflict is found. For example, if a transaction A has 5 confirmations and spends the same input as a wallet transaction B, B will be reported as having -5 confirmations. If another wallet transaction C spends an output from B, it will also be reported as having -5 confirmations. To detect conflicts with historical transactions in the chain a one-time -rescan may be needed.

Unlike earlier versions, unconfirmed but non-conflicting transactions will never get a negative confirmation count. They are not treated as spendable unless they’re coming from ourself (change) and accepted into our local mempool, however. The new “trusted” field in the listtransactions RPC output indicates whether outputs of an unconfirmed transaction are considered spendable.

Wallet: Merkle branches removed
Previously, every wallet transaction stored a Merkle branch to prove its presence in blocks. This wasn’t being used for more than an expensive sanity check. Since 0.12, these are no longer stored. When loading a 0.12 wallet into an older version, it will automatically rescan to avoid failed checks.

Wallet: Pruning
With 0.12 it is possible to use wallet functionality in pruned mode. This can reduce the disk usage from currently around 60 GB to around 2 GB.

However, rescans as well as the RPCs importwallet, importaddress, importprivkey are disabled.

To enable block pruning set prune=<N> on the command line or in bitcoin.conf, where N is the number of MiB to allot for raw block & undo data.

A value of 0 disables pruning. The minimal value above 0 is 550. Your wallet is as secure with high values as it is with low ones. Higher values merely ensure that your node will not shut down upon blockchain reorganizations of more than 2 days - which are unlikely to happen in practice. In future releases, a higher value may also help the network as a whole: stored blocks could be served to other nodes.

For further information about pruning, you may also consult the release notes of v0.11.0.

NODE_BLOOM service bit
Support for the NODE_BLOOM service bit, as described in BIP 111, has been added to the P2P protocol code.

BIP 111 defines a service bit to allow peers to advertise that they support bloom filters (such as used by SPV clients) explicitly. It also bumps the protocol version to allow peers to identify old nodes which allow bloom filtering of the connection despite lacking the new service bit.

In this version, it is only enforced for peers that send protocol versions >=70011. For the next major version it is planned that this restriction will be removed. It is recommended to update SPV clients to check for the NODE_BLOOM service bit for nodes that report versions newer than 70011.

Option parsing behavior
Command line options are now parsed strictly in the order in which they are specified. It used to be the case that -X -noX ends up, unintuitively, with X set, as -X had precedence over -noX. This is no longer the case. Like for other software, the last specified value for an option will hold.

RPC: Low-level API changes
Monetary amounts can be provided as strings. This means that for example the argument to sendtoaddress can be “0.0001” instead of 0.0001. This can be an advantage if a JSON library insists on using a lossy floating point type for numbers, which would be dangerous for monetary amounts.

The asm property of each scriptSig now contains the decoded signature hash type for each signature that provides a valid defined hash type.

OP_NOP2 has been renamed to OP_CHECKLOCKTIMEVERIFY by BIP 65

The following items contain assembly representations of scriptSig signatures and are affected by this change:

RPC getrawtransaction
RPC decoderawtransaction
RPC decodescript
REST /rest/tx/ (JSON format)
REST /rest/block/ (JSON format when including extended tx details)
bitcoin-tx -json
For example, the scriptSig.asm property of a transaction input that previously showed an assembly representation of:

304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c509001 400000 OP_NOP2
now shows as:

304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c5090[ALL] 400000 OP_CHECKLOCKTIMEVERIFY
Note that the output of the RPC decodescript did not change because it is configured specifically to process scriptPubKey and not scriptSig scripts.

RPC: SSL support dropped
SSL support for RPC, previously enabled by the option rpcssl has been dropped from both the client and the server. This was done in preparation for removing the dependency on OpenSSL for the daemon completely.

Trying to use rpcssl will result in an error:

Error: SSL mode for RPC (-rpcssl) is no longer supported.
If you are one of the few people that relies on this feature, a flexible migration path is to use stunnel. This is an utility that can tunnel arbitrary TCP connections inside SSL. On e.g. Ubuntu it can be installed with:

sudo apt-get install stunnel4
Then, to tunnel a SSL connection on 28332 to a RPC server bound on localhost on port 18332 do:

stunnel -d 28332 -r 127.0.0.1:18332 -p stunnel.pem -P ''
It can also be set up system-wide in inetd style.

Another way to re-attain SSL would be to setup a httpd reverse proxy. This solution would allow the use of different authentication, loadbalancing, on-the-fly compression and caching. A sample config for apache2 could look like:

Listen 443

NameVirtualHost *:443
<VirtualHost *:443>

SSLEngine On
SSLCertificateFile /etc/apache2/ssl/server.crt
SSLCertificateKeyFile /etc/apache2/ssl/server.key

<Location /bitcoinrpc>
    ProxyPass http://127.0.0.1:8332/
    ProxyPassReverse http://127.0.0.1:8332/
    # optional enable digest auth
    # AuthType Digest
    # ...

    # optional bypass bitcoind rpc basic auth
    # RequestHeader set Authorization "Basic <hash>"
    # get the <hash> from the shell with: base64 <<< bitcoinrpc:<password>
</Location>

# Or, balance the load:
# ProxyPass / balancer://balancer_cluster_name

</VirtualHost>
Mining Code Changes
The mining code in 0.12 has been optimized to be significantly faster and use less memory. As part of these changes, consensus critical calculations are cached on a transaction’s acceptance into the mempool and the mining code now relies on the consistency of the mempool to assemble blocks. However all blocks are still tested for validity after assembly.

Other P2P Changes
The list of banned peers is now stored on disk rather than in memory. Restarting bitcoind will no longer clear out the list of banned peers; instead a new RPC call (clearbanned) can be used to manually clear the list. The new setban RPC call can also be used to manually ban or unban a peer.

0.12.0 Change log
Detailed release notes follow. This overview includes changes that affect behavior, not code moves, refactors and string updates. For convenience in locating the code changes and accompanying discussion, both the pull request and git merge commit are mentioned.

RPC and REST
#6121 466f0ea Convert entire source tree from json_spirit to UniValue (Jonas Schnelli)
#6234 d38cd47 fix rpcmining/getblocktemplate univalue transition logic error (Jonas Schnelli)
#6239 643114f Don’t go through double in AmountFromValue and ValueFromAmount (Wladimir J. van der Laan)
#6266 ebab5d3 Fix univalue handling of \u0000 characters. (Daniel Kraft)
#6276 f3d4dbb Fix getbalance * 0 (Tom Harding)
#6257 5ebe7db Add paytxfee and errors JSON fields where appropriate (Stephen)
#6271 754aae5 New RPC command disconnectnode (Alex van der Peet)
#6158 0abfa8a Add setban/listbanned RPC commands (Jonas Schnelli)
#6307 7ecdcd9 rpcban fixes (Jonas Schnelli)
#6290 5753988 rpc: make gettxoutsettinfo run lock-free (Wladimir J. van der Laan)
#6262 247b914 Return all available information via RPC call “validateaddress” (dexX7)
#6339 c3f0490 UniValue: don’t escape solidus, keep espacing of reverse solidus (Jonas Schnelli)
#6353 6bcb0a2 Show softfork status in getblockchaininfo (Wladimir J. van der Laan)
#6247 726e286 Add getblockheader RPC call (Peter Todd)
#6362 d6db115 Fix null id in RPC response during startup (Forrest Voight)
#5486 943b322 [REST] JSON support for /rest/headers (Jonas Schnelli)
#6379 c52e8b3 rpc: Accept scientific notation for monetary amounts in JSON (Wladimir J. van der Laan)
#6388 fd5dfda rpc: Implement random-cookie based authentication (Wladimir J. van der Laan)
#6457 3c923e8 Include pruned state in chaininfo.json (Simon Males)
#6456 bfd807f rpc: Avoid unnecessary parsing roundtrip in number formatting, fix locale issue (Wladimir J. van der Laan)
#6380 240b30e rpc: Accept strings in AmountFromValue (Wladimir J. van der Laan)
#6346 6bb2805 Add OP_RETURN support in createrawtransaction RPC call, add tests. (paveljanik)
#6013 6feeec1 [REST] Add memory pool API (paveljanik)
#6576 da9beb2 Stop parsing JSON after first finished construct. (Daniel Kraft)
#5677 9aa9099 libevent-based http server (Wladimir J. van der Laan)
#6633 bbc2b39 Report minimum ping time in getpeerinfo (Matt Corallo)
#6648 cd381d7 Simplify logic of REST request suffix parsing. (Daniel Kraft)
#6695 5e21388 libevent http fixes (Wladimir J. van der Laan)
#5264 48efbdb show scriptSig signature hash types in transaction decodes. fixes #3166 (mruddy)
#6719 1a9f19a Make HTTP server shutdown more graceful (Wladimir J. van der Laan)
#6859 0fbfc51 http: Restrict maximum size of http + headers (Wladimir J. van der Laan)
#5936 bf7c195 [RPC] Add optional locktime to createrawtransaction (Tom Harding)
#6877 26f5b34 rpc: Add maxmempool and effective min fee to getmempoolinfo (Wladimir J. van der Laan)
#6970 92701b3 Fix crash in validateaddress with -disablewallet (Wladimir J. van der Laan)
#5574 755b4ba Expose GUI labels in RPC as comments (Luke-Jr)
#6990 dbd2c13 http: speed up shutdown (Wladimir J. van der Laan)
#7013 36baa9f Remove LOCK(cs_main) from decodescript (Peter Todd)
#6999 972bf9c add (max)uploadtarget infos to getnettotals RPC help (Jonas Schnelli)
#7011 31de241 Add mediantime to getblockchaininfo (Peter Todd)
#7065 f91e29f http: add Boost 1.49 compatibility (Wladimir J. van der Laan)
#7087 be281d8 [Net]Add -enforcenodebloom option (Patrick Strateman)
#7044 438ee59 RPC: Added additional config option for multiple RPC users. (Gregory Sanders)
#7072 c143c49 [RPC] Add transaction size to JSON output (Nikita Zhavoronkov)
#7022 9afbd96 Change default block priority size to 0 (Alex Morcos)
#7141 c0c08c7 rpc: Don’t translate warning messages (Wladimir J. van der Laan)
#7312 fd4bd50 Add RPC call abandontransaction (Alex Morcos)
#7222 e25b158 RPC: indicate which transactions are replaceable (Suhas Daftuar)
#7472 b2f2b85 rpc: Add WWW-Authenticate header to 401 response (Wladimir J. van der Laan)
#7469 9cb31e6 net.h fix spelling: misbeha{b,v}ing (Matt)
Configuration and command-line options
#6164 8d05ec7 Allow user to use -debug=1 to enable all debugging (lpescher)
#5288 4452205 Added -whiteconnections=<n> option (Josh Lehan)
#6284 10ac38e Fix argument parsing oddity with -noX (Wladimir J. van der Laan)
#6489 c9c017a Give a better error message if system clock is bad (Casey Rodarmor)
#6462 c384800 implement uacomment config parameter which can add comments to user agent as per BIP-0014 (Pavol Rusnak)
#6647 a3babc8 Sanitize uacomment (MarcoFalke)
#6742 3b2d37c Changed logging to make -logtimestamps to work also for -printtoconsole (arnuschky)
#6846 2cd020d alias -h for -help (Daniel Cousens)
#6622 7939164 Introduce -maxuploadtarget (Jonas Schnelli)
#6881 2b62551 Debug: Add option for microsecond precision in debug.log (Suhas Daftuar)
#6776 e06c14f Support -checkmempool=N, which runs checks once every N transactions (Pieter Wuille)
#6896 d482c0a Make -checkmempool=1 not fail through int32 overflow (Pieter Wuille)
#6993 b632145 Add -blocksonly option (Patrick Strateman)
#7323 a344880 0.12: Backport -bytespersigop option (Luke-Jr)
#7386 da83ecd Add option -permitrbf to set transaction replacement policy (Wladimir J. van der Laan)
#7290 b16b5bc Add missing options help (MarcoFalke)
#7440 c76bfff Rename permitrbf to mempoolreplacement and provide minimal string-list forward compatibility (Luke-Jr)
Block and transaction handling
#6203 f00b623 Remove P2SH coinbase flag, no longer interesting (Luke-Jr)
#6222 9c93ee5 Explicitly set tx.nVersion for the genesis block and mining tests (Mark Friedenbach)
#5985 3a1d3e8 Fix removing of orphan transactions (Alex Morcos)
#6221 dd8fe82 Prune: Support noncontiguous block files (Adam Weiss)
#6124 41076aa Mempool only CHECKLOCKTIMEVERIFY (BIP65) verification, unparameterized version (Peter Todd)
#6329 d0a10c1 acceptnonstdtxn option to skip (most) “non-standard transaction” checks, for testnet/regtest only (Luke-Jr)
#6410 7cdefb9 Implement accurate memory accounting for mempool (Pieter Wuille)
#6444 24ce77d Exempt unspendable transaction outputs from dust checks (dexX7)
#5913 a0625b8 Add absurdly high fee message to validation state (Shaul Kfir)
#6177 2f746c6 Prevent block.nTime from decreasing (Mark Friedenbach)
#6377 e545371 Handle no chain tip available in InvalidChainFound() (Ross Nicoll)
#6551 39ddaeb Handle leveldb::DestroyDB() errors on wipe failure (Adam Weiss)
#6654 b0ce450 Mempool package tracking (Suhas Daftuar)
#6715 82d2aef Fix mempool packages (Suhas Daftuar)
#6680 4f44530 use CBlockIndex instead of uint256 for UpdatedBlockTip signal (Jonas Schnelli)
#6650 4fac576 Obfuscate chainstate (James O’Beirne)
#6777 9caaf6e Unobfuscate chainstate data in CCoinsViewDB::GetStats (James O’Beirne)
#6722 3b20e23 Limit mempool by throwing away the cheapest txn and setting min relay fee to it (Matt Corallo)
#6889 38369dd fix locking issue with new mempool limiting (Jonas Schnelli)
#6464 8f3b3cd Always clean up manual transaction prioritization (Casey Rodarmor)
#6865 d0badb9 Fix chainstate serialized_size computation (Pieter Wuille)
#6566 ff057f4 BIP-113: Mempool-only median time-past as endpoint for lock-time calculations (Mark Friedenbach)
#6934 3038eb6 Restores mempool only BIP113 enforcement (Gregory Maxwell)
#6965 de7d459 Benchmark sanity checks and fork checks in ConnectBlock (Matt Corallo)
#6918 eb6172a Make sigcache faster, more efficient, larger (Pieter Wuille)
#6771 38ed190 Policy: Lower default limits for tx chains (Alex Morcos)
#6932 73fa5e6 ModifyNewCoins saves database lookups (Alex Morcos)
#5967 05d5918 Alter assumptions in CCoinsViewCache::BatchWrite (Alex Morcos)
#6871 0e93586 nSequence-based Full-RBF opt-in (Peter Todd)
#7008 eb77416 Lower bound priority (Alex Morcos)
#6915 2ef5ffa [Mempool] Improve removal of invalid transactions after reorgs (Suhas Daftuar)
#6898 4077ad2 Rewrite CreateNewBlock (Alex Morcos)
#6872 bdda4d5 Remove UTXO cache entries when the tx they were added for is removed/does not enter mempool (Matt Corallo)
#7062 12c469b [Mempool] Fix mempool limiting and replace-by-fee for PrioritiseTransaction (Suhas Daftuar)
#7276 76de36f Report non-mandatory script failures correctly (Pieter Wuille)
#7217 e08b7cb Mark blocks with too many sigops as failed (Suhas Daftuar)
#7387 f4b2ce8 Get rid of inaccurate ScriptSigArgsExpected (Pieter Wuille)
P2P protocol and network code
#6172 88a7ead Ignore getheaders requests when not synced (Suhas Daftuar)
#5875 9d60602 Be stricter in processing unrequested blocks (Suhas Daftuar)
#6256 8ccc07c Use best header chain timestamps to detect partitioning (Gavin Andresen)
#6283 a903ad7 make CAddrMan::size() return the correct type of size_t (Diapolo)
#6272 40400d5 Improve proxy initialization (continues #4871) (Wladimir J. van der Laan, Diapolo)
#6310 66e5465 banlist.dat: store banlist on disk (Jonas Schnelli)
#6412 1a2de32 Test whether created sockets are select()able (Pieter Wuille)
#6498 219b916 Keep track of recently rejected transactions with a rolling bloom filter (cont’d) (Peter Todd)
#6556 70ec975 Fix masking of irrelevant bits in address groups. (Alex Morcos)
#6530 ea19c2b Improve addrman Select() performance when buckets are nearly empty (Pieter Wuille)
#6583 af9305a add support for miniupnpc api version 14 (Pavel Vasin)
#6374 69dc5b5 Connection slot exhaustion DoS mitigation (Patrick Strateman)
#6636 536207f net: correctly initialize nMinPingUsecTime (Wladimir J. van der Laan)
#6579 0c27795 Add NODE_BLOOM service bit and bump protocol version (Matt Corallo)
#6148 999c8be Relay blocks when pruning (Suhas Daftuar)
#6588 cf9bb11 In (strCommand == “tx”), return if AlreadyHave() (Tom Harding)
#6974 2f71b07 Always allow getheaders from whitelisted peers (Wladimir J. van der Laan)
#6639 bd629d7 net: Automatically create hidden service, listen on Tor (Wladimir J. van der Laan)
#6984 9ffc687 don’t enforce maxuploadtarget’s disconnect for whitelisted peers (Jonas Schnelli)
#7046 c322652 Net: Improve blocks only mode. (Patrick Strateman)
#7090 d6454f6 Connect to Tor hidden services by default (when listening on Tor) (Peter Todd)
#7106 c894fbb Fix and improve relay from whitelisted peers (Pieter Wuille)
#7129 5d5ef3a Direct headers announcement (rebase of #6494) (Pieter Wuille)
#7079 1b5118b Prevent peer flooding inv request queue (redux) (redux) (Gregory Maxwell)
#7166 6ba25d2 Disconnect on mempool requests from peers when over the upload limit. (Gregory Maxwell)
#7133 f31955d Replace setInventoryKnown with a rolling bloom filter (rebase of #7100) (Pieter Wuille)
#7174 82aff88 Don’t do mempool lookups for “mempool” command without a filter (Matt Corallo)
#7179 44fef99 net: Fix sent reject messages for blocks and transactions (Wladimir J. van der Laan)
#7181 8fc174a net: Add and document network messages in protocol.h (Wladimir J. van der Laan)
#7125 10b88be Replace global trickle node with random delays (Pieter Wuille)
#7415 cb83beb net: Hardcoded seeds update January 2016 (Wladimir J. van der Laan)
#7438 e2d9a58 Do not absolutely protect local peers; decide group ties based on time (Gregory Maxwell)
#7439 86755bc Add whitelistforcerelay to control forced relaying. [#7099 redux] (Gregory Maxwell)
#7482 e16f5b4 Ensure headers count is correct (Suhas Daftuar)
Validation
#5927 8d9f0a6 Reduce checkpoints’ effect on consensus. (Pieter Wuille)
#6299 24f2489 Bugfix: Don’t check the genesis block header before accepting it (Jorge Timón)
#6361 d7ada03 Use real number of cores for default -par, ignore virtual cores (Wladimir J. van der Laan)
#6519 87f37e2 Make logging for validation optional (Wladimir J. van der Laan)
#6351 2a1090d CHECKLOCKTIMEVERIFY (BIP65) IsSuperMajority() soft-fork (Peter Todd)
#6931 54e8bfe Skip BIP 30 verification where not necessary (Alex Morcos)
#6954 e54ebbf Switch to libsecp256k1-based ECDSA validation (Pieter Wuille)
#6508 61457c2 Switch to a constant-space Merkle root/branch algorithm. (Pieter Wuille)
#6914 327291a Add pre-allocated vector type and use it for CScript (Pieter Wuille)
#7500 889e5b3 Correctly report high-S violations (Pieter Wuille)
Build system
#6210 0e4f2a0 build: disable optional use of gmp in internal secp256k1 build (Wladimir J. van der Laan)
#6214 87406aa [OSX] revert renaming of Bitcoin-Qt.app and use CFBundleDisplayName (partial revert of #6116) (Jonas Schnelli)
#6218 9d67b10 build/gitian misc updates (Cory Fields)
#6269 d4565b6 gitian: Use the new bitcoin-detached-sigs git repo for OSX signatures (Cory Fields)
#6418 d4a910c Add autogen.sh to source tarball. (randy-waterhouse)
#6373 1ae3196 depends: non-qt bumps for 0.12 (Cory Fields)
#6434 059b352 Preserve user-passed CXXFLAGS with –enable-debug (Gavin Andresen)
#6501 fee6554 Misc build fixes (Cory Fields)
#6600 ef4945f Include bitcoin-tx binary on Debian/Ubuntu (Zak Wilcox)
#6619 4862708 depends: bump miniupnpc and ccache (Michael Ford)
#6801 ae69a75 [depends] Latest config.guess and config.sub (Michael Ford)
#6938 193f7b5 build: If both Qt4 and Qt5 are installed, use Qt5 (Wladimir J. van der Laan)
#7092 348b281 build: Set osx permissions in the dmg to make Gatekeeper happy (Cory Fields)
#6980 eccd671 [Depends] Bump Boost, miniupnpc, ccache & zeromq (Michael Ford)
#7424 aa26ee0 Add security/export checks to gitian and fix current failures (Cory Fields)
Wallet
#6183 87550ee Fix off-by-one error w/ nLockTime in the wallet (Peter Todd)
#6057 ac5476e re-enable wallet in autoprune (Jonas Schnelli)
#6356 9e6c33b Delay initial pruning until after wallet init (Adam Weiss)
#6088 91389e5 fundrawtransaction (Matt Corallo)
#6415 ddd8d80 Implement watchonly support in fundrawtransaction (Matt Corallo)
#6567 0f0f323 Fix crash when mining with empty keypool. (Daniel Kraft)
#6688 4939eab Fix locking in GetTransaction. (Alex Morcos)
#6645 4dbd43e Enable wallet key imports without rescan in pruned mode. (Gregory Maxwell)
#6550 5b77244 Do not store Merkle branches in the wallet. (Pieter Wuille)
#5924 12a7712 Clean up change computation in CreateTransaction. (Daniel Kraft)
#6906 48b5b84 Reject invalid pubkeys when reading ckey items from the wallet. (Gregory Maxwell)
#7010 e0a5ef8 Fix fundrawtransaction handling of includeWatching (Peter Todd)
#6851 616d61b Optimisation: Store transaction list order in memory rather than compute it every need (Luke-Jr)
#6134 e92377f Improve usage of fee estimation code (Alex Morcos)
#7103 a775182 [wallet, rpc tests] Fix settxfee, paytxfee (MarcoFalke)
#7105 30c2d8c Keep track of explicit wallet conflicts instead of using mempool (Pieter Wuille)
#7096 9490bd7 [Wallet] Improve minimum absolute fee GUI options (Jonas Schnelli)
#6216 83f06ca Take the training wheels off anti-fee-sniping (Peter Todd)
#4906 96e8d12 Issue#1643: Coinselection prunes extraneous inputs from ApproximateBestSubset (Murch)
#7200 06c6a58 Checks for null data transaction before issuing error to debug.log (Andy Craze)
#7296 a36d79b Add sane fallback for fee estimation (Alex Morcos)
#7293 ff9b610 Add regression test for vValue sort order (MarcoFalke)
#7306 4707797 Make sure conflicted wallet tx’s update balances (Alex Morcos)
#7381 621bbd8 [walletdb] Fix syntax error in key parser (MarcoFalke)
#7491 00ec73e wallet: Ignore MarkConflict if block hash is not known (Wladimir J. van der Laan)
#7502 1329963 Update the wallet best block marker before pruning (Pieter Wuille)
GUI
#6217 c57e12a disconnect peers from peers tab via context menu (Diapolo)
#6209 ab0ec67 extend rpc console peers tab (Diapolo)
#6484 1369d69 use CHashWriter also in SignVerifyMessageDialog (Pavel Vasin)
#6487 9848d42 Introduce PlatformStyle (Wladimir J. van der Laan)
#6505 100c9d3 cleanup icons (MarcoFalke)
#4587 0c465f5 allow users to set -onion via GUI (Diapolo)
#6529 c0f66ce show client user agent in debug window (Diapolo)
#6594 878ea69 Disallow duplicate windows. (Casey Rodarmor)
#5665 6f55cdd add verifySize() function to PaymentServer (Diapolo)
#6317 ca5e2a1 minor optimisations in peertablemodel (Diapolo)
#6315 e59d2a8 allow banning and unbanning over UI->peers table (Jonas Schnelli)
#6653 e04b2fa Pop debug window in foreground when opened twice (MarcoFalke)
#6864 c702521 Use monospace font (MarcoFalke)
#6887 3694b74 Update coin control and smartfee labels (MarcoFalke)
#7000 814697c add shortcurts for debug-/console-window (Jonas Schnelli)
#6951 03403d8 Use maxTxFee instead of 10000000 (MarcoFalke)
#7051 a190777 ui: Add “Copy raw transaction data” to transaction list context menu (Wladimir J. van der Laan)
#6979 776848a simple mempool info in debug window (Jonas Schnelli)
#7006 26af1ac add startup option to reset Qt settings (Jonas Schnelli)
#6780 2a94cd6 Call init’s parameter interaction before we create the UI options model (Jonas Schnelli)
#7112 96b8025 reduce cs_main locks during tip update, more fluently update UI (Jonas Schnelli)
#7206 f43c2f9 Add “NODE_BLOOM” to guiutil so that peers don’t get UNKNOWN[4] (Matt Corallo)
#7282 5cadf3e fix coincontrol update issue when deleting a send coins entry (Jonas Schnelli)
#7319 1320300 Intro: Display required space (MarcoFalke)
#7318 9265e89 quickfix for RPC timer interface problem (Jonas Schnelli)
#7327 b16b5bc [Wallet] Transaction View: LastMonth calculation fixed (crowning-)
#7364 7726c48 [qt] Windows: Make rpcconsole monospace font larger (MarcoFalke)
#7384 294f432 [qt] Peertable: Increase SUBVERSION_COLUMN_WIDTH (MarcoFalke)
Tests and QA
#6305 9005c91 build: comparison tool swap (Cory Fields)
#6318 e307e13 build: comparison tool NPE fix (Cory Fields)
#6337 0564c5b Testing infrastructure: mocktime fixes (Gavin Andresen)
#6350 60abba1 add unit tests for the decodescript rpc (mruddy)
#5881 3203a08 Fix and improve txn_doublespend.py test (Tom Harding)
#6390 6a73d66 tests: Fix bitcoin-tx signing test case (Wladimir J. van der Laan)
#6368 7fc25c2 CLTV: Add more tests to improve coverage (Esteban Ordano)
#6414 5121c68 Fix intermittent test failure, reduce test time (Tom Harding)
#6417 44fa82d [QA] fix possible reorg issue in (fund)rawtransaction(s).py RPC test (Jonas Schnelli)
#6398 3d9362d rpc: Remove chain-specific RequireRPCPassword (Wladimir J. van der Laan)
#6428 bb59e78 tests: Remove old sh-based test framework (Wladimir J. van der Laan)
#5515 d946e9a RFC: Assert on probable deadlocks if the second lock isnt try_lock (Matt Corallo)
#6287 d2464df Clang lock debug (Cory Fields)
#6465 410fd74 Don’t share objects between TestInstances (Casey Rodarmor)
#6534 6c1c7fd Fix test locking issues and un-revert the probable-deadlines assertions commit (Cory Fields)
#6509 bb4faee Fix race condition on test node shutdown (Casey Rodarmor)
#6523 561f8af Add p2p-fullblocktest.py (Casey Rodarmor)
#6590 981fd92 Fix stale socket rebinding and re-enable python tests for Windows (Cory Fields)
#6730 cb4d6d0 build: Remove dependency of bitcoin-cli on secp256k1 (Wladimir J. van der Laan)
#6616 5ab5dca Regression Tests: Migrated rpc-tests.sh to all Python rpc-tests.py (Peter Tschipper)
#6720 d479311 Creates unittests for addrman, makes addrman more testable. (Ethan Heilman)
#6853 c834f56 Added fPowNoRetargeting field to Consensus::Params (Eric Lombrozo)
#6827 87e5539 [rpc-tests] Check return code (MarcoFalke)
#6848 f2c869a Add DERSIG transaction test cases (Ross Nicoll)
#6813 5242bb3 Support gathering code coverage data for RPC tests with lcov (dexX7)
#6888 c8322ff Clear strMiscWarning before running PartitionAlert (Eric Lombrozo)
#6894 2675276 [Tests] Fix BIP65 p2p test (Suhas Daftuar)
#6863 725539e [Test Suite] Fix test for null tx input (Daniel Kraft)
#6926 a6d0d62 tests: Initialize networking on windows (Wladimir J. van der Laan)
#6822 9fa54a1 [tests] Be more strict checking dust (MarcoFalke)
#6804 5fcc14e [tests] Add basic coverage reporting for RPC tests (James O’Beirne)
#7045 72dccfc Bugfix: Use unique autostart filenames on Linux for testnet/regtest (Luke-Jr)
#7095 d8368a0 Replace scriptnum_test’s normative ScriptNum implementation (Wladimir J. van der Laan)
#7063 6abf6eb [Tests] Add prioritisetransaction RPC test (Suhas Daftuar)
#7137 16f4a6e Tests: Explicitly set chain limits in replace-by-fee test (Suhas Daftuar)
#7216 9572e49 Removed offline testnet DNSSeed ‘alexykot.me’. (tnull)
#7209 f3ad812 test: don’t override BITCOIND and BITCOINCLI if they’re set (Wladimir J. van der Laan)
#7226 301f16a Tests: Add more tests to p2p-fullblocktest (Suhas Daftuar)
#7153 9ef7c54 [Tests] Add mempool_limit.py test (Jonas Schnelli)
#7170 453c567 tests: Disable Tor interaction (Wladimir J. van der Laan)
#7229 1ed938b [qa] wallet: Check if maintenance changes the balance (MarcoFalke)
#7308 d513405 [Tests] Eliminate intermittent failures in sendheaders.py (Suhas Daftuar)
#7468 947c4ff [rpc-tests] Change solve() to use rehash (Brad Andrews)
Miscellaneous
#6213 e54ff2f [init] add -blockversion help and extend -upnp help (Diapolo)
#5975 1fea667 Consensus: Decouple ContextualCheckBlockHeader from checkpoints (Jorge Timón)
#6061 eba2f06 Separate Consensus::CheckTxInputs and GetSpendHeight in CheckInputs (Jorge Timón)
#5994 786ed11 detach wallet from miner (Jonas Schnelli)
#6387 11576a5 [bitcoin-cli] improve error output (Jonas Schnelli)
#6401 6db53b4 Add BITCOIND_SIGTERM_TIMEOUT to OpenRC init scripts (Florian Schmaus)
#6430 b01981e doc: add documentation for shared library libbitcoinconsensus (Braydon Fuller)
#6372 dcc495e Update Linearize tool to support Windows paths; fix variable scope; update README and example configuration (Paul Georgiou)
#6453 8fe5cce Separate core memory usage computation in core_memusage.h (Pieter Wuille)
#6149 633fe10 Buffer log messages and explicitly open logs (Adam Weiss)
#6488 7cbed7f Avoid leaking file descriptors in RegisterLoad (Casey Rodarmor)
#6497 a2bf40d Make sure LogPrintf strings are line-terminated (Wladimir J. van der Laan)
#6504 b6fee6b Rationalize currency unit to “BTC” (Ross Nicoll)
#6507 9bb4dd8 Removed contrib/bitrpc (Casey Rodarmor)
#6527 41d650f Use unique name for AlertNotify tempfile (Casey Rodarmor)
#6561 e08a7d9 limitedmap fixes and tests (Casey Rodarmor)
#6565 a6f2aff Make sure we re-acquire lock if a task throws (Casey Rodarmor)
#6599 f4d88c4 Make sure LogPrint strings are line-terminated (Ross Nicoll)
#6630 195942d Replace boost::reverse_lock with our own (Casey Rodarmor)
#6103 13b8282 Add ZeroMQ notifications (João Barbosa)
#6692 d5d1d2e devtools: don’t push if signing fails in github-merge (Wladimir J. van der Laan)
#6728 2b0567b timedata: Prevent warning overkill (Wladimir J. van der Laan)
#6713 f6ce59c SanitizeString: Allow hypen char (MarcoFalke)
#5987 4899a04 Bugfix: Fix testnet-in-a-box use case (Luke-Jr)
#6733 b7d78fd Simple benchmarking framework (Gavin Andresen)
#6854 a092970 devtools: Add security-check.py (Wladimir J. van der Laan)
#6790 fa1d252 devtools: add clang-format.py (MarcoFalke)
#7114 f3d0fdd util: Don’t set strMiscWarning on every exception (Wladimir J. van der Laan)
#7078 93e0514 uint256::GetCheapHash bigendian compatibility (arowser)
#7094 34e02e0 Assert now > 0 in GetTime GetTimeMillis GetTimeMicros (Patrick Strateman)
Credits
Thanks to everyone who directly contributed to this release:

accraze
Adam Weiss
Alex Morcos
Alex van der Peet
AlSzacrel
Altoidnerd
Andriy Voskoboinyk
antonio-fr
Arne Brutschy
Ashley Holman
Bob McElrath
Braydon Fuller
BtcDrak
Casey Rodarmor
centaur1
Chris Kleeschulte
Christian Decker
Cory Fields
daniel
Daniel Cousens
Daniel Kraft
David Hill
dexX7
Diego Viola
Elias Rohrer
Eric Lombrozo
Erik Mossberg
Esteban Ordano
EthanHeilman
Florian Schmaus
Forrest Voight
Gavin Andresen
Gregory Maxwell
Gregory Sanders / instagibbs
Ian T
Irving Ruan
Jacob Welsh
James O’Beirne
Jeff Garzik
Johnathan Corgan
Jonas Schnelli
Jonathan Cross
João Barbosa
Jorge Timón
Josh Lehan
J Ross Nicoll
kazcw
Kevin Cooper
lpescher
Luke Dashjr
MarcoFalke
Mark Friedenbach
Matt
Matt Bogosian
Matt Corallo
Matt Quinn
Micha
Michael
Michael Ford / fanquake
Midnight Magic
Mitchell Cash
mrbandrews
mruddy
Nick
Patrick Strateman
Paul Georgiou
Paul Rabahy
Pavel Janík / paveljanik
Pavel Vasin
Pavol Rusnak
Peter Josling
Peter Todd
Philip Kaufmann
Pieter Wuille
ptschip
randy-waterhouse
rion
Ross Nicoll
Ryan Havar
Shaul Kfir
Simon Males
Stephen
Suhas Daftuar
tailsjoin
Thomas Kerin
Tom Harding
tulip
unsystemizer
Veres Lajos
Wladimir J. van der Laan
xor-freenet
Zak Wilcox
zathras-crypto
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.12.1 released
15 April 2016

Upgrading and downgrading
Notable changes
0.12.1 Change log
- {:.}
RPC and other APIs
- {:.}
Block and transaction handling
- {:.}
P2P protocol and network code
- {:.}
Validation
- {:.}
Build system
- {:.}
Wallet
- {:.}
Miscellaneous
Credits
Bitcoin Core version 0.12.1 is now available from:

https://bitcoin.org/bin/bitcoin-core-0.12.1/

This is a new minor version release, including the BIP9, BIP68 and BIP112 softfork, various bugfixes and updated translations.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

Upgrading and downgrading
How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

Downgrade warning
Downgrade to a version < 0.12.0
Because release 0.12.0 and later will obfuscate the chainstate on every fresh sync or reindex, the chainstate is not backwards-compatible with pre-0.12 versions of Bitcoin Core or other software.

If you want to downgrade after you have done a reindex with 0.12.0 or later, you will need to reindex when you first start Bitcoin Core version 0.11 or earlier.

Notable changes
First version bits BIP9 softfork deployment
This release includes a soft fork deployment to enforce BIP68, BIP112 and BIP113 using the BIP9 deployment mechanism.

The deployment sets the block version number to 0x20000001 between midnight 1st May 2016 and midnight 1st May 2017 to signal readiness for deployment. The version number consists of 0x20000000 to indicate version bits together with setting bit 0 to indicate support for this combined deployment, shown as “csv” in the getblockchaininfo RPC call.

For more information about the soft forking change, please see https://github.com/bitcoin/bitcoin/pull/7648

This specific backport pull-request can be viewed at https://github.com/bitcoin/bitcoin/pull/7543

BIP68 soft fork to enforce sequence locks for relative locktime
BIP68 introduces relative lock-time consensus-enforced semantics of the sequence number field to enable a signed transaction input to remain invalid for a defined period of time after confirmation of its corresponding outpoint.

For more information about the implementation, see https://github.com/bitcoin/bitcoin/pull/7184

BIP112 soft fork to enforce OP_CHECKSEQUENCEVERIFY
BIP112 redefines the existing OP_NOP3 as OP_CHECKSEQUENCEVERIFY (CSV) for a new opcode in the Bitcoin scripting system that in combination with BIP68 allows execution pathways of a script to be restricted based on the age of the output being spent.

For more information about the implementation, see https://github.com/bitcoin/bitcoin/pull/7524

BIP113 locktime enforcement soft fork
Bitcoin Core 0.11.2 previously introduced mempool-only locktime enforcement using GetMedianTimePast(). This release seeks to consensus enforce the rule.

Bitcoin transactions currently may specify a locktime indicating when they may be added to a valid block. Current consensus rules require that blocks have a block header time greater than the locktime specified in any transaction in that block.

Miners get to choose what time they use for their header time, with the consensus rule being that no node will accept a block whose time is more than two hours in the future. This creates a incentive for miners to set their header times to future values in order to include locktimed transactions which weren’t supposed to be included for up to two more hours.

The consensus rules also specify that valid blocks may have a header time greater than that of the median of the 11 previous blocks. This GetMedianTimePast() time has a key feature we generally associate with time: it can’t go backwards.

BIP113 specifies a soft fork enforced in this release that weakens this perverse incentive for individual miners to use a future time by requiring that valid blocks have a computed GetMedianTimePast() greater than the locktime specified in any transaction in that block.

Mempool inclusion rules currently require transactions to be valid for immediate inclusion in a block in order to be accepted into the mempool. This release begins applying the BIP113 rule to received transactions, so transaction whose time is greater than the GetMedianTimePast() will no longer be accepted into the mempool.

Implication for miners: you will begin rejecting transactions that would not be valid under BIP113, which will prevent you from producing invalid blocks when BIP113 is enforced on the network. Any transactions which are valid under the current rules but not yet valid under the BIP113 rules will either be mined by other miners or delayed until they are valid under BIP113. Note, however, that time-based locktime transactions are more or less unseen on the network currently.

Implication for users: GetMedianTimePast() always trails behind the current time, so a transaction locktime set to the present time will be rejected by nodes running this release until the median time moves forward. To compensate, subtract one hour (3,600 seconds) from your locktimes to allow those transactions to be included in mempools at approximately the expected time.

For more information about the implementation, see https://github.com/bitcoin/bitcoin/pull/6566

Miscellaneous
The p2p alert system is off by default. To turn on, use -alert with startup configuration.

0.12.1 Change log
Detailed release notes follow. This overview includes changes that affect behavior, not code moves, refactors and string updates. For convenience in locating the code changes and accompanying discussion, both the pull request and git merge commit are mentioned.

RPC and other APIs
#7739 7ffc2bd Add abandoned status to listtransactions (jonasschnelli)
Block and transaction handling
#7543 834aaef Backport BIP9, BIP68 and BIP112 with softfork (btcdrak)
P2P protocol and network code
#7804 90f1d24 Track block download times per individual block (sipa)
#7832 4c3a00d Reduce block timeout to 10 minutes (laanwj)
Validation
#7821 4226aac init: allow shutdown during ‘Activating best chain…’ (laanwj)
#7835 46898e7 Version 2 transactions remain non-standard until CSV activates (sdaftuar)
Build system
#7487 00d57b4 Workaround Travis-side CI issues (luke-jr)
#7606 a10da9a No need to set -L and –location for curl (MarcoFalke)
#7614 ca8f160 Add curl to packages (now needed for depends) (luke-jr)
#7776 a784675 Remove unnecessary executables from gitian release (laanwj)
Wallet
#7715 19866c1 Fix calculation of balances and available coins. (morcos)
Miscellaneous
#7617 f04f4fd Fix markdown syntax and line terminate LogPrint (MarcoFalke)
#7747 4d035bc added depends cross compile info (accraze)
#7741 a0cea89 Mark p2p alert system as deprecated (btcdrak)
#7780 c5f94f6 Disable bad-chain alert (btcdrak)
Credits
Thanks to everyone who directly contributed to this release:

accraze
Alex Morcos
BtcDrak
Jonas Schnelli
Luke Dashjr
MarcoFalke
Mark Friedenbach
NicolasDorier
Pieter Wuille
Suhas Daftuar
Wladimir J. van der Laan
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.13.0 released
23 August 2016

Compatibility
Notable changes
0.13.0 Change log
- {:.}
RPC and other APIs
- {:.}
Block and transaction handling
- {:.}
P2P protocol and network code
- {:.}
Build system
- {:.}
GUI
- {:.}
Wallet
- {:.}
Tests and QA
- {:.}
Mining
- {:.}
Documentation and miscellaneous
Credits
Bitcoin Core version 0.13.0 is now available from:

https://bitcoin.org/bin/bitcoin-core-0.13.0/

This is a new major version release, including new features, various bugfixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

Compatibility
Microsoft ended support for Windows XP on April 8th, 2014, an OS initially released in 2001. This means that not even critical security updates will be released anymore. Without security updates, using a bitcoin wallet on a XP machine is irresponsible at least.

In addition to that, with 0.12.x there have been varied reports of Bitcoin Core randomly crashing on Windows XP. It is not clear what the source of these crashes is, but it is likely that upstream libraries such as Qt are no longer being tested on XP.

We do not have time nor resources to provide support for an OS that is end-of-life. From 0.13.0 on, Windows XP is no longer supported. Users are suggested to upgrade to a newer verion of Windows, or install an alternative OS that is supported.

No attempt is made to prevent installing or running the software on Windows XP, you can still do so at your own risk, but do not expect it to work: do not report issues about Windows XP to the issue tracker.

Notable changes
Database cache memory increased
As a result of growth of the UTXO set, performance with the prior default database cache of 100 MiB has suffered. For this reason the default was changed to 300 MiB in this release.

For nodes on low-memory systems, the database cache can be changed back to 100 MiB (or to another value) by either:

Adding dbcache=100 in bitcoin.conf
Changing it in the GUI under Options → Size of database cache
Note that the database cache setting has the most performance impact during initial sync of a node, and when catching up after downtime.

bitcoin-cli: arguments privacy
The RPC command line client gained a new argument, -stdin to read extra arguments from standard input, one per line until EOF/Ctrl-D. For example:

$ src/bitcoin-cli -stdin walletpassphrase
mysecretcode
120
..... press Ctrl-D here to end input
$
It is recommended to use this for sensitive information such as wallet passphrases, as command-line arguments can usually be read from the process table by any user on the system.

C++11 and Python 3
Various code modernizations have been done. The Bitcoin Core code base has started using C++11. This means that a C++11-capable compiler is now needed for building. Effectively this means GCC 4.7 or higher, or Clang 3.3 or higher.

When cross-compiling for a target that doesn’t have C++11 libraries, configure with ./configure --enable-glibc-back-compat ... LDFLAGS=-static-libstdc++.

For running the functional tests in qa/rpc-tests, Python3.4 or higher is now required.

Linux ARM builds
Due to popular request, Linux ARM builds have been added to the uploaded executables.

The following extra files can be found in the download directory or torrent:

bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz: Linux binaries for the most common 32-bit ARM architecture.
bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz: Linux binaries for the most common 64-bit ARM architecture.
ARM builds are still experimental. If you have problems on a certain device or Linux distribution combination please report them on the bug tracker, it may be possible to resolve them.

Note that Android is not considered ARM Linux in this context. The executables are not expected to work out of the box on Android.

Compact Block support (BIP 152)
Support for block relay using the Compact Blocks protocol has been implemented in PR 8068.

The primary goal is reducing the bandwidth spikes at relay time, though in many cases it also reduces propagation delay. It is automatically enabled between compatible peers. BIP 152

As a side-effect, ordinary non-mining nodes will download and upload blocks faster if those blocks were produced by miners using similar transaction filtering policies. This means that a miner who produces a block with many transactions discouraged by your node will be relayed slower than one with only transactions already in your memory pool. The overall effect of such relay differences on the network may result in blocks which include widely- discouraged transactions losing a stale block race, and therefore miners may wish to configure their node to take common relay policies into consideration.

Hierarchical Deterministic Key Generation
Newly created wallets will use hierarchical deterministic key generation according to BIP32 (keypath m/0’/0’/k’). Existing wallets will still use traditional key generation.

Backups of HD wallets, regardless of when they have been created, can therefore be used to re-generate all possible private keys, even the ones which haven’t already been generated during the time of the backup. Attention: Encrypting the wallet will create a new seed which requires a new backup!

Wallet dumps (created using the dumpwallet RPC) will contain the deterministic seed. This is expected to allow future versions to import the seed and all associated funds, but this is not yet implemented.

HD key generation for new wallets can be disabled by -usehd=0. Keep in mind that this flag only has affect on newly created wallets. You can’t disable HD key generation once you have created a HD wallet.

There is no distinction between internal (change) and external keys.

HD wallets are incompatible with older versions of Bitcoin Core.

Pull request, BIP 32

Segregated Witness
The code preparations for Segregated Witness (“segwit”), as described in BIP 141, BIP 143, BIP 144, and BIP 145 are finished and included in this release. However, BIP 141 does not yet specify activation parameters on mainnet, and so this release does not support segwit use on mainnet. Testnet use is supported, and after BIP 141 is updated with proposed parameters, a future release of Bitcoin Core is expected that implements those parameters for mainnet.

Furthermore, because segwit activation is not yet specified for mainnet, version 0.13.0 will behave similarly as other pre-segwit releases even after a future activation of BIP 141 on the network. Upgrading from 0.13.0 will be required in order to utilize segwit-related features on mainnet (such as signal BIP 141 activation, mine segwit blocks, fully validate segwit blocks, relay segwit blocks to other segwit nodes, and use segwit transactions in the wallet, etc).

Mining transaction selection (“Child Pays For Parent”)
The mining transaction selection algorithm has been replaced with an algorithm that selects transactions based on their feerate inclusive of unconfirmed ancestor transactions. This means that a low-fee transaction can become more likely to be selected if a high-fee transaction that spends its outputs is relayed.

With this change, the -blockminsize command line option has been removed.

The command line option -blockmaxsize remains an option to specify the maximum number of serialized bytes in a generated block. In addition, the new command line option -blockmaxweight has been added, which specifies the maximum “block weight” of a generated block, as defined by [BIP 141 (Segregated Witness)] (https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki).

In preparation for Segregated Witness, the mining algorithm has been modified to optimize transaction selection for a given block weight, rather than a given number of serialized bytes in a block. In this release, transaction selection is unaffected by this distinction (as BIP 141 activation is not supported on mainnet in this release, see above), but in future releases and after BIP 141 activation, these calculations would be expected to differ.

For optimal runtime performance, miners using this release should specify -blockmaxweight on the command line, and not specify -blockmaxsize. Additionally (or only) specifying -blockmaxsize, or relying on default settings for both, may result in performance degradation, as the logic to support -blockmaxsize performs additional computation to ensure that constraint is met. (Note that for mainnet, in this release, the equivalent parameter for -blockmaxweight would be four times the desired -blockmaxsize. See [BIP 141] (https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki) for additional details.)

In the future, the -blockmaxsize option may be removed, as block creation is no longer optimized for this metric. Feedback is requested on whether to deprecate or keep this command line option in future releases.

Reindexing changes
In earlier versions, reindexing did validation while reading through the block files on disk. These two have now been split up, so that all blocks are known before validation starts. This was necessary to make certain optimizations that are available during normal synchronizations also available during reindexing.

The two phases are distinct in the Bitcoin-Qt GUI. During the first one, “Reindexing blocks on disk” is shown. During the second (slower) one, “Processing blocks on disk” is shown.

It is possible to only redo validation now, without rebuilding the block index, using the command line option -reindex-chainstate (in addition to -reindex which does both). This new option is useful when the blocks on disk are assumed to be fine, but the chainstate is still corrupted. It is also useful for benchmarks.

Removal of internal miner
As CPU mining has been useless for a long time, the internal miner has been removed in this release, and replaced with a simpler implementation for the test framework.

The overall result of this is that setgenerate RPC call has been removed, as well as the -gen and -genproclimit command-line options.

For testing, the generate call can still be used to mine a block, and a new RPC call generatetoaddress has been added to mine to a specific address. This works with wallet disabled.

New bytespersigop implementation
The former implementation of the bytespersigop filter accidentally broke bare multisig (which is meant to be controlled by the permitbaremultisig option), since the consensus protocol always counts these older transaction forms as 20 sigops for backwards compatibility. Simply fixing this bug by counting more accurately would have reintroduced a vulnerability. It has therefore been replaced with a new implementation that rather than filter such transactions, instead treats them (for fee purposes only) as if they were in fact the size of a transaction actually using all 20 sigops.

Low-level P2P changes
The optional new p2p message “feefilter” is implemented and the protocol version is bumped to 70013. Upon receiving a feefilter message from a peer, a node will not send invs for any transactions which do not meet the filter feerate. BIP 133

The P2P alert system has been removed in PR #7692 and the alert P2P message is no longer supported.

The transaction relay mechanism used to relay one quarter of all transactions instantly, while queueing up the rest and sending them out in batch. As this resulted in chains of dependent transactions being reordered, it systematically hurt transaction relay. The relay code was redesigned in PRs <a href=”https://github.com/bitcoin/bitcoin/pull/7840”>#7840</a> and #8082, and now always batches transactions announcements while also sorting them according to dependency order. This significantly reduces orphan transactions. To compensate for the removal of instant relay, the frequency of batch sending was doubled for outgoing peers.

Since PR #7840 the BIP35 mempool command is also subject to batch processing. Also the mempool message is no longer handled for non-whitelisted peers when NODE_BLOOM is disabled through -peerbloomfilters=0.

The maximum size of orphan transactions that are kept in memory until their ancestors arrive has been raised in PR #8179 from 5000 to 99999 bytes. They are now also removed from memory when they are included in a block, conflict with a block, and time out after 20 minutes.

We respond at most once to a getaddr request during the lifetime of a connection since PR #7856.

Connections to peers who have recently been the first one to give us a valid new block or transaction are protected from disconnections since PR #8084.

Low-level RPC changes
RPC calls have been added to output detailed statistics for individual mempool entries, as well as to calculate the in-mempool ancestors or descendants of a transaction: see getmempoolentry, getmempoolancestors, getmempooldescendants.

gettxoutsetinfo UTXO hash (hash_serialized) has changed. There was a divergence between 32-bit and 64-bit platforms, and the txids were missing in the hashed data. This has been fixed, but this means that the output will be different than from previous versions.

Full UTF-8 support in the RPC API. Non-ASCII characters in, for example, wallet labels have always been malformed because they weren’t taken into account properly in JSON RPC processing. This is no longer the case. This also affects the GUI debug console.

Asm script outputs replacements for OP_NOP2 and OP_NOP3

OP_NOP2 has been renamed to OP_CHECKLOCKTIMEVERIFY by BIP 65

OP_NOP3 has been renamed to OP_CHECKSEQUENCEVERIFY by BIP 112

The following outputs are affected by this change:

RPC getrawtransaction (in verbose mode)
RPC decoderawtransaction
RPC decodescript
REST /rest/tx/ (JSON format)
REST /rest/block/ (JSON format when including extended tx details)
bitcoin-tx -json
The sorting of the output of the getrawmempool output has changed.

New RPC commands: generatetoaddress, importprunedfunds, removeprunedfunds, signmessagewithprivkey, getmempoolancestors, getmempooldescendants, getmempoolentry, createwitnessaddress, addwitnessaddress.

Removed RPC commands: setgenerate, getgenerate.

New options were added to fundrawtransaction: includeWatching, changeAddress, changePosition and feeRate.

Low-level ZMQ changes
Each ZMQ notification now contains an up-counting sequence number that allows listeners to detect lost notifications. The sequence number is always the last element in a multi-part ZMQ notification and therefore backward compatible. Each message type has its own counter. PR #7762.
0.13.0 Change log
Detailed release notes follow. This overview includes changes that affect behavior, not code moves, refactors and string updates. For convenience in locating the code changes and accompanying discussion, both the pull request and git merge commit are mentioned.

RPC and other APIs
#7156 9ee02cf Remove cs_main lock from createrawtransaction (laanwj)
#7326 2cd004b Fix typo, wrong information in gettxout help text (paveljanik)
#7222 82429d0 Indicate which transactions are signaling opt-in RBF (sdaftuar)
#7480 b49a623 Changed getnetworkhps value to double to avoid overflow (instagibbs)
#7550 8b958ab Input-from-stdin mode for bitcoin-cli (laanwj)
#7670 c9a1265 Use cached block hash in blockToJSON() (rat4)
#7726 9af69fa Correct importaddress help reference to importpubkey (CypherGrue)
#7766 16555b6 Register calls where they are defined (laanwj)
#7797 e662a76 Fix generatetoaddress failing to parse address (mruddy)
#7774 916b15a Add versionHex in getblock and getblockheader JSON results (mruddy)
#7863 72c54e3 Getblockchaininfo: make bip9_softforks an object, not an array (rustyrussell)
#7842 d97101e Do not print minping time in getpeerinfo when no ping received yet (paveljanik)
#7518 be14ca5 Add multiple options to fundrawtransaction (promag)
#7756 9e47fce Add cursor to iterate over utxo set, use this in gettxoutsetinfo (laanwj)
#7848 88616d2 Divergence between 32- and 64-bit when hashing >4GB affects gettxoutsetinfo (laanwj)
#7827 4205ad7 Speed up getchaintips (mrbandrews)
#7762 a1eb344 Append a message sequence number to every ZMQ notification (jonasschnelli)
#7688 46880ed List solvability in listunspent output and improve help (sipa)
#7926 5725807 Push back getaddednodeinfo dead value (instagibbs)
#7953 0630353 Create signmessagewithprivkey rpc (achow101)
#8049 c028c7b Expose information on whether transaction relay is enabled in getnetworkinfo (laanwj)
#7967 8c1e49b Add feerate option to fundrawtransaction (jonasschnelli)
#8118 9b6a48c Reduce unnecessary hashing in signrawtransaction (jonasnick)
#7957 79004d4 Add support for transaction sequence number (jonasschnelli)
#8153 75ec320 fundrawtransaction feeRate: Use BTC/kB (MarcoFalke)
#7292 7ce9ac5 Expose ancestor/descendant information over RPC (sdaftuar)
#8171 62fcf27 Fix createrawtx sequence number unsigned int parsing (jonasschnelli)
#7892 9c3d0fa Add full UTF-8 support to RPC (laanwj)
#8317 304eff3 Don’t use floating point in rpcwallet (MarcoFalke)
#8258 5a06ebb Hide softfork in getblockchaininfo if timeout is 0 (jl2012)
#8244 1922e5a Remove unnecessary LOCK(cs_main) in getrawmempool (dcousens)
Block and transaction handling
#7056 6a07208 Save last db read (morcos)
#6842 0192806 Limitfreerelay edge case bugfix (ptschip)
#7084 11d74f6 Replace maxFeeRate of 10000*minRelayTxFee with maxTxFee in mempool (MarcoFalke)
#7539 9f33dba Add tags to mempool’s mapTx indices (sdaftuar)
#7592 26a2a72 Re-remove ERROR logging for mempool rejects (laanwj)
#7187 14d6324 Keep reorgs fast for SequenceLocks checks (morcos)
#7594 01f4267 Mempool: Add tracking of ancestor packages (sdaftuar)
#7904 fc9e334 Txdb: Fix assert crash in new UTXO set cursor (laanwj)
#7927 f9c2ac7 Minor changes to dbwrapper to simplify support for other databases (laanwj)
#7933 e26b620 Fix OOM when deserializing UTXO entries with invalid length (sipa)
#8020 5e374f7 Use SipHash-2-4 for various non-cryptographic hashes (sipa)
#8076 d720980 VerifyDB: don’t check blocks that have been pruned (sdaftuar)
#8080 862fd24 Do not use mempool for GETDATA for tx accepted after the last mempool req (gmaxwell)
#7997 a82f033 Replace mapNextTx with slimmer setSpends (kazcw)
#8220 1f86d64 Stop trimming when mapTx is empty (sipa)
#8273 396f9d6 Bump -dbcache default to 300MiB (laanwj)
#7225 eb33179 Eliminate unnecessary call to CheckBlock (sdaftuar)
#7907 006cdf6 Optimize and Cleanup CScript::FindAndDelete (pstratem)
#7917 239d419 Optimize reindex (sipa)
#7763 3081fb9 Put hex-encoded version in UpdateTip (sipa)
#8149 d612837 Testnet-only segregated witness (sipa)
#8305 3730393 Improve handling of unconnecting headers (sdaftuar)
#8363 fca1a41 Rename “block cost” to “block weight” (sdaftuar)
#8381 f84ee3d Make witness v0 outputs non-standard (jl2012)
#8364 3f65ba2 Treat high-sigop transactions as larger rather than rejecting them (sipa)
P2P protocol and network code
#6589 dc0305d Log bytes recv/sent per command (jonasschnelli)
#7164 3b43cad Do not download transactions during initial blockchain sync (ptschip)
#7458 898fedf peers.dat, banlist.dat recreated when missing (kirkalx)
#7637 3da5d1b Fix memleak in TorController (laanwj, jonasschnelli)
#7553 9f14e5a Remove vfReachable and modify IsReachable to only use vfLimited (pstratem)
#7708 9426632 De-neuter NODE_BLOOM (pstratem)
#7692 29b2be6 Remove P2P alert system (btcdrak)
#7542 c946a15 Implement “feefilter” P2P message (morcos)
#7573 352fd57 Add -maxtimeadjustment command line option (mruddy)
#7570 232592a Add IPv6 Link-Local Address Support (mruddy)
#7874 e6a4d48 Improve AlreadyHave (morcos)
#7856 64e71b3 Only send one GetAddr response per connection (gmaxwell)
#7868 7daa3ad Split DNS resolving functionality out of net structures (theuni)
#7919 7617682 Fix headers announcements edge case (sdaftuar)
#7514 d9594bf Fix IsInitialBlockDownload for testnet (jmacwhyte)
#7959 03cf6e8 fix race that could fail to persist a ban (kazcw)
#7840 3b9a0bf Several performance and privacy improvements to inv/mempool handling (sipa)
#8011 65aecda Don’t run ThreadMessageHandler at lowered priority (kazcw)
#7696 5c3f8dd Fix de-serialization bug where AddrMan is left corrupted (EthanHeilman)
#7932 ed749bd CAddrMan::Deserialize handle corrupt serializations better (pstratem)
#7906 83121cc Prerequisites for p2p encapsulation changes (theuni)
#8033 18436d8 Fix Socks5() connect failures to be less noisy and less unnecessarily scary (wtogami)
#8082 01d8359 Defer inserting into maprelay until just before relaying (gmaxwell)
#7960 6a22373 Only use AddInventoryKnown for transactions (sdaftuar)
#8078 2156fa2 Disable the mempool P2P command when bloom filters disabled (petertodd)
#8065 67c91f8 Addrman offline attempts (gmaxwell)
#7703 761cddb Tor: Change auth order to only use password auth if -torpassword (laanwj)
#8083 cd0c513 Add support for dnsseeds with option to filter by servicebits (jonasschnelli)
#8173 4286f43 Use SipHash for node eviction (sipa)
#8154 1445835 Drop vAddrToSend after sending big addr message (kazcw)
#7749 be9711e Enforce expected outbound services (sipa)
#8208 0a64777 Do not set extra flags for unfiltered DNS seed results (sipa)
#8084 e4bb4a8 Add recently accepted blocks and txn to AttemptToEvictConnection (gmaxwell)
#8113 3f89a53 Rework addnode behaviour (sipa)
#8179 94ab58b Evict orphans which are included or precluded by accepted blocks (gmaxwell)
#8068 e9d76a1 Compact Blocks (TheBlueMatt)
#8204 0833894 Update petertodd’s testnet seed (petertodd)
#8247 5cd35d3 Mark my dnsseed as supporting filtering (sipa)
#8275 042c323 Remove bad chain alert partition check (btcdrak)
#8271 1bc9c80 Do not send witnesses in cmpctblock (sipa)
#8312 ca40ef6 Fix mempool DoS vulnerability from malleated transactions (sdaftuar)
#7180 16ccb74 Account for sendheaders verack messages (laanwj)
#8102 425278d Bugfix: use global ::fRelayTxes instead of CNode in version send (sipa)
#8408 b7e2011 Prevent fingerprinting, disk-DoS with compact blocks (sdaftuar)
Build system
#7302 41f1a3e C++11 build/runtime fixes (theuni)
#7322 fd9356b c++11: add scoped enum fallbacks to CPPFLAGS rather than defining them locally (theuni)
#7441 a6771fc Use Debian 8.3 in gitian build guide (fanquake)
#7349 152a821 Build against system UniValue when available (luke-jr)
#7520 621940e LibreSSL doesn’t define OPENSSL_VERSION, use LIBRESSL_VERSION_TEXT instead (paveljanik)
#7528 9b9bfce autogen.sh: warn about needing autoconf if autoreconf is not found (knocte)
#7504 19324cf Crystal clean make clean (paveljanik)
#7619 18b3f1b Add missing sudo entry in gitian VM setup (btcdrak)
#7616 639ec58 [depends] Delete unused patches (MarcoFalke)
#7658 c15eb28 Add curl to Gitian setup instructions (btcdrak)
#7710 909b72b [Depends] Bump miniupnpc and config.guess+sub (fanquake)
#7723 5131005 build: python 3 compatibility (laanwj)
#7477 28ad4d9 Fix quoting of copyright holders in configure.ac (domob1812)
#7711 a67bc5e [build-aux] Update Boost & check macros to latest serials (fanquake)
#7788 4dc1b3a Use relative paths instead of absolute paths in protoc calls (paveljanik)
#7809 bbd210d depends: some base fixes/changes (theuni)
#7603 73fc922 Build System: Use PACKAGE_TARNAME in NSIS script (JeremyRand)
#7905 187186b test: move accounting_tests and rpc_wallet_tests to wallet/test (laanwj)
#7911 351abf9 leveldb: integrate leveldb into our buildsystem (theuni)
#7944 a407807 Re-instate TARGET_OS=linux in configure.ac. Removed by 351abf9e035 (randy-waterhouse)
#7920 c3e3cfb Switch Travis to Trusty (theuni)
#7954 08b37c5 build: quiet annoying warnings without adding new ones (theuni)
#7165 06162f1 build: Enable C++11 in build, require C++11 compiler (laanwj)
#7982 559fbae build: No need to check for leveldb atomics (theuni)
#8002 f9b4582 [depends] Add -stdlib=libc++ to darwin CXX flags (fanquake)
#7993 6a034ed [depends] Bump Freetype, ccache, ZeroMQ, miniupnpc, expat (fanquake)
#8167 19ea173 Ship debug tarballs/zips with debug symbols (theuni)
#8175 f0299d8 Add –disable-bench to config flags for windows (laanwj)
#7283 fd9881a [gitian] Default reference_datetime to commit author date (MarcoFalke)
#8181 9201ce8 Get rid of CLIENT_DATE (laanwj)
#8133 fde0ac4 Finish up out-of-tree changes (theuni)
#8188 65a9d7d Add armhf/aarch64 gitian builds (theuni)
#8194 cca1c8c [gitian] set correct PATH for wrappers (MarcoFalke)
#8198 5201614 Sync ax_pthread with upstream draft4 (fanquake)
#8210 12a541e [Qt] Bump to Qt5.6.1 (jonasschnelli)
#8285 da50997 windows: Add testnet link to installer (laanwj)
#8304 0cca2fe [travis] Update SDK_URL (MarcoFalke)
#8310 6ae20df Require boost for bench (theuni)
#8315 2e51590 Don’t require sudo for Linux (theuni)
#8314 67caef6 Fix pkg-config issues for 0.13 (theuni)
#8373 1fe7f40 Fix OSX non-deterministic dmg (theuni)
#8358 cfd1280 Gbuild: Set memory explicitly (default is too low) (MarcoFalke)
GUI
#7154 00b4b8d Add InMempool() info to transaction details (jonasschnelli)
#7068 5f3c670 [RPC-Tests] add simple way to run rpc test over QT clients (jonasschnelli)
#7218 a1c185b Fix misleading translation (MarcoFalke)
#7214 be9a9a3 qt5: Use the fixed font the system recommends (MarcoFalke)
#7256 08ab906 Add note to coin control dialog QT5 workaround (fanquake)
#7255 e289807 Replace some instances of formatWithUnit with formatHtmlWithUnit (fanquake)
#7317 3b57e9c Fix RPCTimerInterface ordering issue (jonasschnelli)
#7327 c079d79 Transaction View: LastMonth calculation fixed (crowning-)
#7334 e1060c5 coincontrol workaround is still needed in qt5.4 (fixed in qt5.5) (MarcoFalke)
#7383 ae2db67 Rename “amount” to “requested amount” in receive coins table (jonasschnelli)
#7396 cdcbc59 Add option to increase/decrease font size in the console window (jonasschnelli)
#7437 9645218 Disable tab navigation for peers tables (Kefkius)
#7604 354b03d build: Remove spurious dollar sign. Fixes #7189 (dooglus)
#7605 7f001bd Remove openssl info from init/log and from Qt debug window (jonasschnelli)
#7628 87d6562 Add ‘copy full transaction details’ option (ericshawlinux)
#7613 3798e5d Add autocomplete to bitcoin-qt’s console window (GamerSg)
#7668 b24266c Fix history deletion bug after font size change (achow101)
#7680 41d2dfa Remove reflection from about icon (laanwj)
#7686 f034bce Remove 0-fee from send dialog (MarcoFalke)
#7506 b88e0b0 Use CCoinControl selection in CWallet::FundTransaction (promag)
#7732 0b98dd7 Debug window: replace “Build date” with “Datadir” (jonasschnelli)
#7761 60db51d remove trailing output-index from transaction-id (jonasschnelli)
#7772 6383268 Clear the input line after activating autocomplete (paveljanik)
#7925 f604bf6 Fix out-of-tree GUI builds (laanwj)
#7939 574ddc6 Make it possible to show details for multiple transactions (laanwj)
#8012 b33824b Delay user confirmation of send (Tyler-Hardin)
#8006 7c8558d Add option to disable the system tray icon (Tyler-Hardin)
#8046 169d379 Fix Cmd-Q / Menu Quit shutdown on OSX (jonasschnelli)
#8042 6929711 Don’t allow to open the debug window during splashscreen & verification state (jonasschnelli)
#8014 77b49ac Sort transactions by date (Tyler-Hardin)
#8073 eb2f6f7 askpassphrasedialog: Clear pass fields on accept (rat4)
#8129 ee1533e Fix RPC console auto completer (UdjinM6)
#7636 fb0ac48 Add bitcoin address label to request payment QR code (makevoid)
#8231 760a6c7 Fix a bug where the SplashScreen will not be hidden during startup (jonasschnelli)
#8256 af2421c BUG: bitcoin-qt crash (fsb4000)
#8257 ff03c50 Do not ask a UI question from bitcoind (sipa)
#8288 91abb77 Network-specific example address (laanwj)
#7707 a914968 UI support for abandoned transactions (jonasschnelli)
#8207 f7a403b Add a link to the Bitcoin-Core repository and website to the About Dialog (MarcoFalke)
#8281 6a87eb0 Remove client name from debug window (laanwj)
#8407 45eba4b Add dbcache migration path (jonasschnelli)
Wallet
#7262 fc08994 Reduce inefficiency of GetAccountAddress() (dooglus)
#7537 78e81b0 Warn on unexpected EOF while salvaging wallet (laanwj)
#7521 3368895 Don’t resend wallet txs that aren’t in our own mempool (morcos)
#7576 86a1ec5 Move wallet help string creation to CWallet (jonasschnelli)
#7577 5b3b5a7 Move “load wallet phase” to CWallet (jonasschnelli)
#7608 0735c0c Move hardcoded file name out of log messages (MarcoFalke)
#7649 4900641 Prevent multiple calls to CWallet::AvailableCoins (promag)
#7646 e5c3511 Fix lockunspent help message (promag)
#7558 b35a591 Add import/removeprunedfunds rpc call (instagibbs)
#6215 48c5adf add bip32 pub key serialization (jonasschnelli)
#7913 bafd075 Fix for incorrect locking in GetPubKey() (keystore.cpp) (yurizhykin)
#8036 41138f9 init: Move berkeleydb version reporting to wallet (laanwj)
#8028 373b50d Fix insanity of CWalletDB::WriteTx and CWalletTx::WriteToDisk (pstratem)
#8061 f6b7df3 Improve Wallet encapsulation (pstratem)
#7891 950be19 Always require OS randomness when generating secret keys (sipa)
#7689 b89ef13 Replace OpenSSL AES with ctaes-based version (sipa)
#7825 f972b04 Prevent multiple calls to ExtractDestination (pedrobranco)
#8137 243ac0c Improve CWallet API with new AccountMove function (pstratem)
#8142 52c3f34 Improve CWallet API with new GetAccountPubkey function (pstratem)
#8035 b67a472 Add simplest BIP32/deterministic key generation implementation (jonasschnelli)
#7687 a6ddb19 Stop treating importaddress’ed scripts as change (sipa)
#8298 aef3811 wallet: Revert input selection post-pruning (laanwj)
#8324 bc94b87 Keep HD seed during salvagewallet (jonasschnelli)
#8323 238300b Add HD keypath to CKeyMetadata, report metadata in validateaddress (jonasschnelli)
#8367 3b38a6a Ensure <0.13 clients can’t open HD wallets (jonasschnelli)
#8378 ebea651 Move SetMinVersion for FEATURE_HD to SetHDMasterKey (pstratem)
#8390 73adfe3 Correct hdmasterkeyid/masterkeyid name confusion (jonasschnelli)
#8206 18b8ee1 Add HD xpriv to dumpwallet (jonasschnelli)
#8389 c3c82c4 Create a new HD seed after encrypting the wallet (jonasschnelli)
Tests and QA
#7320 d3dfc6d Test walletpassphrase timeout (MarcoFalke)
#7208 47c5ed1 Make max tip age an option instead of chainparam (laanwj)
#7372 21376af Trivial: [qa] wallet: Print maintenance (MarcoFalke)
#7280 668906f [travis] Fail when documentation is outdated (MarcoFalke)
#7177 93b0576 [qa] Change default block priority size to 0 (MarcoFalke)
#7236 02676c5 Use createrawtx locktime parm in txn_clone (dgenr8)
#7212 326ffed Adds unittests for CAddrMan and CAddrinfo, removes source of non-determinism (EthanHeilman)
#7490 d007511 tests: Remove May15 test (laanwj)
#7531 18cb2d5 Add bip68-sequence.py to extended rpc tests (btcdrak)
#7536 ce5fc02 test: test leading spaces for ParseHex (laanwj)
#7620 1b68de3 [travis] Only run check-doc.py once (MarcoFalke)
#7455 7f96671 [travis] Exit early when check-doc.py fails (MarcoFalke)
#7667 56d2c4e Move GetTempPath() to testutil (musalbas)
#7517 f1ca891 test: script_error checking in script_invalid tests (laanwj)
#7684 3d0dfdb Extend tests (MarcoFalke)
#7697 622fe6c Tests: make prioritise_transaction.py more robust (sdaftuar)
#7709 efde86b Tests: fix missing import in mempool_packages (sdaftuar)
#7702 29e1131 Add tests verifychain, lockunspent, getbalance, listsinceblock (MarcoFalke)
#7720 3b4324b rpc-test: Normalize assert() (MarcoFalke)
#7757 26794d4 wallet: Wait for reindex to catch up (MarcoFalke)
#7764 a65b36c Don’t run pruning.py twice (MarcoFalke)
#7773 7c80e72 Fix comments in tests (btcdrak)
#7489 e9723cb tests: Make proxy_test work on travis servers without IPv6 (laanwj)
#7801 70ac71b Remove misleading “errorString syntax” (MarcoFalke)
#7803 401c65c maxblocksinflight: Actually enable test (MarcoFalke)
#7802 3bc71e1 httpbasics: Actually test second connection (MarcoFalke)
#7849 ab8586e tests: add varints_bitpatterns test (laanwj)
#7846 491171f Clean up lockorder data of destroyed mutexes (sipa)
#7853 6ef5e00 py2: Unfiddle strings into bytes explicitly (MarcoFalke)
#7878 53adc83 [test] bctest.py: Revert faa41ee (MarcoFalke)
#7798 cabba24 [travis] Print the commit which was evaluated (MarcoFalke)
#7833 b1bf511 tests: Check Content-Type header returned from RPC server (laanwj)
#7851 fa9d86f pull-tester: Don’t mute zmq ImportError (MarcoFalke)
#7822 0e6fd5e Add listunspent() test for spendable/unspendable UTXO (jpdffonseca)
#7912 59ad568 Tests: Fix deserialization of reject messages (sdaftuar)
#7941 0ea3941 Fixing comment in script_test.json test case (Christewart)
#7807 0ad1041 Fixed miner test values, gave constants for less error-prone values (instagibbs)
#7980 88b77c7 Smartfees: Properly use ordered dict (MarcoFalke)
#7814 77b637f Switch to py3 (MarcoFalke)
#8030 409a8a1 Revert fatal-ness of missing python-zmq (laanwj)
#8018 3e90fe6 Autofind rpc tests –srcdir (jonasschnelli)
#8016 5767e80 Fix multithread CScheduler and reenable test (paveljanik)
#7972 423ca30 pull-tester: Run rpc test in parallel (MarcoFalke)
#8039 69b3a6d Bench: Add crypto hash benchmarks (laanwj)
#8041 5b736dd Fix bip9-softforks blockstore issue (MarcoFalke)
#7994 1f01443 Add op csv tests to script_tests.json (Christewart)
#8038 e2bf830 Various minor fixes (MarcoFalke)
#8072 1b87e5b Travis: ‘make check’ in parallel and verbose (theuni)
#8056 8844ef1 Remove hardcoded “4 nodes” from test_framework (MarcoFalke)
#8047 37f9a1f Test_framework: Set wait-timeout for bitcoind procs (MarcoFalke)
#8095 6700cc9 Test framework: only cleanup on successful test runs (sdaftuar)
#8098 06bd4f6 Test_framework: Append portseed to tmpdir (MarcoFalke)
#8104 6ff2c8d Add timeout to sync_blocks() and sync_mempools() (sdaftuar)
#8111 61b8684 Benchmark SipHash (sipa)
#8107 52b803e Bench: Added base58 encoding/decoding benchmarks (yurizhykin)
#8115 0026e0e Avoid integer division in the benchmark inner-most loop (gmaxwell)
#8090 a2df115 Adding P2SH(p2pkh) script test case (Christewart)
#7992 ec45cc5 Extend #7956 with one more test (TheBlueMatt)
#8139 ae5575b Fix interrupted HTTP RPC connection workaround for Python 3.5+ (sipa)
#8164 0f24eaf [Bitcoin-Tx] fix missing test fixtures, fix 32bit atoi issue (jonasschnelli)
#8166 0b5279f Src/test: Do not shadow local variables (paveljanik)
#8141 44c1b1c Continuing port of java comparison tool (mrbandrews)
#8201 36b7400 fundrawtransaction: Fix race, assert amounts (MarcoFalke)
#8214 ed2cd59 Mininode: fail on send_message instead of silent return (MarcoFalke)
#8215 a072d1a Don’t use floating point in wallet tests (MarcoFalke)
#8066 65c2058 Test_framework: Use different rpc_auth_pair for each node (MarcoFalke)
#8216 0d41d70 Assert ‘changePosition out of bounds’ (MarcoFalke)
#8222 961893f Enable mempool consistency checks in unit tests (sipa)
#7751 84370d5 test_framework: python3.4 authproxy compat (laanwj)
#7744 d8e862a test_framework: detect failure of bitcoind startup (laanwj)
#8280 115735d Increase sync_blocks() timeouts in pruning.py (MarcoFalke)
#8340 af9b7a9 Solve trivial merge conflict in p2p-segwit.py (MarcoFalke)
#8067 3e4cf8f Travis: use slim generic image, and some fixups (theuni)
#7951 5c7df70 Test_framework: Properly print exception (MarcoFalke)
#8070 7771aa5 Remove non-determinism which is breaking net_tests #8069 (EthanHeilman)
#8309 bb2646a Add wallet-hd test (MarcoFalke)
#8444 cd0910b Fix p2p-feefilter.py for changed tx relay behavior (sdaftuar)
Mining
#7507 11c7699 Remove internal miner (Leviathn)
#7663 c87f51e Make the generate RPC call function for non-regtest (sipa)
#7671 e2ebd25 Add generatetoaddress RPC to mine to an address (achow101)
#7935 66ed450 Versionbits: GBT support (luke-jr)
#7600 66db2d6 Select transactions using feerate-with-ancestors (sdaftuar)
#8295 f5660d3 Mining-related fixups for 0.13.0 (sdaftuar)
#7796 536b75e Add support for negative fee rates, fixes prioritizetransaction (MarcoFalke)
#8362 86edc20 Scale legacy sigop count in CreateNewBlock (sdaftuar)
#8489 8b0eee6 Bugfix: Use pre-BIP141 sigops until segwit activates (GBT) (luke-jr)
Documentation and miscellaneous
#7423 69e2a40 Add example for building with constrained resources (jarret)
#8254 c2c69ed Add OSX ZMQ requirement to QA readme (fanquake)
#8203 377d131 Clarify documentation for running a tor node (nathaniel-mahieu)
#7428 4b12266 Add example for listing ./configure flags (nathaniel-mahieu)
#7847 3eae681 Add arch linux build example (mruddy)
#7968 ff69aaf Fedora build requirements (wtogami)
#8013 fbedc09 Fedora build requirements, add gcc-c++ and fix typo (wtogami)
#8009 fbd8478 Fixed invalid example paths in gitian-building.md (JeremyRand)
#8240 63fbdbc Mention Windows XP end of support in release notes (laanwj)
#8303 5077d2c Update bips.md for CSV softfork (fanquake)
#7789 e0b3e19 Add note about using the Qt official binary installer (paveljanik)
#7791 e30a5b0 Change Precise to Trusty in gitian-building.md (JeremyRand)
#7838 8bb5d3d Update gitian build guide to debian 8.4.0 (fanquake)
#7855 b778e59 Replace precise with trusty (MarcoFalke)
#7975 fc23fee Update bitcoin-core GitHub links (MarcoFalke)
#8034 e3a8207 Add basic git squash workflow (fanquake)
#7813 214ec0b Update port in tor.md (MarcoFalke)
#8193 37c9830 Use Debian 8.5 in the gitian-build guide (fanquake)
#8261 3685e0c Clarify help for getblockchaininfo (paveljanik)
#7185 ea0f5a2 Note that reviewers should mention the id of the commits they reviewed (pstratem)
#7290 c851d8d [init] Add missing help for args (MarcoFalke)
#7281 f9fd4c2 Improve CheckInputs() comment about sig verification (petertodd)
#7417 1e06bab Minor improvements to the release process (PRabahy)
#7444 4cdbd42 Improve block validity/ConnectBlock() comments (petertodd)
#7527 db2e1c0 Fix and cleanup listreceivedbyX documentation (instagibbs)
#7541 b6e00af Clarify description of blockindex (pinheadmz)
#7590 f06af57 Improving wording related to Boost library requirements [updated] (jonathancross)
#7635 0fa88ef Add dependency info to test docs (elliotolds)
#7609 3ba07bd RPM spec file project (AliceWonderMiscreations)
#7850 229a17c Removed call to TryCreateDirectory from GetDefaultDataDir in src/util.cpp (alexreg)
#7888 ec870e1 Prevector: fix 2 bugs in currently unreached code paths (kazcw)
#7922 90653bc CBase58Data::SetString: cleanse the full vector (kazcw)
#7881 c4e8390 Update release process (laanwj)
#7952 a9c8b74 Log invalid block hash to make debugging easier (paveljanik)
#7974 8206835 More comments on the design of AttemptToEvictConnection (gmaxwell)
#7795 47a7cfb UpdateTip: log only one line at most per block (laanwj)
#8110 e7e25ea Add benchmarking notes (fanquake)
#8121 58f0c92 Update implemented BIPs list (fanquake)
#8029 58725ba Simplify OS X build notes (fanquake)
#8143 d46b8b5 comment nit: miners don’t vote (instagibbs)
#8136 22e0b35 Log/report in 10% steps during VerifyDB (jonasschnelli)
#8168 d366185 util: Add ParseUInt32 and ParseUInt64 (laanwj)
#8178 f7b1bfc Add git and github tips and tricks to developer notes (sipa)
#8177 67db011 developer notes: updates for C++11 (kazcw)
#8229 8ccdac1 [Doc] Update OS X build notes for 10.11 SDK (fanquake)
#8233 9f1807a Mention Linux ARM executables in release process and notes (laanwj)
#7540 ff46dd4 Rename OP_NOP3 to OP_CHECKSEQUENCEVERIFY (btcdrak)
#8289 26316ff bash-completion: Adapt for 0.12 and 0.13 (roques)
#7453 3dc3149 Missing patches from 0.12 (MarcoFalke)
#7113 54a550b Switch to a more efficient rolling Bloom filter (sipa)
#7257 de9e5ea Combine common error strings for different options so translations can be shared and reused (luke-jr)
#7304 b8f485c [contrib] Add clang-format-diff.py (MarcoFalke)
#7378 e6f97ef devtools: replace github-merge with python version (laanwj)
#7395 0893705 devtools: show pull and commit information in github-merge (laanwj)
#7402 6a5932b devtools: github-merge get toplevel dir without extra whitespace (achow101)
#7425 20a408c devtools: Fix utf-8 support in messages for github-merge (laanwj)
#7632 409f843 Delete outdated test-patches reference (Lewuathe)
#7662 386f438 remove unused NOBLKS_VERSION_{START,END} constants (rat4)
#7737 aa0d2b2 devtools: make github-merge.py use py3 (laanwj)
#7781 55db5f0 devtools: Auto-set branch to merge to in github-merge (laanwj)
#7934 f17032f Improve rolling bloom filter performance and benchmark (sipa)
#8004 2efe38b signal handling: fReopenDebugLog and fRequestShutdown should be type sig_atomic_t (catilac)
#7713 f6598df Fixes for verify-commits script (petertodd)
#8412 8360d5b libconsensus: Expose a flag for BIP112 (jtimon)
Credits
Thanks to everyone who directly contributed to this release:

21E14
accraze
Adam Brown
Alexander Regueiro
Alex Morcos
Alfie John
Alice Wonder
AlSzacrel
Andrew Chow
Andrés G. Aragoneses
Bob McElrath
BtcDrak
calebogden
Cédric Félizard
Chirag Davé
Chris Moore
Chris Stewart
Christian von Roques
Chris Wheeler
Cory Fields
crowning-
Daniel Cousens
Daniel Kraft
Denis Lukianov
Elias Rohrer
Elliot Olds
Eric Shaw
error10
Ethan Heilman
face
fanquake
Francesco ‘makevoid’ Canessa
fsb4000
Gavin Andresen
gladoscc
Gregory Maxwell
Gregory Sanders
instagibbs
James O’Beirne
Jannes Faber
Jarret Dyrbye
Jeremy Rand
jloughry
jmacwhyte
Joao Fonseca
Johnson Lau
Jonas Nick
Jonas Schnelli
Jonathan Cross
João Barbosa
Jorge Timón
Kaz Wesley
Kefkius
kirkalx
Krzysztof Jurewicz
Leviathn
lewuathe
Luke Dashjr
Luv Khemani
Marcel Krüger
Marco Falke
Mark Friedenbach
Matt
Matt Bogosian
Matt Corallo
Matthew English
Matthew Zipkin
mb300sd
Mitchell Cash
mrbandrews
mruddy
Murch
Mustafa
Nathaniel Mahieu
Nicolas Dorier
Patrick Strateman
Paul Rabahy
paveljanik
Pavel Janík
Pavel Vasin
Pedro Branco
Peter Todd
Philip Kaufmann
Pieter Wuille
Prayag Verma
ptschip
Puru
randy-waterhouse
R E Broadley
Rusty Russell
Suhas Daftuar
Suriyaa Kudo
TheLazieR Yip
Thomas Kerin
Tom Harding
Tyler Hardin
UdjinM6
Warren Togami
Will Binns
Wladimir J. van der Laan
Yuri Zhykin
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.13.1 released
27 October 2016

Compatibility
Notable changes
0.13.1 Change log
- {:.}
Consensus
- {:.}
RPC and other APIs
- {:.}
Block and transaction handling
- {:.}
P2P protocol and network code
- {:.}
Build system
- {:.}
GUI
- {:.}
Wallet
- {:.}
Tests and QA
- {:.}
Documentation
- {:.}
Miscellaneous
Credits
Bitcoin Core version 0.13.1 is now available from:

https://bitcoin.org/bin/bitcoin-core-0.13.1/

This is a new minor version release, including activation parameters for the segwit softfork, various bugfixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

Compatibility
Microsoft ended support for Windows XP on April 8th, 2014, an OS initially released in 2001. This means that not even critical security updates will be released anymore. Without security updates, using a bitcoin wallet on a XP machine is irresponsible at least.

In addition to that, with 0.12.x there have been varied reports of Bitcoin Core randomly crashing on Windows XP. It is not clear what the source of these crashes is, but it is likely that upstream libraries such as Qt are no longer being tested on XP.

We do not have time nor resources to provide support for an OS that is end-of-life. From 0.13.0 on, Windows XP is no longer supported. Users are suggested to upgrade to a newer version of Windows, or install an alternative OS that is supported.

No attempt is made to prevent installing or running the software on Windows XP, you can still do so at your own risk, but do not expect it to work: do not report issues about Windows XP to the issue tracker.

From 0.13.1 onwards OS X 10.7 is no longer supported. 0.13.0 was intended to work on 10.7+, but severe issues with the libc++ version on 10.7.x keep it from running reliably. 0.13.1 now requires 10.8+, and will communicate that to 10.7 users, rather than crashing unexpectedly.

Notable changes
Segregated witness soft fork
Segregated witness (segwit) is a soft fork that, if activated, will allow transaction-producing software to separate (segregate) transaction signatures (witnesses) from the part of the data in a transaction that is covered by the txid. This provides several immediate benefits:

Elimination of unwanted transaction malleability: Segregating the witness allows both existing and upgraded software to calculate the transaction identifier (txid) of transactions without referencing the witness, which can sometimes be changed by third-parties (such as miners) or by co-signers in a multisig spend. This solves all known cases of unwanted transaction malleability, which is a problem that makes programming Bitcoin wallet software more difficult and which seriously complicates the design of smart contracts for Bitcoin.

Capacity increase: Segwit transactions contain new fields that are not part of the data currently used to calculate the size of a block, which allows a block containing segwit transactions to hold more data than allowed by the current maximum block size. Estimates based on the transactions currently found in blocks indicate that if all wallets switch to using segwit, the network will be able to support about 70% more transactions. The network will also be able to support more of the advanced-style payments (such as multisig) than it can support now because of the different weighting given to different parts of a transaction after segwit activates (see the following section for details).

Weighting data based on how it affects node performance: Some parts of each Bitcoin block need to be stored by nodes in order to validate future blocks; other parts of a block can be immediately forgotten (pruned) or used only for helping other nodes sync their copy of the block chain. One large part of the immediately prunable data are transaction signatures (witnesses), and segwit makes it possible to give a different “weight” to segregated witnesses to correspond with the lower demands they place on node resources. Specifically, each byte of a segregated witness is given a weight of 1, each other byte in a block is given a weight of 4, and the maximum allowed weight of a block is 4 million. Weighting the data this way better aligns the most profitable strategy for creating blocks with the long-term costs of block validation.

Signature covers value: A simple improvement in the way signatures are generated in segwit simplifies the design of secure signature generators (such as hardware wallets), reduces the amount of data the signature generator needs to download, and allows the signature generator to operate more quickly. This is made possible by having the generator sign the amount of bitcoins they think they are spending, and by having full nodes refuse to accept those signatures unless the amount of bitcoins being spent is exactly the same as was signed. For non-segwit transactions, wallets instead had to download the complete previous transactions being spent for every payment they made, which could be a slow operation on hardware wallets and in other situations where bandwidth or computation speed was constrained.

Linear scaling of sighash operations: In 2015 a block was produced that required about 25 seconds to validate on modern hardware because of the way transaction signature hashes are performed. Other similar blocks, or blocks that could take even longer to validate, can still be produced today. The problem that caused this can’t be fixed in a soft fork without unwanted side-effects, but transactions that opt-in to using segwit will now use a different signature method that doesn’t suffer from this problem and doesn’t have any unwanted side-effects.

Increased security for multisig: Bitcoin addresses (both P2PKH addresses that start with a ‘1’ and P2SH addresses that start with a ‘3’) use a hash function known as RIPEMD-160. For P2PKH addresses, this provides about 160 bits of security—which is beyond what cryptographers believe can be broken today. But because P2SH is more flexible, only about 80 bits of security is provided per address. Although 80 bits is very strong security, it is within the realm of possibility that it can be broken by a powerful adversary. Segwit allows advanced transactions to use the SHA256 hash function instead, which provides about 128 bits of security (that is 281 trillion times as much security as 80 bits and is equivalent to the maximum bits of security believed to be provided by Bitcoin’s choice of parameters for its Elliptic Curve Digital Security Algorithm [ECDSA].)

More efficient almost-full-node security Satoshi Nakamoto’s original Bitcoin paper describes a method for allowing newly-started full nodes to skip downloading and validating some data from historic blocks that are protected by large amounts of proof of work. Unfortunately, Nakamoto’s method can’t guarantee that a newly-started node using this method will produce an accurate copy of Bitcoin’s current ledger (called the UTXO set), making the node vulnerable to falling out of consensus with other nodes. Although the problems with Nakamoto’s method can’t be fixed in a soft fork, Segwit accomplishes something similar to his original proposal: it makes it possible for a node to optionally skip downloading some blockchain data (specifically, the segregated witnesses) while still ensuring that the node can build an accurate copy of the UTXO set for the block chain with the most proof of work. Segwit enables this capability at the consensus layer, but note that Bitcoin Core does not provide an option to use this capability as of this 0.13.1 release.

Script versioning: Segwit makes it easy for future soft forks to allow Bitcoin users to individually opt-in to almost any change in the Bitcoin Script language when those users receive new transactions. Features currently being researched by Bitcoin Core contributors that may use this capability include support for Schnorr signatures, which can improve the privacy and efficiency of multisig transactions (or transactions with multiple inputs), and Merklized Abstract Syntax Trees (MAST), which can improve the privacy and efficiency of scripts with two or more conditions. Other Bitcoin community members are studying several other improvements that can be made using script versioning.

Activation for the segwit soft fork is being managed using BIP9 versionbits. Segwit’s version bit is bit 1, and nodes will begin tracking which blocks signal support for segwit at the beginning of the first retarget period after segwit’s start date of 15 November 2016. If 95% of blocks within a 2,016-block retarget period (about two weeks) signal support for segwit, the soft fork will be locked in. After another 2,016 blocks, segwit will activate.

For more information about segwit, please see the segwit FAQ, the segwit wallet developers guide or BIPs 141, 143, 144, and 145. If you’re a miner or mining pool operator, please see the versionbits FAQ for information about signaling support for a soft fork.

Null dummy soft fork
Combined with the segwit soft fork is an additional change that turns a long-existing network relay policy into a consensus rule. The OP_CHECKMULTISIG and OP_CHECKMULTISIGVERIFY opcodes consume an extra stack element (“dummy element”) after signature validation. The dummy element is not inspected in any manner, and could be replaced by any value without invalidating the script.

Because any value can be used for this dummy element, it’s possible for a third-party to insert data into other people’s transactions, changing the transaction’s txid (called transaction malleability) and possibly causing other problems.

Since Bitcoin Core 0.10.0, nodes have defaulted to only relaying and mining transactions whose dummy element was a null value (0x00, also called OP_0). The null dummy soft fork turns this relay rule into a consensus rule both for non-segwit transactions and segwit transactions, so that this method of mutating transactions is permanently eliminated from the network.

Signaling for the null dummy soft fork is done by signaling support for segwit, and the null dummy soft fork will activate at the same time as segwit.

For more information, please see BIP147.

Low-level RPC changes
importprunedfunds only accepts two required arguments. Some versions accept an optional third arg, which was always ignored. Make sure to never pass more than two arguments.
Linux ARM builds
With the 0.13.0 release, pre-built Linux ARM binaries were added to the set of uploaded executables. Additional detail on the ARM architecture targeted by each is provided below.

The following extra files can be found in the download directory or torrent:

bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz: Linux binaries targeting the 32-bit ARMv7-A architecture.
bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz: Linux binaries targeting the 64-bit ARMv8-A architecture.
ARM builds are still experimental. If you have problems on a certain device or Linux distribution combination please report them on the bug tracker, it may be possible to resolve them. Note that the device you use must be (backward) compatible with the architecture targeted by the binary that you use. For example, a Raspberry Pi 2 Model B or Raspberry Pi 3 Model B (in its 32-bit execution state) device, can run the 32-bit ARMv7-A targeted binary. However, no model of Raspberry Pi 1 device can run either binary because they are all ARMv6 architecture devices that are not compatible with ARMv7-A or ARMv8-A.

Note that Android is not considered ARM Linux in this context. The executables are not expected to work out of the box on Android.

0.13.1 Change log
Detailed release notes follow. This overview includes changes that affect behavior, not code moves, refactors and string updates. For convenience in locating the code changes and accompanying discussion, both the pull request and git merge commit are mentioned.

Consensus
#8636 9dfa0c8 Implement NULLDUMMY softfork (BIP147) (jl2012)
#8848 7a34a46 Add NULLDUMMY verify flag in bitcoinconsensus.h (jl2012)
#8937 8b66659 Define start and end time for segwit deployment (sipa)
RPC and other APIs
#8581 526d2b0 Drop misleading option in importprunedfunds (MarcoFalke)
#8699 a5ec248 Remove createwitnessaddress RPC command (jl2012)
#8780 794b007 Deprecate getinfo (MarcoFalke)
#8832 83ad563 Throw JSONRPCError when utxo set can not be read (MarcoFalke)
#8884 b987348 getblockchaininfo help: pruneheight is the lowest, not highest, block (luke-jr)
#8858 3f508ed rpc: Generate auth cookie in hex instead of base64 (laanwj)
#8951 7c2bf4b RPC/Mining: getblocktemplate: Update and fix formatting of help (luke-jr)
Block and transaction handling
#8611 a9429ca Reduce default number of blocks to check at startup (sipa)
#8634 3e80ab7 Add policy: null signature for failed CHECK(MULTI)SIG (jl2012)
#8525 1672225 Do not store witness txn in rejection cache (sipa)
#8499 9777fe1 Add several policy limits and disable uncompressed keys for segwit scripts (jl2012)
#8526 0027672 Make non-minimal OP_IF/NOTIF argument non-standard for P2WSH (jl2012)
#8524 b8c79a0 Precompute sighashes (sipa)
#8651 b8c79a0 Predeclare PrecomputedTransactionData as struct (sipa)
P2P protocol and network code
#8740 42ea51a No longer send local address in addrMe (laanwj)
#8427 69d1cd2 Ignore notfound P2P messages (laanwj)
#8573 4f84082 Set jonasschnellis dns-seeder filter flag (jonasschnelli)
#8712 23feab1 Remove maxuploadtargets recommended minimum (jonasschnelli)
#8862 7ae6242 Fix a few cases where messages were sent after requested disconnect (theuni)
#8393 fe1975a Support for compact blocks together with segwit (sipa)
#8282 2611ad7 Feeler connections to increase online addrs in the tried table (EthanHeilman)
#8612 2215c22 Check for compatibility with download in FindNextBlocksToDownload (sipa)
#8606 bbf379b Fix some locks (sipa)
#8594 ab295bb Do not add random inbound peers to addrman (gmaxwell)
#8940 5b4192b Add x9 service bit support to dnsseed.bluematt.me, seed.bitcoinstats.com (TheBlueMatt, cdecker)
#8944 685e4c7 Remove bogus assert on number of oubound connections. (TheBlueMatt)
#8949 0dbc48a Be more agressive in getting connections to peers with relevant services (gmaxwell)
Build system
#8293 fa5b249 Allow building libbitcoinconsensus without any univalue (luke-jr)
#8492 8b0bdd3 Allow building bench_bitcoin by itself (luke-jr)
#8563 147003c Add configure check for -latomic (ajtowns)
#8626 ea51b0f Berkeley DB v6 compatibility fix (netsafe)
#8520 75f2065 Remove check for openssl/ec.h (laanwj)
GUI
#8481 d9f0d4e Fix minimize and close bugs (adlawren)
#8487 a37cec5 Persist the datadir after option reset (achow101)
#8697 41fd852 Fix op order to append first alert (rodasmith)
#8678 8e03382 Fix UI bug that could result in paying unexpected fee (jonasschnelli)
#8911 7634d8e Translate all files, even if wallet disabled (laanwj)
#8540 1db3352 Fix random segfault when closing “Choose data directory” dialog (laanwj)
#7579 f1c0d78 Show network/chain errors in the GUI (jonasschnelli)
Wallet
#8443 464dedd Trivial cleanup of HD wallet changes (jonasschnelli)
#8539 cb07f19 CDB: fix debug output (crowning-)
#8664 091cdeb Fix segwit-related wallet bug (sdaftuar)
#8693 c6a6291 Add witness address to address book (instagibbs)
#8765 6288659 Remove “unused” ThreadFlushWalletDB from removeprunedfunds (jonasschnelli)
Tests and QA
#8713 ae8c7df create_cache: Delete temp dir when done (MarcoFalke)
#8716 e34374e Check legacy wallet as well (MarcoFalke)
#8750 d6ebe13 Refactor RPCTestHandler to prevent TimeoutExpired (MarcoFalke)
#8652 63462c2 remove root test directory for RPC tests (yurizhykin)
#8724 da94272 walletbackup: Sync blocks inside the loop (MarcoFalke)
#8400 bea02dc enable rpcbind_test (yurizhykin)
#8417 f70be14 Add walletdump RPC test (including HD- & encryption-tests) (jonasschnelli)
#8419 a7aa3cc Enable size accounting in mining unit tests (sdaftuar)
#8442 8bb1efd Rework hd wallet dump test (MarcoFalke)
#8528 3606b6b Update p2p-segwit.py to reflect correct behavior (instagibbs)
#8531 a27cdd8 abandonconflict: Use assert_equal (MarcoFalke)
#8667 6b07362 Fix SIGHASH_SINGLE bug in test_framework SignatureHash (jl2012)
#8673 03b0196 Fix obvious assignment/equality error in test (JeremyRubin)
#8739 cef633c Fix broken sendcmpct test in p2p-compactblocks.py (sdaftuar)
#8418 ff893aa Add tests for compact blocks (sdaftuar)
#8803 375437c Ping regularly in p2p-segwit.py to keep connection alive (jl2012)
#8827 9bbe66e Split up slow RPC calls to avoid pruning test timeouts (sdaftuar)
#8829 2a8bca4 Add bitcoin-tx JSON tests (jnewbery)
#8834 1dd1783 blockstore: Switch to dumb dbm (MarcoFalke)
#8835 d87227d nulldummy.py: Don’t run unused code (MarcoFalke)
#8836 eb18cc1 bitcoin-util-test.py should fail if the output file is empty (jnewbery)
#8839 31ab2f8 Avoid ConnectionResetErrors during RPC tests (laanwj)
#8840 cbc3fe5 Explicitly set encoding to utf8 when opening text files (laanwj)
#8841 3e4abb5 Fix nulldummy test (jl2012)
#8854 624a007 Fix race condition in p2p-compactblocks test (sdaftuar)
#8857 1f60d45 mininode: Only allow named args in wait_until (MarcoFalke)
#8860 0bee740 util: Move wait_bitcoinds() into stop_nodes() (MarcoFalke)
#8882 b73f065 Fix race conditions in p2p-compactblocks.py and sendheaders.py (sdaftuar)
#8904 cc6f551 Fix compact block shortids for a test case (dagurval)
Documentation
#8754 0e2c6bd Target protobuf 2.6 in OS X build notes. (fanquake)
#8461 b17a3f9 Document return value of networkhashps for getmininginfo RPC endpoint (jlopp)
#8512 156e305 Corrected JSON typo on setban of net.cpp (sevastos)
#8683 8a7d7ff Fix incorrect file name bitcoin.qrc (bitcoinsSG)
#8891 5e0dd9e Update bips.md for Segregated Witness (fanquake)
#8545 863ae74 Update git-subtree-check.sh README (MarcoFalke)
#8607 486650a Fix doxygen off-by-one comments, fix typos (MarcoFalke)
#8560 c493f43 Fix two VarInt examples in serialize.h (cbarcenas)
#8737 084cae9 UndoReadFromDisk works on undo files (rev), not on block files (paveljanik)
#8625 0a35573 Clarify statement about parallel jobs in rpc-tests.py (isle2983)
#8624 0e6d753 build: Mention curl (MarcoFalke)
#8604 b09e13c build,doc: Update for 0.13.0+ and OpenBSD 5.9 (laanwj)
#8939 06d15fb Update implemented bips for 0.13.1 (sipa)
Miscellaneous
#8742 d31ac72 Specify Protobuf version 2 in paymentrequest.proto (fanquake)
#8414,#8558,#8676,#8700,#8701,#8702 Add missing copyright headers (isle2983, kazcw)
#8899 4ed2627 Fix wake from sleep issue with Boost 1.59.0 (fanquake)
#8817 bcf3806 update bitcoin-tx to output witness data (jnewbery)
#8513 4e5fc31 Fix a type error that would not compile on OSX. (JeremyRubin)
#8392 30eac2d Fix several node initialization issues (sipa)
#8548 305d8ac Use __func__ to get function name for output printing (MarcoFalke)
#8291 a987431 [util] CopyrightHolders: Check for untranslated substitution (MarcoFalke)
Credits
Thanks to everyone who directly contributed to this release:

adlawren
Alexey Vesnin
Anders Øyvind Urke-Sætre
Andrew Chow
Anthony Towns
BtcDrak
Chris Stewart
Christian Barcenas
Christian Decker
Cory Fields
crowning-
Dagur Valberg Johannsson
David A. Harding
Eric Lombrozo
Ethan Heilman
fanquake
Gaurav Rana
Gregory Maxwell
instagibbs
isle2983
Jameson Lopp
Jeremy Rubin
jnewbery
Johnson Lau
Jonas Schnelli
jonnynewbs
Justin Camarena
Kaz Wesley
leijurv
Luke Dashjr
MarcoFalke
Marty Jones
Matt Corallo
Micha
Michael Ford
mruddy
Pavel Janík
Pieter Wuille
rodasmith
Sev
Suhas Daftuar
whythat
Wladimir J. van der Laan
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.13.2 released
3 January 2017

Compatibility
Notable changes
0.13.2 Change log
- {:.}
Consensus
- {:.}
RPC and other APIs
- {:.}
Block and transaction handling
- {:.}
P2P protocol and network code
- {:.}
Build system
- {:.}
GUI
- {:.}
Wallet
- {:.}
Tests and QA
- {:.}
Miscellaneous
Credits
Bitcoin Core version 0.13.2 is now available from:

https://bitcoin.org/bin/bitcoin-core-0.13.2/

This is a new minor version release, including various bugfixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

Compatibility
Microsoft ended support for Windows XP on April 8th, 2014, an OS initially released in 2001. This means that not even critical security updates will be released anymore. Without security updates, using a bitcoin wallet on a XP machine is irresponsible at least.

In addition to that, with 0.12.x there have been varied reports of Bitcoin Core randomly crashing on Windows XP. It is not clear what the source of these crashes is, but it is likely that upstream libraries such as Qt are no longer being tested on XP.

We do not have time nor resources to provide support for an OS that is end-of-life. From 0.13.0 on, Windows XP is no longer supported. Users are suggested to upgrade to a newer version of Windows, or install an alternative OS that is supported.

No attempt is made to prevent installing or running the software on Windows XP, you can still do so at your own risk, but do not expect it to work: do not report issues about Windows XP to the issue tracker.

From 0.13.1 onwards OS X 10.7 is no longer supported. 0.13.0 was intended to work on 10.7+, but severe issues with the libc++ version on 10.7.x keep it from running reliably. 0.13.1 now requires 10.8+, and will communicate that to 10.7 users, rather than crashing unexpectedly.

Notable changes
Change to wallet handling of mempool rejection
When a newly created transaction failed to enter the mempool due to the limits on chains of unconfirmed transactions the sending RPC calls would return an error. The transaction would still be queued in the wallet and, once some of the parent transactions were confirmed, broadcast after the software was restarted.

This behavior has been changed to return success and to reattempt mempool insertion at the same time transaction rebroadcast is attempted, avoiding a need for a restart.

Transactions in the wallet which cannot be accepted into the mempool can be abandoned with the previously existing abandontransaction RPC (or in the GUI via a context menu on the transaction).

0.13.2 Change log
Detailed release notes follow. This overview includes changes that affect behavior, not code moves, refactors and string updates. For convenience in locating the code changes and accompanying discussion, both the pull request and git merge commit are mentioned.

Consensus
#9293 e591c10 [0.13 Backport #9053] IBD using chainwork instead of height and not using header timestamp (gmaxwell)
#9053 5b93eee IBD using chainwork instead of height and not using header timestamps (gmaxwell)
RPC and other APIs
#8845 1d048b9 Don’t return the address of a P2SH of a P2SH (jnewbery)
#9041 87fbced keypoololdest denote Unix epoch, not GMT (s-matthew-english)
#9122 f82c81b fix getnettotals RPC description about timemillis (visvirial)
#9042 5bcb05d [rpc] ParseHash: Fail when length is not 64 (MarcoFalke)
#9194 f26dab7 Add option to return non-segwit serialization via rpc (instagibbs)
#9347 b711390 [0.13.2] wallet/rpc backports (MarcoFalke)
#9292 c365556 Complain when unknown rpcserialversion is specified (sipa)
#9322 49a612f [qa] Don’t set unknown rpcserialversion (MarcoFalke)
Block and transaction handling
#8357 ce0d817 [mempool] Fix relaypriority calculation error (maiiz)
#9267 0a4aa87 [0.13 backport #9239] Disable fee estimates for a confirm target of 1 block (morcos)
#9196 0c09d9f Send tip change notification from invalidateblock (ryanofsky)
P2P protocol and network code
#8995 9ef3875 Add missing cs_main lock to ::GETBLOCKTXN processing (TheBlueMatt)
#9234 94531b5 torcontrol: Explicitly request RSA1024 private key (laanwj)
#8637 2cad5db Compact Block Tweaks (rebase of #8235) (sipa)
#9058 286e548 Fixes for p2p-compactblocks.py test timeouts on travis (#8842) (ryanofsky)
#8865 4c71fc4 Decouple peer-processing-logic from block-connection-logic (TheBlueMatt)
#9117 6fe3981 net: don’t send feefilter messages before the version handshake is complete (theuni)
#9188 ca1fd75 Make orphan parent fetching ask for witnesses (gmaxwell)
#9052 3a3bcbf Use RelevantServices instead of node_network in AttemptToEvict (gmaxwell)
#9048 9460771 [0.13 backport #9026] Fix handling of invalid compact blocks (sdaftuar)
#9357 03b6f62 [0.13 backport #9352] Attempt reconstruction from all compact block announcements (sdaftuar)
#9189 b96a8f7 Always add default_witness_commitment with GBT client support (sipa)
#9253 28d0f22 Fix calculation of number of bound sockets to use (TheBlueMatt)
#9199 da5a16b Always drop the least preferred HB peer when adding a new one (gmaxwell)
Build system
#9169 d1b4da9 build: fix qt5.7 build under macOS (theuni)
#9326 a0f7ece Update for OpenSSL 1.1 API (gmaxwell)
#9224 396c405 Prevent FD_SETSIZE error building on OpenBSD (ivdsangen)
GUI
#8972 6f86b53 Make warnings label selectable (jonasschnelli) (MarcoFalke)
#9185 6d70a73 Fix coincontrol sort issue (jonasschnelli)
#9094 5f3a12c Use correct conversion function for boost::path datadir (laanwj)
#8908 4a974b2 Update bitcoin-qt.desktop (s-matthew-english)
#9190 dc46b10 Plug many memory leaks (laanwj)
Wallet
#9290 35174a0 Make RelayWalletTransaction attempt to AcceptToMemoryPool (gmaxwell)
#9295 43bcfca Bugfix: Fundrawtransaction: don’t terminate when keypool is empty (jonasschnelli)
#9302 f5d606e Return txid even if ATMP fails for new transaction (sipa)
#9262 fe39f26 Prefer coins that have fewer ancestors, sanity check txn before ATMP (instagibbs)
Tests and QA
#9159 eca9b46 Wait for specific block announcement in p2p-compactblocks (ryanofsky)
#9186 dccdc3a Fix use-after-free in scheduler tests (laanwj)
#9168 3107280 Add assert_raises_message to check specific error message (mrbandrews)
#9191 29435db 0.13.2 Backports (MarcoFalke)
#9077 1d4c884 Increase wallet-dump RPC timeout (ryanofsky)
#9098 ecd7db5 Handle zombies and cluttered tmpdirs (MarcoFalke)
#8927 387ec9d Add script tests for FindAndDelete in pre-segwit and segwit scripts (jl2012)
#9200 eebc699 bench: Fix subtle counting issue when rescaling iteration count (laanwj)
Miscellaneous
#8838 094848b Calculate size and weight of block correctly in CreateNewBlock() (jnewbery)
#8920 40169dc Set minimum required Boost to 1.47.0 (fanquake)
#9251 a710a43 Improvement of documentation of command line parameter ‘whitelist’ (wodry)
#8932 106da69 Allow bitcoin-tx to create v2 transactions (btcdrak)
#8929 12428b4 add software-properties-common (sigwo)
#9120 08d1c90 bug: Missed one “return false” in recent refactoring in #9067 (UdjinM6)
#9067 f85ee01 Fix exit codes (UdjinM6)
#9340 fb987b3 [0.13] Update secp256k1 subtree (MarcoFalke)
#9229 b172377 Remove calls to getaddrinfo_a (TheBlueMatt)
Credits
Thanks to everyone who directly contributed to this release:

Alex Morcos
BtcDrak
Cory Fields
fanquake
Gregory Maxwell
Gregory Sanders
instagibbs
Ivo van der Sangen
jnewbery
Johnson Lau
Jonas Schnelli
Luke Dashjr
maiiz
MarcoFalke
Masahiko Hyuga
Matt Corallo
matthias
mrbandrews
Pavel Janík
Pieter Wuille
randy-waterhouse
Russell Yanofsky
S. Matthew English
Steven
Suhas Daftuar
UdjinM6
Wladimir J. van der Laan
wodry
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.14.0 released
8 March 2017

Compatibility
Notable changes
0.14.0 Change log
- {:.}
RPC and other APIs
- {:.}
Block and transaction handling
- {:.}
P2P protocol and network code
- {:.}
Validation
- {:.}
Build system
- {:.}
GUI
- {:.}
Wallet
- {:.}
Tests and QA
- {:.}
Documentation
- {:.}
Miscellaneous
Credits
Bitcoin Core version 0.14.0 is not available for security reasons:

https://bitcoin.org/bin/bitcoin-core-0.14.0/

This is a new major version release, including new features, various bugfixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

Compatibility
Bitcoin Core is extensively tested on multiple operating systems using the Linux kernel, macOS 10.8+, and Windows Vista and later.

Microsoft ended support for Windows XP on April 8th, 2014, No attempt is made to prevent installing or running the software on Windows XP, you can still do so at your own risk but be aware that there are known instabilities and issues. Please do not report issues about Windows XP to the issue tracker.

Bitcoin Core should also work on most other Unix-like systems but is not frequently tested on them.

Notable changes
Performance Improvements
Validation speed and network propagation performance have been greatly improved, leading to much shorter sync and initial block download times.

The script signature cache has been reimplemented as a “cuckoo cache”, allowing for more signatures to be cached and faster lookups.
Assumed-valid blocks have been introduced which allows script validation to be skipped for ancestors of known-good blocks, without changing the security model. See below for more details.
In some cases, compact blocks are now relayed before being fully validated as per BIP152.
P2P networking has been refactored with a focus on concurrency and throughput. Network operations are no longer bottlenecked by validation. As a result, block fetching is several times faster than previous releases in many cases.
The UTXO cache now claims unused mempool memory. This speeds up initial block download as UTXO lookups are a major bottleneck there, and there is no use for the mempool at that stage.
Manual Pruning
Bitcoin Core has supported automatically pruning the blockchain since 0.11. Pruning the blockchain allows for significant storage space savings as the vast majority of the downloaded data can be discarded after processing so very little of it remains on the disk.

Manual block pruning can now be enabled by setting -prune=1. Once that is set, the RPC command pruneblockchain can be used to prune the blockchain up to the specified height or timestamp.

getinfo Deprecated
The getinfo RPC command has been deprecated. Each field in the RPC call has been moved to another command’s output with that command also giving additional information that getinfo did not provide. The following table shows where each field has been moved to:

getinfo field	Moved to
"version"	getnetworkinfo()["version"]
"protocolversion"	getnetworkinfo()["protocolversion"]
"walletversion"	getwalletinfo()["walletversion"]
"balance"	getwalletinfo()["balance"]
"blocks"	getblockchaininfo()["blocks"]
"timeoffset"	getnetworkinfo()["timeoffset"]
"connections"	getnetworkinfo()["connections"]
"proxy"	getnetworkinfo()["networks"]&<a href="https://github.com/bitcoin/bitcoin/pull/91">#91</a>;0&<a href="https://github.com/bitcoin/bitcoin/pull/93">#93</a>;["proxy"]
"difficulty"	getblockchaininfo()["difficulty"]
"testnet"	getblockchaininfo()["chain"] == "test"
"keypoololdest"	getwalletinfo()["keypoololdest"]
"keypoolsize"	getwalletinfo()["keypoolsize"]
"unlocked_until"	getwalletinfo()["unlocked_until"]
"paytxfee"	getwalletinfo()["paytxfee"]
"relayfee"	getnetworkinfo()["relayfee"]
"errors"	getnetworkinfo()["warnings"]
ZMQ On Windows
Previously the ZeroMQ notification system was unavailable on Windows due to various issues with ZMQ. These have been fixed upstream and now ZMQ can be used on Windows. Please see this document for help with using ZMQ in general.

Nested RPC Commands in Debug Console
The ability to nest RPC commands has been added to the debug console. This allows users to have the output of a command become the input to another command without running the commands separately.

The nested RPC commands use bracket syntax (i.e. getwalletinfo()) and can be nested (i.e. getblock(getblockhash(1))). Simple queries can be done with square brackets where object values are accessed with either an array index or a non-quoted string (i.e. listunspent()&<a href="https://github.com/bitcoin/bitcoin/pull/91">#91</a>;0&<a href="https://github.com/bitcoin/bitcoin/pull/93">#93</a>;[txid]). Both commas and spaces can be used to separate parameters in both the bracket syntax and normal RPC command syntax.

Network Activity Toggle
A RPC command and GUI toggle have been added to enable or disable all p2p network activity. The network status icon in the bottom right hand corner is now the GUI toggle. Clicking the icon will either enable or disable all p2p network activity. If network activity is disabled, the icon will be grayed out with an X on top of it.

Additionally the setnetworkactive RPC command has been added which does the same thing as the GUI icon. The command takes one boolean parameter, true enables networking and false disables it.

Out-of-sync Modal Info Layer
When Bitcoin Core is out-of-sync on startup, a semi-transparent information layer will be shown over top of the normal display. This layer contains details about the current sync progress and estimates the amount of time remaining to finish syncing. This layer can also be hidden and subsequently unhidden by clicking on the progress bar at the bottom of the window.

Support for JSON-RPC Named Arguments
Commands sent over the JSON-RPC interface and through the bitcoin-cli binary can now use named arguments. This follows the JSON-RPC specification for passing parameters by-name with an object.

bitcoin-cli has been updated to support this by parsing name=value arguments when the -named option is given.

Some examples:

src/bitcoin-cli -named help command="help"
src/bitcoin-cli -named getblockhash height=0
src/bitcoin-cli -named getblock blockhash=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
src/bitcoin-cli -named sendtoaddress address="(snip)" amount="1.0" subtractfeefromamount=true
The order of arguments doesn’t matter in this case. Named arguments are also useful to leave out arguments that should stay at their default value. The rarely-used arguments comment and comment_to to sendtoaddress, for example, can be left out. However, this is not yet implemented for many RPC calls, this is expected to land in a later release.

The RPC server remains fully backwards compatible with positional arguments.

Opt into RBF When Sending
A new startup option, -walletrbf, has been added to allow users to have all transactions sent opt into RBF support. The default value for this option is currently false, so transactions will not opt into RBF by default. The new bumpfee RPC can be used to replace transactions that opt into RBF.

Sensitive Data Is No Longer Stored In Debug Console History
The debug console maintains a history of previously entered commands that can be accessed by pressing the Up-arrow key so that users can easily reuse previously entered commands. Commands which have sensitive information such as passphrases and private keys will now have a (...) in place of the parameters when accessed through the history.

Retaining the Mempool Across Restarts
The mempool will be saved to the data directory prior to shutdown to a mempool.dat file. This file preserves the mempool so that when the node restarts the mempool can be filled with transactions without waiting for new transactions to be created. This will also preserve any changes made to a transaction through commands such as prioritisetransaction so that those changes will not be lost.

Final Alert
The Alert System was disabled and deprecated in Bitcoin Core 0.12.1 and removed in 0.13.0. The Alert System was retired with a maximum sequence final alert which causes any nodes supporting the Alert System to display a static hard-coded “Alert Key Compromised” message which also prevents any other alerts from overriding it. This final alert is hard-coded into this release so that all old nodes receive the final alert.

GUI Changes
After resetting the options by clicking the Reset Options button in the options dialog or with the -resetguioptions startup option, the user will be prompted to choose the data directory again. This is to ensure that custom data directories will be kept after the option reset which clears the custom data directory set via the choose datadir dialog.

Multiple peers can now be selected in the list of peers in the debug window. This allows for users to ban or disconnect multiple peers simultaneously instead of banning them one at a time.

An indicator has been added to the bottom right hand corner of the main window to indicate whether the wallet being used is a HD wallet. This icon will be grayed out with an X on top of it if the wallet is not a HD wallet.

Low-level RPC changes
importprunedfunds only accepts two required arguments. Some versions accept an optional third arg, which was always ignored. Make sure to never pass more than two arguments.

The first boolean argument to getaddednodeinfo has been removed. This is an incompatible change.

RPC command getmininginfo loses the “testnet” field in favor of the more generic “chain” (which has been present for years).

A new RPC command preciousblock has been added which marks a block as precious. A precious block will be treated as if it were received earlier than a competing block.

A new RPC command importmulti has been added which receives an array of JSON objects representing the intention of importing a public key, a private key, an address and script/p2sh

Use of getrawtransaction for retrieving confirmed transactions with unspent outputs has been deprecated. For now this will still work, but in the future it may change to only be able to retrieve information about transactions in the mempool or if txindex is enabled.

A new RPC command getmemoryinfo has been added which will return information about the memory usage of Bitcoin Core. This was added in conjunction with optimizations to memory management. See #8753. for more information.

A new RPC command bumpfee has been added which allows replacing an unconfirmed wallet transaction that signaled RBF (see the -walletrbf startup option above) with a new transaction that pays a higher fee, and should be more likely to get confirmed quickly.

HTTP REST Changes
UTXO set query (GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n> /.../<txid>-<n>.<bin|hex|json>) responses were changed to return status code HTTP_BAD_REQUEST (400) instead of HTTP_INTERNAL_SERVER_ERROR (500) when requests contain invalid parameters.
Minimum Fee Rate Policies
Since the changes in 0.12 to automatically limit the size of the mempool and improve the performance of block creation in mining code it has not been important for relay nodes or miners to set -minrelaytxfee. With this release the following concepts that were tied to this option have been separated out:

incremental relay fee used for calculating BIP 125 replacement and mempool limiting. (1000 satoshis/kB)
calculation of threshold for a dust output. (effectively 3 * 1000 satoshis/kB)
minimum fee rate of a package of transactions to be included in a block created by the mining code. If miners wish to set this minimum they can use the new -blockmintxfee option. (defaults to 1000 satoshis/kB)
The -minrelaytxfee option continues to exist but is recommended to be left unset.

Fee Estimation Changes
Since 0.13.2 fee estimation for a confirmation target of 1 block has been disabled. The fee slider will no longer be able to choose a target of 1 block. This is only a minor behavior change as there was often insufficient data for this target anyway. estimatefee 1 will now always return -1 and estimatesmartfee 1 will start searching at a target of 2.

The default target for fee estimation is changed to 6 blocks in both the GUI (previously 25) and for RPC calls (previously 2).

Removal of Priority Estimation
Estimation of “priority” needed for a transaction to be included within a target number of blocks has been removed. The RPC calls are deprecated and will either return -1 or 1e24 appropriately. The format for fee_estimates.dat has also changed to no longer save these priority estimates. It will automatically be converted to the new format which is not readable by prior versions of the software.

Support for “priority” (coin age) transaction sorting for mining is considered deprecated in Core and will be removed in the next major version. This is not to be confused with the prioritisetransaction RPC which will remain supported by Core for adding fee deltas to transactions.

P2P connection management
Peers manually added through the -addnode option or addnode RPC now have their own limit of eight connections which does not compete with other inbound or outbound connection usage and is not subject to the limitation imposed by the -maxconnections option.

New connections to manually added peers are performed more quickly.

Introduction of assumed-valid blocks
A significant portion of the initial block download time is spent verifying scripts/signatures. Although the verification must pass to ensure the security of the system, no other result from this verification is needed: If the node knew the history of a given block were valid it could skip checking scripts for its ancestors.

A new configuration option ‘assumevalid’ is provided to express this knowledge to the software. Unlike the ‘checkpoints’ in the past this setting does not force the use of a particular chain: chains that are consistent with it are processed quicker, but other chains are still accepted if they’d otherwise be chosen as best. Also unlike ‘checkpoints’ the user can configure which block history is assumed true, this means that even outdated software can sync more quickly if the setting is updated by the user.

Because the validity of a chain history is a simple objective fact it is much easier to review this setting. As a result the software ships with a default value adjusted to match the current chain shortly before release. The use of this default value can be disabled by setting -assumevalid=0

Fundrawtransaction change address reuse
Before 0.14, fundrawtransaction was by default wallet stateless. In almost all cases fundrawtransaction does add a change-output to the outputs of the funded transaction. Before 0.14, the used keypool key was never marked as change-address key and directly returned to the keypool (leading to address reuse). Before 0.14, calling getnewaddress directly after fundrawtransaction did generate the same address as the change-output address.

Since 0.14, fundrawtransaction does reserve the change-output-key from the keypool by default (optional by setting reserveChangeKey, default = true)

Users should also consider using getrawchangeaddress() in conjunction with fundrawtransaction’s changeAddress option.

Unused mempool memory used by coincache
Before 0.14, memory reserved for mempool (using the -maxmempool option) went unused during initial block download, or IBD. In 0.14, the UTXO DB cache (controlled with the -dbcache option) borrows memory from the mempool when there is extra memory available. This may result in an increase in memory usage during IBD for those previously relying on only the -dbcache option to limit memory during that time.
0.14.0 Change log
Detailed release notes follow. This overview includes changes that affect behavior, not code moves, minor refactors and string updates. For convenience in locating the code changes and accompanying discussion, both the pull request and git merge commit are mentioned.

RPC and other APIs
#8421 b77bb95 httpserver: drop boost dependency (theuni)
#8638 f061415 rest.cpp: change HTTP_INTERNAL_SERVER_ERROR to HTTP_BAD_REQUEST (djpnewton)
#8272 91990ee Make the dummy argument to getaddednodeinfo optional (sipa)
#8722 bb843ad bitcoin-cli: More detailed error reporting (laanwj)
#6996 7f71a3c Add preciousblock RPC (sipa)
#8788 97c7f73 Give RPC commands more information about the RPC request (jonasschnelli)
#7948 5d2c8e5 Augment getblockchaininfo bip9_softforks data (mruddy)
#8980 0e22855 importmulti: Avoid using boost::variant::operator!=, which is only in newer boost versions (luke-jr)
#9025 4d8558a Getrawtransaction should take a bool for verbose (jnewbery)
#8811 5754e03 Add support for JSON-RPC named arguments (laanwj)
#9520 2456a83 Deprecate non-txindex getrawtransaction and better warning (sipa)
#9518 a65ced1 Return height of last block pruned by pruneblockchain RPC (ryanofsky)
#9222 7cb024e Add ‘subtractFeeFromAmount’ option to ‘fundrawtransaction’ (dooglus)
#8456 2ef52d3 Simplified bumpfee command (mrbandrews)
#9516 727a798 Bug-fix: listsinceblock: use fork point as reference for blocks in reorg’d chains (kallewoof)
#9640 7bfb770 Bumpfee: bugfixes for error handling and feerate calculation (sdaftuar)
#9673 8d6447e Set correct metadata on bumpfee wallet transactions (ryanofsky)
#9650 40f7e27 Better handle invalid parameters to signrawtransaction (TheBlueMatt)
#9682 edc9e63 Require timestamps for importmulti keys (ryanofsky)
#9108 d8e8b06 Use importmulti timestamp when importing watch only keys (on top of #9682) (ryanofsky)
#9756 7a93af8 Return error when importmulti called with invalid address (ryanofsky)
#9778 ad168ef Add two hour buffer to manual pruning (morcos)
#9761 9828f9a Use 2 hour grace period for key timestamps in importmulti rescans (ryanofsky)
#9474 48d7e0d Mark the minconf parameter to move as ignored (sipa)
#9619 861cb0c Bugfix: RPC/Mining: GBT should return 1 MB sizelimit before segwit activates (luke-jr)
#9773 9072395 Return errors from importmulti if complete rescans are not successful (ryanofsky)
Block and transaction handling
#8391 37d83bb Consensus: Remove ISM (NicolasDorier)
#8365 618c9dd Treat high-sigop transactions as larger rather than rejecting them (sipa)
#8814 14b7b3f wallet, policy: ParameterInteraction: Don’t allow 0 fee (MarcoFalke)
#8515 9bdf526 A few mempool removal optimizations (sipa)
#8448 101c642 Store mempool and prioritization data to disk (sipa)
#7730 3c03dc2 Remove priority estimation (morcos)
#9111 fb15610 Remove unused variable UNLIKELY_PCT from fees.h (fanquake)
#9133 434e683 Unset fImporting for loading mempool (morcos)
#9179 b9a87b4 Set DEFAULT_LIMITFREERELAY = 0 kB/minute (MarcoFalke)
#9239 3fbf079 Disable fee estimates for 1-block target (morcos)
#7562 1eef038 Bump transaction version default to 2 (btcdrak)
#9313,#9367 If we don’t allow free txs, always send a fee filter (morcos)
#9346 b99a093 Batch construct batches (sipa)
#9262 5a70572 Prefer coins that have fewer ancestors, sanity check txn before ATMP (instagibbs)
#9288 1ce7ede Fix a bug if the min fee is 0 for FeeFilterRounder (morcos)
#9395 0fc1c31 Add test for -walletrejectlongchains (morcos)
#9107 7dac1e5 Safer modify new coins (morcos)
#9312 a72f76c Increase mempool expiry time to 2 weeks (morcos)
#8610 c252685 Share unused mempool memory with coincache (sipa)
#9138 f646275 Improve fee estimation (morcos)
#9408 46b249e Allow shutdown during LoadMempool, dump only when necessary (jonasschnelli)
#9310 8c87f17 Assert FRESH validity in CCoinsViewCache::BatchWrite (ryanofsky)
#7871 e2e624d Manual block file pruning (mrbandrews)
#9507 0595042 Fix use-after-free in CTxMemPool::removeConflicts() (sdaftuar)
#9380 dd98f04 Separate different uses of minimum fees (morcos)
#9596 71148b8 bugfix save feeDelta instead of priorityDelta in DumpMempool (morcos)
#9371 4a1dc35 Notify on removal (morcos)
#9519 9b4d267 Exclude RBF replacement txs from fee estimation (morcos)
#8606 e2a1a1e Fix some locks (sipa)
#8681 6898213 Performance Regression Fix: Pre-Allocate txChanged vector (JeremyRubin)
#8223 744d265 c++11: Use std::unique_ptr for block creation (domob1812)
#9125 7490ae8 Make CBlock a vector of shared_ptr of CTransactions (sipa)
#8930 93566e0 Move orphan processing to ActivateBestChain (TheBlueMatt)
#8580 46904ee Make CTransaction actually immutable (sipa)
#9240 a1dcf2e Remove txConflicted (morcos)
#8589 e8cfe1e Inline CTxInWitness inside CTxIn (sipa)
#9349 2db4cbc Make CScript (and prevector) c++11 movable (sipa)
#9252 ce5c1f4 Release cs_main before calling ProcessNewBlock, or processing headers (cmpctblock handling) (sdaftuar)
#9283 869781c A few more CTransactionRef optimizations (sipa)
#9499 9c9af5a Use recent-rejects, orphans, and recently-replaced txn for compact-block-reconstruction (TheBlueMatt)
#9813 3972a8e Read/write mempool.dat as a binary (paveljanik)
P2P protocol and network code
#8128 1030fa7 Turn net structures into dumb storage classes (theuni)
#8282 026c6ed Feeler connections to increase online addrs in the tried table (EthanHeilman)
#8462 53f8f22 Move AdvertiseLocal debug output to net category (Mirobit)
#8612 84decb5 Check for compatibility with download in FindNextBlocksToDownload (sipa)
#8594 5b2ea29 Do not add random inbound peers to addrman (gmaxwell)
#8085 6423116 Begin encapsulation (theuni)
#8715 881d7ea only delete CConnman if it’s been created (theuni)
#8707 f07424a Fix maxuploadtarget setting (theuni)
#8661 d2e4655 Do not set an addr time penalty when a peer advertises itself (gmaxwell)
#8822 9bc6a6b Consistent checksum handling (laanwj)
#8936 1230890 Report NodeId in misbehaving debug (rebroad)
#8968 3cf496d Don’t hold cs_main when calling ProcessNewBlock from a cmpctblock (TheBlueMatt)
#9002 e1d1f57 Make connect=0 disable automatic outbound connections (gmaxwell)
#9050 fcf61b8 Make a few values immutable, and use deterministic randomness for the localnonce (theuni)
#8969 3665483 Decouple peer-processing-logic from block-connection-logic (#2) (TheBlueMatt)
#8708 c8c572f have CConnman handle message sending (theuni)
#8709 1e50d22 Allow filterclear messages for enabling TX relay only (rebroad)
#9045 9f554e0 Hash P2P messages as they are received instead of at process-time (TheBlueMatt)
#9026 dc6b940 Fix handling of invalid compact blocks (sdaftuar)
#8996 ab914a6 Network activity toggle (luke-jr)
#9131 62af164 fNetworkActive is not protected by a lock, use an atomic (jonasschnelli)
#8872 0c577f2 Remove block-request logic from INV message processing (TheBlueMatt)
#8690 791b58d Do not fully sort all nodes for addr relay (sipa)
#9128 76fec09 Decouple CConnman and message serialization (theuni)
#9226 3bf06e9 Remove fNetworkNode and pnodeLocalHost (gmaxwell)
#9352 a7f7651 Attempt reconstruction from all compact block announcements (sdaftuar)
#9319 a55716a Break addnode out from the outbound connection limits (gmaxwell)
#9261 2742568 Add unstored orphans with rejected parents to recentRejects (morcos)
#9441 8b66bf7 Massive speedup. Net locks overhaul (theuni)
#9375 3908fc4 Relay compact block messages prior to full block connection (TheBlueMatt)
#9400 8a445c5 Set peers as HB peers upon full block validation (instagibbs)
#9561 6696b46 Wake message handling thread when we receive a new block (TheBlueMatt)
#9535 82274c0 Split CNode::cs_vSend: message processing and message sending (TheBlueMatt)
#9606 3f9f962 Consistently use GetTimeMicros() for inactivity checks (sdaftuar)
#9594 fd70211 Send final alert message to older peers after connecting (gmaxwell)
#9626 36966a1 Clean up a few CConnman cs_vNodes/CNode things (TheBlueMatt)
#9609 4966917 Fix remaining net assertions (theuni)
#9671 7821db3 Fix super-unlikely race introduced in 236618061a445d2cb11e72 (TheBlueMatt)
#9730 33f3b21 Remove bitseed.xf2.org form the dns seed list (jonasschnelli)
#9698 2447c10 Fix socket close race (theuni)
#9708 a06ede9 Clean up all known races/platform-specific UB at the time PR was opened (TheBlueMatt)
#9715 b08656e Disconnect peers which we do not receive VERACKs from within 60 sec (TheBlueMatt)
#9720 e87ce95 Fix banning and disallow sending messages before receiving verack (theuni)
#9268 09c4fd1 Fix rounding privacy leak introduced in #9260 (TheBlueMatt)
#9075 9346f84 Decouple peer-processing-logic from block-connection-logic (#3) (TheBlueMatt)
#8688 047ded0 Move static global randomizer seeds into CConnman (sipa)
#9289 d9ae1ce net: drop boost::thread_group (theuni)
Validation
#9014 d04aeba Fix block-connection performance regression (TheBlueMatt)
#9299 d52ce89 Remove no longer needed check for premature v2 txs (morcos)
#9273 b68685a Remove unused CDiskBlockPos* argument from ProcessNewBlock (TheBlueMatt)
#8895 b83264d Better SigCache Implementation (JeremyRubin)
#9490 e126d0c Replace FindLatestBefore used by importmulti with FindEarliestAtLeast (gmaxwell)
#9484 812714f Introduce assumevalid setting to skip validation presumed valid scripts (gmaxwell)
#9511 7884956 Don’t overwrite validation state with corruption check (morcos)
#9765 1e92e04 Harden against mistakes handling invalid blocks (sdaftuar)
#9779 3c02b95 Update nMinimumChainWork and defaultAssumeValid (gmaxwell)
#8524 19b0f33 Precompute sighashes (sipa)
#9791 1825a03 Avoid VLA in hash.h (sipa)
Build system
#8238 6caf3ee ZeroMQ 4.1.5 && ZMQ on Windows (fanquake)
#8520 b40e19c Remove check for openssl/ec.h (laanwj)
#8617 de07fdc Include instructions to extract Mac OS X SDK on Linux using 7zip and SleuthKit (luke-jr)
#8566 7b98895 Easy to use gitian building script (achow101)
#8604 f256843 build,doc: Update for 0.13.0+ and OpenBSD 5.9 (laanwj)
#8640 2663e51 depends: Remove Qt46 package (fanquake)
#8645 8ea4440 Remove unused Qt 4.6 patch (droark)
#8608 7e9ab95 Install manpages via make install, also add some autogenerated manpages (nomnombtc)
#8781 ca69ef4 contrib: delete qt_translations.py (MarcoFalke)
#8783 64dc645 share: remove qt/protobuf.pri (MarcoFalke)
#8423 3166dff depends: expat 2.2.0, ccache 3.3.1, fontconfig 2.12.1 (fanquake)
#8791 b694b0d travis: cross-mac: explicitly enable gui (MarcoFalke)
#8820 dc64141 depends: Fix Qt compilation with Xcode 8 (fanquake)
#8730 489a6ab depends: Add libevent compatibility patch for windows (laanwj)
#8819 c841816 depends: Boost 1.61.0 (fanquake)
#8826 f560d95 Do not include env_win.cc on non-Windows systems (paveljanik)
#8948 e077e00 Reorder Windows gitian build order to match Linux (Michagogo)
#8568 078900d new var DIST_CONTRIB adds useful things for packagers from contrib (nomnombtc)
#9114 21e6c6b depends: Set OSX_MIN_VERSION to 10.8 (fanquake)
#9140 018a4eb Bugfix: Correctly replace generated headers and fail cleanly (luke-jr)
#9156 a8b2a82 Add compile and link options echo to configure (jonasschnelli)
#9393 03d85f6 Include cuckoocache header in Makefile (MarcoFalke)
#9420 bebe369 Fix linker error when configured with –enable-lcov (droark)
#9412 53442af Fix ‘make deploy’ for OSX (jonasschnelli)
#9475 7014506 Let autoconf detect presence of EVP_MD_CTX_new (luke-jr)
#9513 bbf193f Fix qt distdir builds (theuni)
#9471 ca615e6 depends: libevent 2.1.7rc (fanquake)
#9468 f9117f2 depends: Dependency updates for 0.14.0 (fanquake)
#9469 01c4576 depends: Qt 5.7.1 (fanquake)
#9574 5ac6687 depends: Fix QT build on OSX (fanquake)
#9646 720b579 depends: Fix cross build for qt5.7 (theuni)
#9705 6a55515 Add options to override BDB cflags/libs (laanwj)
#8249 4e1567a Enable (and check for) 64-bit ASLR on Windows (laanwj)
#9758 476cc47 Selectively suppress deprecation warnings (jonasschnelli)
#9783 6d61a2b release: bump gitian descriptors for a new 0.14 package cache (theuni)
#9789 749fe95 build: add –enable-werror and warn on vla’s (theuni)
#9831 99fd85c build: force a c++ standard to be specified (theuni)
GUI
#8192 c503863 Remove URLs from About dialog translations (fanquake)
#8540 36404ae Fix random segfault when closing “Choose data directory” dialog (laanwj)
#8517 2468292 Show wallet HD state in statusbar (jonasschnelli)
#8463 62a5a8a Remove Priority from coincontrol dialog (MarcoFalke)
#7579 0606f95 Show network/chain errors in the GUI (jonasschnelli)
#8583 c19f8a4 Show XTHIN in GUI (rebroad)
#7783 4335d5a RPC-Console: support nested commands and simple value queries (jonasschnelli)
#8672 6052d50 Show transaction size in transaction details window (Cocosoft)
#8777 fec6af7 WalletModel: Expose disablewallet (MarcoFalke)
#8371 24f72e9 Add out-of-sync modal info layer (jonasschnelli)
#8885 b2fec4e Fix ban from qt console (theuni)
#8821 bf8e68a sync-overlay: Don’t block during reindex (MarcoFalke)
#8906 088d1f4 sync-overlay: Don’t show progress twice (MarcoFalke)
#8918 47ace42 Add “Copy URI” to payment request context menu (luke-jr)
#8925 f628d9a Display minimum ping in debug window (rebroad)
#8774 3e942a7 Qt refactors to better abstract wallet access (luke-jr)
#8985 7b1bfa3 Use pindexBestHeader instead of setBlockIndexCandidates for NotifyHeaderTip() (jonasschnelli)
#8989 d2143dc Overhaul smart-fee slider, adjust default confirmation target (jonasschnelli)
#9043 273bde3 Return useful error message on ATMP failure (MarcoFalke)
#9088 4e57824 Reduce ambiguity of warning message (rebroad)
#8874 e984730 Multiple Selection for peer and ban tables (achow101)
#9145 924745d Make network disabled icon 50% opaque (MarcoFalke)
#9130 ac489b2 Mention the new network toggle functionality in the tooltip (paveljanik)
#9218 4d955fc Show progress overlay when clicking spinner icon (laanwj)
#9280 e15660c Show ModalOverlay by pressing the progress bar, allow hiding (jonasschnelli)
#9296 fde7d99 Fix missed change to WalletTx structure (morcos)
#9266 2044e37 Bugfix: Qt/RPCConsole: Put column enum in the right places (luke-jr)
#9255 9851a84 layoutAboutToChange signal is called layoutAboutToBeChanged (laanwj)
#9330 47e6a19 Console: add security warning (jonasschnelli)
#9329 db45ad8 Console: allow empty arguments (jonasschnelli)
#8877 6dc4c43 Qt RPC console: history sensitive-data filter, and saving input line when browsing history (luke-jr)
#9462 649cf5f Do not translate tilde character (MarcoFalke)
#9457 123ea73 Select more files for translation (MarcoFalke)
#9413 fd7d8c7 CoinControl: Allow non-wallet owned change addresses (jonasschnelli)
#9461 b250686 Improve progress display during headers-sync and peer-finding (jonasschnelli)
#9588 5086452 Use nPowTargetSpacing constant (MarcoFalke)
#9637 d9e4d1d Fix transaction details output-index to reflect vout index (jonasschnelli)
#9718 36f9d3a Qt/Intro: Various fixes (luke-jr)
#9735 ec66d06 devtools: Handle Qt formatting characters edge-case in update-translations.py (laanwj)
#9755 a441db0 Bugfix: Qt/Options: Restore persistent “restart required” notice (luke-jr)
#9817 7d75a5a Fix segfault crash when shutdown the GUI in disablewallet mode (jonasschnelli)
Wallet
#8152 b9c1cd8 Remove CWalletDB* parameter from CWallet::AddToWallet (pstratem)
#8432 c7e05b3 Make CWallet::fFileBacked private (pstratem)
#8445 f916700 Move CWallet::setKeyPool to private section of CWallet (pstratem)
#8564 0168019 Remove unused code/conditions in ReadAtCursor (jonasschnelli)
#8601 37ac678 Add option to opt into full-RBF when sending funds (rebase, original by petertodd) (laanwj)
#8494 a5b20ed init, wallet: ParameterInteraction() iff wallet enabled (MarcoFalke)
#8760 02ac669 init: Get rid of some ENABLE_WALLET (MarcoFalke)
#8696 a1f8d3e Wallet: Remove last external reference to CWalletDB (pstratem)
#8768 886e8c9 init: Get rid of fDisableWallet (MarcoFalke)
#8486 ab0b411 Add high transaction fee warnings (MarcoFalke)
#8851 940748b Move key derivation logic from GenerateNewKey to DeriveNewChildKey (pstratem)
#8287 e10af96 Set fLimitFree = true (MarcoFalke)
#8928 c587577 Fix init segfault where InitLoadWallet() calls ATMP before genesis (TheBlueMatt)
#7551 f2d7056 Add importmulti RPC call (pedrobranco)
#9016 0dcb888 Return useful error message on ATMP failure (instagibbs)
#8753 f8723d2 Locked memory manager (laanwj)
#8828 a4fd8df Move CWalletDB::ReorderTransactions to CWallet (pstratem)
#8977 6a1343f Refactor wallet/init interaction (Reaccept wtx, flush thread) (jonasschnelli)
#9036 ed0cc50 Change default confirm target from 2 to 6 (laanwj)
#9071 d1871da Declare wallet.h functions inline (sipa)
#9132 f54e460 Make strWalletFile const (jonasschnelli)
#9141 5ea5e04 Remove unnecessary calls to CheckFinalTx (jonasschnelli)
#9165 c01f16a SendMoney: use already-calculated balance (instagibbs)
#9311 a336d13 Flush wallet after abandontransaction (morcos)
#8717 38e4887 Addition of ImmatureCreditCached to MarkDirty() (spencerlievens)
#9446 510c0d9 SetMerkleBranch: remove unused code, remove cs_main lock requirement (jonasschnelli)
#8776 2a524b8 Wallet refactoring leading up to multiwallet (luke-jr)
#9465 a7d55c9 Do not perform ECDSA signing in the fee calculation inner loop (gmaxwell)
#9404 12e3112 Smarter coordination of change and fee in CreateTransaction (morcos)
#9377 fb75cd0 fundrawtransaction: Keep change-output keys by default, make it optional (jonasschnelli)
#9578 923dc44 Add missing mempool lock for CalculateMemPoolAncestors (TheBlueMatt)
#9227 02464da Make nWalletDBUpdated atomic to avoid a potential race (pstratem)
#9764 f8af89a Prevent “overrides a member function but is not marked ‘override’” warnings (laanwj)
#9771 e43a585 Add missing cs_wallet lock that triggers new lock held assertion (ryanofsky)
#9316 3097ea4 Disable free transactions when relay is disabled (MarcoFalke)
#9615 d2c9e4d Wallet incremental fee (morcos)
#9760 40c754c Remove importmulti always-true check (ryanofsky)
Tests and QA
#8270 6e5e5ab Tests: Use portable #! in python scripts (/usr/bin/env) (ChoHag)
#8534,#8504 Remove java comparison tool (laanwj,MarcoFalke)
#8482 740cff5 Use single cache dir for chains (MarcoFalke)
#8450 21857d2 Replace rpc_wallet_tests.cpp with python RPC unit tests (pstratem)
#8671 ddc3080 Minimal fix to slow prevector tests as stopgap measure (JeremyRubin)
#8680 666eaf0 Address Travis spurious failures (theuni)
#8789 e31a43c pull-tester: Only print output when failed (MarcoFalke)
#8810 14e8f99 tests: Add exception error message for JSONRPCException (laanwj)
#8830 ef0801b test: Add option to run bitcoin-util-test.py manually (jnewbery)
#8881 e66cc1d Add some verbose logging to bitcoin-util-test.py (jnewbery)
#8922 0329511 Send segwit-encoded blocktxn messages in p2p-compactblocks (TheBlueMatt)
#8873 74dc388 Add microbenchmarks to profile more code paths (ryanofsky)
#9032 6a8be7b test: Add format-dependent comparison to bctest (laanwj)
#9023 774db92 Add logging to bitcoin-util-test.py (jnewbery)
#9065 c9bdf9a Merge doc/unit-tests.md into src/test/README.md (laanwj)
#9069 ed64bce Clean up bctest.py and bitcoin-util-test.py (jnewbery)
#9095 b8f43e3 test: Fix test_random includes (MarcoFalke)
#8894 faec09b Testing: Include fRelay in mininode version messages (jnewbery)
#9097 e536499 Rework sync_* and preciousblock.py (MarcoFalke)
#9049 71bc39e Remove duplicatable duplicate-input check from CheckTransaction (TheBlueMatt)
#9136 b422913 sync_blocks cleanup (ryanofsky)
#9151 4333b1c proxy_test: Calculate hardcoded port numbers (MarcoFalke)
#9206 e662d28 Make test constant consistent with consensus.h (btcdrak)
#9139 0de7fd3 Change sync_blocks to pick smarter maxheight (on top of #9196) (ryanofsky)
#9100 97ec6e5 tx_valid: re-order inputs to how they are encoded (dcousens)
#9202 e56cf67 bench: Add support for measuring CPU cycles (laanwj)
#9223 5412c08 unification of Bloom filter representation (s-matthew-english)
#9257 d7ba4a2 Dump debug logs on travis failures (sdaftuar)
#9221 9e4bb31 Get rid of duplicate code (MarcoFalke)
#9274 919db03 Use cached utxo set to fix performance regression (MarcoFalke)
#9276 ea33f19 Some minor testing cleanups (morcos)
#9291 8601784 Remove mapOrphanTransactionsByPrev from DoS_tests (sipa)
#9309 76fcd9d Wallet needs to stay unlocked for whole test (morcos)
#9172 5bc209c Resurrect pstratem’s “Simple fuzzing framework” (laanwj)
#9331 c6fd923 Add test for rescan feature of wallet key import RPCs (ryanofsky)
#9354 b416095 Make fuzzer actually test CTxOutCompressor (sipa)
#9390,#9416 travis: make distdir (MarcoFalke)
#9308 0698639 test: Add CCoinsViewCache Access/Modify/Write tests (ryanofsky)
#9406 0f921e6 Re-enable a blank v1 Tx JSON test (droark)
#9435 dbc8a8c Removed unused variable in test, fixing warning (ryanofsky)
#9436 dce853e test: Include tx data in EXTRA_DIST (MarcoFalke)
#9525 02e5308 test: Include tx data in EXTRA_DIST (MarcoFalke)
#9498 054d664 Basic CCheckQueue Benchmarks (JeremyRubin)
#9554 0b96abc test: Avoid potential NULL pointer dereference in addrman_tests.cpp (practicalswift)
#9628 f895023 Increase a sync_blocks timeout in pruning.py (sdaftuar)
#9638 a7ea2f8 Actually test assertions in pruning.py (MarcoFalke)
#9647 e99f0d7 Skip RAII event tests if libevent is built without event_set_mem_functions (luke-jr)
#9691 fc67cd2 Init ECC context for test_bitcoin_fuzzy (gmaxwell)
#9712 d304fef bench: Fix initialization order in registration (laanwj)
#9707 b860915 Fix RPC failure testing (jnewbery)
#9269 43e8150 Align struct COrphan definition (sipa)
#9820 599c69a Fix pruning test broken by 2 hour manual prune window (ryanofsky)
#9824 260c71c qa: Check return code when stopping nodes (MarcoFalke)
#9875 50953c2 tests: Fix dangling pwalletMain pointer in wallet tests (laanwj)
#9839 eddaa6b [qa] Make import-rescan.py watchonly check reliable (ryanofsky)
Documentation
#8332 806b9e7 Clarify witness branches in transaction.h serialization (dcousens)
#8935 0306978 Documentation: Building on Windows with WSL (pooleja)
#9144 c98f6b3 Correct waitforblockheight example help text (fanquake)
#9407 041331e Added missing colons in when running help command (anditto)
#9378 870cd2b Add documentation for CWalletTx::fFromMe member (ryanofsky)
#9297 0b73807 Various RPC help outputs updated (Mirobit)
#9613 07421cf Clarify getbalance help string to explain interaction with bumpfee (ryanofsky)
#9663 e30d928 Clarify listunspent amount description (instagibbs)
#9396 d65a13b Updated listsinceblock rpc documentation (accraze)
#8747 ce43630 rpc: Fix transaction size comments and RPC help text (jnewbery)
#8058 bbd9740 Doc: Add issue template (AmirAbrams)
#8567 85d4e21 Add default port numbers to REST doc (djpnewton)
#8624 89de153 build: Mention curl (MarcoFalke)
#8786 9da7366 Mandatory copyright agreement (achow101)
#8823 7b05af6 Add privacy recommendation when running hidden service (laanwj)
#9433 caa2f10 Update the Windows build notes (droark)
#8879 f928050 Rework docs (MarcoFalke)
#8887 61d191f Improve GitHub issue template (fanquake)
#8787 279bbad Add missing autogen to example builds (AmirAbrams)
#8892 d270c30 Add build instructions for FreeBSD (laanwj)
#8890 c71a654 Update Doxygen configuration file (fanquake)
#9207 fa1f944 Move comments above bash command in build-unix (AmirAbrams)
#9219 c4522e7 Improve windows build instructions using Linux subsystem (laanwj)
#8954 932d02a contrib: Add README for pgp keys (MarcoFalke)
#9093 2fae5b9 release-process: Mention GitHub release and archived release notes (MarcoFalke)
#8743 bae178f Remove old manpages from contrib/debian in favour of doc/man (fanquake)
#9550 4105cb6 Trim down the XP notice and say more about what we support (gmaxwell)
#9246 9851498 Developer docs about existing subtrees (gmaxwell)
#9401 c2ea1e6 Make rpcauth help message clearer, add example in example .conf (instagibbs)
#9022,#9033 Document dropping OS X 10.7 support (fanquake, MarcoFalke)
#8771 bc9e3ab contributing: Mention not to open several pulls (luke-jr)
#8852 7b784cc Mention Gitian building script in doc (Laudaa) (laanwj)
#8915 03dd707 Add copyright/patent issues to possible NACK reasons (petertodd)
#8965 23e03f8 Mention that PPA doesn’t support Debian (anduck)
#9115 bfc7aad Mention reporting security issues responsibly (paveljanik)
#9840 08e0690 Update sendfrom RPC help to correct coin selection misconception (ryanofsky)
#9865 289204f Change bitcoin address in RPC help message (marijnfs)
Miscellaneous
#8274 7a2d402 util: Update tinyformat (laanwj)
#8291 5cac8b1 util: CopyrightHolders: Check for untranslated substitution (MarcoFalke)
#8557 44691f3 contrib: Rework verifybinaries (MarcoFalke)
#8621 e8ed6eb contrib: python: Don’t use shell=True (MarcoFalke)
#8813 fb24d7e bitcoind: Daemonize using daemon(3) (laanwj)
#9004 67728a3 Clarify listenonion (unsystemizer)
#8674 bae81b8 tools for analyzing, updating and adding copyright headers in source files (isle2983)
#8976 8c6218a libconsensus: Add input validation of flags (laanwj)
#9112 46027e8 Avoid ugly exception in log on unknown inv type (laanwj)
#8837 2108911 Allow bitcoin-tx to parse partial transactions (jnewbery)
#9204 74ced54 Clarify CreateTransaction error messages (instagibbs)
#9265 31bcc66 bitcoin-cli: Make error message less confusing (laanwj)
#9303 72bf1b3 Update comments in ctaes (sipa)
#9417 c4b7d4f Do not evaluate hidden LogPrint arguments (sipa)
#9506 593a00c RFC: Improve style for if indentation (sipa)
#8883 d5d4ad8 Add all standard TXO types to bitcoin-tx (jnewbery)
#9531 23281a4 Release notes for estimation changes (morcos)
#9486 f62bc10 Make peer=%d log prints consistent (TheBlueMatt)
#9552 41cb05c Add IPv6 support to qos.sh (jamesmacwhite)
#9542 e9e7993 Docs: Update CONTRIBUTING.md (jnewbery)
#9649 53ab12d Remove unused clang format dev script (MarcoFalke)
#9625 77bd8c4 Increase minimum debug.log size to 10MB after shrink (morcos)
#9070 7b22e50 Lockedpool fixes (kazcw)
#8779 7008e28 contrib: Delete spendfrom (MarcoFalke)
#9587,#8793,#9496,#8191,#8109,#8655,#8472,#8677,#8981,#9124 Avoid shadowing of variables (paveljanik)
#9063 f2a6e82 Use deprecated MAP_ANON if MAP_ANONYMOUS is not defined (paveljanik)
#9060 1107653 Fix bloom filter init to isEmpty = true (robmcl4)
#8613 613bda4 LevelDB 1.19 (sipa)
#9225 5488514 Fix some benign races (TheBlueMatt)
#8736 5fa7b07 base58: Improve DecodeBase58 performance (wjx)
#9039 e81df49 Various serialization simplifcations and optimizations (sipa)
#9010 a143b88 Split up AppInit2 into multiple phases, daemonize after datadir lock errors (laanwj)
#9230 c79e52a Fix some benign races in timestamp logging (TheBlueMatt)
#9183,#9260 Mrs Peacock in The Library with The Candlestick (killed main.{h,cpp}) (TheBlueMatt)
#9236 7f72568 Fix races for strMiscWarning and fLargeWork*Found, make QT runawayException use GetWarnings (gmaxwell)
#9243 7aa7004 Clean up mapArgs and mapMultiArgs Usage (TheBlueMatt)
#9387 cfe41d7 RAII of libevent stuff using unique ptrs with deleters (kallewoof)
#9472 fac0f30 Disentangle progress estimation from checkpoints and update it (sipa)
#9512 6012967 Fix various things -fsanitize complains about (sipa)
#9373,#9580 Various linearization script issues (droark)
#9674 dd163f5 Lock debugging: Always enforce strict lock ordering (try or not) (TheBlueMatt)
#8453,#9334 Update to latest libsecp256k1 (laanwj,sipa)
#9656 7c93952 Check verify-commits on pushes to master (TheBlueMatt)
#9679 a351162 Access WorkQueue::running only within the cs lock (TheBlueMatt)
#9777 8dee822 Handle unusual maxsigcachesize gracefully (jnewbery)
#8863,#8807 univalue: Pull subtree (MarcoFalke)
#9798 e22c067 Fix Issue #9775 (Check returned value of fopen) (kirit93)
#9856 69832aa Terminate immediately when allocation fails (theuni)
Credits
Thanks to everyone who directly contributed to this release:

accraze
adlawren
Alex Morcos
Alexey Vesnin
Amir Abrams
Anders Øyvind Urke-Sætre
Anditto Heristyo
Andrew Chow
anduck
Anthony Towns
Brian Deery
BtcDrak
Chris Moore
Chris Stewart
Christian Barcenas
Christian Decker
Cory Fields
crowning-
CryptAxe
CryptoVote
Dagur Valberg Johannsson
Daniel Cousens
Daniel Kraft
Derek Miller
djpnewton
Don Patterson
Doug
Douglas Roark
Ethan Heilman
fsb4000
Gaurav Rana
Geoffrey Tsui
Greg Walker
Gregory Maxwell
Gregory Sanders
Hampus Sjöberg
isle2983
Ivo van der Sangen
James White
Jameson Lopp
Jeremy Rubin
Jiaxing Wang
jnewbery
John Newbery
Johnson Lau
Jon Lund Steffensen
Jonas Schnelli
jonnynewbs
Jorge Timón
Justin Camarena
Karl-Johan Alm
Kaz Wesley
kirit93
Koki Takahashi
Lauda
leijurv
lizhi
Luke Dashjr
maiiz
MarcoFalke
Marijn Stollenga
Marty Jones
Masahiko Hyuga
Matt Corallo
Matthew King
matthias
Micha
Michael Ford
Michael Rotarius
Mitchell Cash
mrbandrews
mruddy
Nicolas DORIER
nomnombtc
Patrick Strateman
Pavel Janík
Pedro Branco
Peter Todd
Pieter Wuille
poole_party
practicalswift
R E Broadley
randy-waterhouse
Richard Kiss
Robert McLaughlin
rodasmith
Russell Yanofsky
S. Matthew English
Sev
Spencer Lievens
Stanislas Marion
Steven
Suhas Daftuar
Thomas Snider
UdjinM6
unsystemizer
whythat
Will Binns
Wladimir J. van der Laan
wodry
Zak Wilcox
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.14.1 released
22 April 2017

Compatibility
Notable changes
0.14.1 Change log
- {:.}
RPC and other APIs
- {:.}
Block and transaction handling
- {:.}
P2P protocol and network code
- {:.}
Build system
- {:.}
GUI
- {:.}
Mining
- {:.}
Tests and QA
- {:.}
Miscellaneous
Credits
Bitcoin Core version 0.14.1 is not available for security reasons:

https://bitcoin.org/bin/bitcoin-core-0.14.1/

This is a new minor version release, including various bugfixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

Compatibility
Bitcoin Core is extensively tested on multiple operating systems using the Linux kernel, macOS 10.8+, and Windows Vista and later.

Microsoft ended support for Windows XP on April 8th, 2014, No attempt is made to prevent installing or running the software on Windows XP, you can still do so at your own risk but be aware that there are known instabilities and issues. Please do not report issues about Windows XP to the issue tracker.

Bitcoin Core should also work on most other Unix-like systems but is not frequently tested on them.

Notable changes
RPC changes
The first positional argument of createrawtransaction was renamed from transactions to inputs.

The argument of disconnectnode was renamed from node to address.

These interface changes break compatibility with 0.14.0, when the named arguments functionality, introduced in 0.14.0, is used. Client software using these calls with named arguments needs to be updated.

Mining
In previous versions, getblocktemplate required segwit support from downstream clients/miners once the feature activated on the network. In this version, it now supports non-segwit clients even after activation, by removing all segwit transactions from the returned block template. This allows non-segwit miners to continue functioning correctly even after segwit has activated.

Due to the limitations in previous versions, getblocktemplate also recommended non-segwit clients to not signal for the segwit version-bit. Since this is no longer an issue, getblocktemplate now always recommends signalling segwit for all miners. This is safe because ability to enforce the rule is the only required criteria for safe activation, not actually producing segwit-enabled blocks.

UTXO memory accounting
Memory usage for the UTXO cache is being calculated more accurately, so that the configured limit (-dbcache) will be respected when memory usage peaks during cache flushes. The memory accounting in prior releases is estimated to only account for half the actual peak utilization.

The default -dbcache has also been changed in this release to 450MiB. Users who currently set -dbcache to a high value (e.g. to keep the UTXO more fully cached in memory) should consider increasing this setting in order to achieve the same cache performance as prior releases. Users on low-memory systems (such as systems with 1GB or less) should consider specifying a lower value for this parameter.

Additional information relating to running on low-memory systems can be found here: reducing-bitcoind-memory-usage.md.

0.14.1 Change log
Detailed release notes follow. This overview includes changes that affect behavior, not code moves, refactors and string updates. For convenience in locating the code changes and accompanying discussion, both the pull request and git merge commit are mentioned.

RPC and other APIs
#10084 142fbb2 Rename first named arg of createrawtransaction (MarcoFalke)
#10139 f15268d Remove auth cookie on shutdown (practicalswift)
#10146 2fea10a Better error handling for submitblock (rawodb, gmaxwell)
#10144 d947afc Prioritisetransaction wasn’t always updating ancestor fee (sdaftuar)
#10204 3c79602 Rename disconnectnode argument (jnewbery)
Block and transaction handling
#10126 0b5e162 Compensate for memory peak at flush time (sipa)
#9912 fc3d7db Optimize GetWitnessHash() for non-segwit transactions (sdaftuar)
#10133 ab864d3 Clean up calculations of pcoinsTip memory usage (morcos)
P2P protocol and network code
#9953/#10013 d2548a4 Fix shutdown hang with >= 8 -addnodes set (TheBlueMatt)
#10176 30fa231 net: gracefully handle NodeId wrapping (theuni)
Build system
#9973 e9611d1 depends: fix zlib build on osx (theuni)
GUI
#10060 ddc2dd1 Ensure an item exists on the rpcconsole stack before adding (achow101)
Mining
#9955/#10006 569596c Don’t require segwit in getblocktemplate for segwit signalling or mining (sdaftuar)
#9959/#10127 b5c3440 Prevent slowdown in CreateNewBlock on large mempools (sdaftuar)
Tests and QA
#10157 55f641c Fix the mempool_packages.py test (sdaftuar)
Miscellaneous
#10037 4d8e660 Trivial: Fix typo in help getrawtransaction RPC (keystrike)
#10120 e4c9a90 util: Work around (virtual) memory exhaustion on 32-bit w/ glibc (laanwj)
#10130 ecc5232 bitcoin-tx input verification (awemany, jnewbery)
Credits
Thanks to everyone who directly contributed to this release:

Alex Morcos
Andrew Chow
Awemany
Cory Fields
Gregory Maxwell
James Evans
John Newbery
MarcoFalke
Matt Corallo
Pieter Wuille
practicalswift
rawodb
Suhas Daftuar
Wladimir J. van der Laan
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.14.2 released
17 June 2017

Compatibility
Notable changes
Known Bugs
0.14.2 Change log
- {:.}
RPC and other APIs
- {:.}
P2P protocol and network code
- {:.}
Build system
- {:.}
Miscellaneous
- {:.}
GUI
- {:.}
Wallet
Credits
Bitcoin Core version 0.14.2 is not available for security reasons:

https://bitcoin.org/bin/bitcoin-core-0.14.2/

This is a new minor version release, including various bugfixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

Compatibility
Bitcoin Core is extensively tested on multiple operating systems using the Linux kernel, macOS 10.8+, and Windows Vista and later.

Microsoft ended support for Windows XP on April 8th, 2014, No attempt is made to prevent installing or running the software on Windows XP, you can still do so at your own risk but be aware that there are known instabilities and issues. Please do not report issues about Windows XP to the issue tracker.

Bitcoin Core should also work on most other Unix-like systems but is not frequently tested on them.

Notable changes
miniupnp CVE-2017-8798
Bundled miniupnpc was updated to 2.0.20170509. This fixes an integer signedness error (present in MiniUPnPc v1.4.20101221 through v2.0) that allows remote attackers (within the LAN) to cause a denial of service or possibly have unspecified other impact.

This only affects users that have explicitly enabled UPnP through the GUI setting or through the -upnp option, as since the last UPnP vulnerability (in Bitcoin Core 0.10.3) it has been disabled by default.

If you use this option, it is recommended to upgrade to this version as soon as possible.

Known Bugs
Since 0.14.0 the approximate transaction fee shown in Bitcoin-Qt when using coin control and smart fee estimation does not reflect any change in target from the smart fee slider. It will only present an approximate fee calculated using the default target. The fee calculated using the correct target is still applied to the transaction and shown in the final send confirmation dialog.

0.14.2 Change log
Detailed release notes follow. This overview includes changes that affect behavior, not code moves, refactors and string updates. For convenience in locating the code changes and accompanying discussion, both the pull request and git merge commit are mentioned.

RPC and other APIs
#10410 321419b Fix importwallet edge case rescan bug (ryanofsky)
P2P protocol and network code
#10424 37a8fc5 Populate services in GetLocalAddress (morcos)
#10441 9e3ad50 Only enforce expected services for half of outgoing connections (theuni)
Build system
#10414 ffb0c4b miniupnpc 2.0.20170509 (fanquake)
#10228 ae479bc Regenerate bitcoin-config.h as necessary (theuni)
Miscellaneous
#10245 44a17f2 Minor fix in build documentation for FreeBSD 11 (shigeya)
#10215 0aee4a1 Check interruptNet during dnsseed lookups (TheBlueMatt)
GUI
#10231 1e936d7 Reduce a significant cs_main lock freeze (jonasschnelli)
Wallet
#10294 1847642 Unset change position when there is no change (instagibbs)
Credits
Thanks to everyone who directly contributed to this release:

Alex Morcos
Cory Fields
fanquake
Gregory Sanders
Jonas Schnelli
Matt Corallo
Russell Yanofsky
Shigeya Suzuki
Wladimir J. van der Laan
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.15.0 released
14 September 2017

How to Upgrade
Compatibility
Notes for 0.15.0
Notable changes
0.15.0 Change log
- {:.}
RPC and other APIs
- {:.}
Block and transaction handling
- {:.}
P2P protocol and network code
- {:.}
Validation
- {:.}
Build system
- {:.}
GUI
- {:.}
Wallet
- {:.}
Tests and QA
- {:.}
Miscellaneous
Credits
Bitcoin Core version 0.15.0 is not available for security reasons:

https://bitcoin.org/bin/bitcoin-core-0.15.0/

and

https://bitcoincore.org/bin/bitcoin-core-0.15.0/

This is a new major version release, including new features, various bugfixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

The first time you run version 0.15.0, your chainstate database will be converted to a new format, which will take anywhere from a few minutes to half an hour, depending on the speed of your machine.

The file format of fee_estimates.dat changed in version 0.15.0. Hence, a downgrade from version 0.15.0 or upgrade to version 0.15.0 will cause all fee estimates to be discarded.

Note that the block database format also changed in version 0.8.0 and there is no automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading directly from 0.7.x and earlier without redownloading the blockchain is not supported. However, as usual, old wallet versions are still supported.

Downgrading warning
The chainstate database for this release is not compatible with previous releases, so if you run 0.15 and then decide to switch back to any older version, you will need to run the old release with the -reindex-chainstate option to rebuild the chainstate data structures in the old format.

If your node has pruning enabled, this will entail re-downloading and processing the entire blockchain.

Compatibility
Bitcoin Core is extensively tested on multiple operating systems using the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.

Bitcoin Core should also work on most other Unix-like systems but is not frequently tested on them.

Notes for 0.15.0
Current SegWit support
Version 0.15.0 supports adding a segregated witness address via the addwitnessaddress RPC, but please note that this is a testing/expert RPC, which does not guarantee recovery from backup. Only use this RPC if you know what you are doing. More complete wallet support for segregated witness is coming in a next version.

Rescanning with encrypted wallets
As in previous versions, when using an encrypted HD wallet, the keypool cannot be topped up without unlocking the wallet. This means that currently, in order to recover from a backup of an encrypted HD wallet, the user must unlock the wallet with a really long timeout and manually trigger a rescan, otherwise they risk missing some keys when auto-topup cannot run. Unfortunately there is no rescan RPC in this version, that will be included in a future version, so for now a rescan can be triggered using one of the import* commands, using a dummy address generated by another (trusted) wallet.

Notable changes
Performance Improvements
Version 0.15 contains a number of significant performance improvements, which make Initial Block Download, startup, transaction and block validation much faster:

The chainstate database (which is used for tracking UTXOs) has been changed from a per-transaction model to a per-output model (See PR 10195). Advantages of this model are that it:
avoids the CPU overhead of deserializing and serializing the unused outputs;
has more predictable memory usage;
uses simpler code;
is adaptable to various future cache flushing strategies.
As a result, validating the blockchain during Initial Block Download (IBD) and reindex is ~30-40% faster, uses 10-20% less memory, and flushes to disk far less frequently. The only downside is that the on-disk database is 15% larger. During the conversion from the previous format a few extra gigabytes may be used.

Earlier versions experienced a spike in memory usage while flushing UTXO updates to disk. As a result, only half of the available memory was actually used as cache, and the other half was reserved to accommodate flushing. This is no longer the case (See PR 10148), and the entirety of the available cache (see -dbcache) is now actually used as cache. This reduces the flushing frequency by a factor 2 or more.
In previous versions, signature validation for transactions has been cached when the transaction is accepted to the mempool. Version 0.15 extends this to cache the entire script validity (See PR 10192). This means that if a transaction in a block has already been accepted to the mempool, the scriptSig does not need to be re-evaluated. Empirical tests show that this results in new block validation being 40-50% faster.
LevelDB has been upgraded to version 1.20 (See PR 10544). This version contains hardware acceleration for CRC on architectures supporting SSE 4.2. As a result, synchronization and block validation are now faster.
SHA256 hashing has been optimized for architectures supporting SSE 4 (See PR 10821). SHA256 is around 50% faster on supported hardware, which results in around 5% faster IBD and block validation. In version 0.15, SHA256 hardware optimization is disabled in release builds by default, but can be enabled by using --enable-experimental-asm when building.
Refill of the keypool no longer flushes the wallet between each key which resulted in a ~20x speedup in creating a new wallet. Part of this speedup was used to increase the default keypool to 1000 keys to make recovery more robust. (See PR 10831).
Fee Estimation Improvements
Fee estimation has been significantly improved in version 0.15, with more accurate fee estimates used by the wallet and a wider range of options for advanced users of the estimatesmartfee and estimaterawfee RPCs (See PR 10199).

Changes to internal logic and wallet behavior
Internally, estimates are now tracked on 3 different time horizons. This allows for longer targets and means estimates adjust more quickly to changes in conditions.
Estimates can now be conservative or economical. Conservative estimates use longer time horizons to produce an estimate which is less susceptible to rapid changes in fee conditions. Economical estimates use shorter time horizons and will be more affected by short-term changes in fee conditions. Economical estimates may be considerably lower during periods of low transaction activity (for example over weekends), but may result in transactions being unconfirmed if prevailing fees increase rapidly.
By default, the wallet will use conservative fee estimates to increase the reliability of transactions being confirmed within the desired target. For transactions that are marked as replaceable, the wallet will use an economical estimate by default, since the fee can be ‘bumped’ if the fee conditions change rapidly (See PR 10589).
Estimates can now be made for confirmation targets up to 1008 blocks (one week).
More data on historical fee rates is stored, leading to more precise fee estimates.
Transactions which leave the mempool due to eviction or other non-confirmed reasons are now taken into account by the fee estimation logic, leading to more accurate fee estimates.
The fee estimation logic will make sure enough data has been gathered to return a meaningful estimate. If there is insufficient data, a fallback default fee is used.
Changes to fee estimate RPCs
The estimatefee RPC is now deprecated in favor of using only estimatesmartfee (which is the implementation used by the GUI)
The estimatesmartfee RPC interface has been changed (See PR 10707):
The nblocks argument has been renamed to conf_target (to be consistent with other RPC methods).
An estimate_mode argument has been added. This argument takes one of the following strings: CONSERVATIVE, ECONOMICAL or UNSET (which defaults to CONSERVATIVE).
The RPC return object now contains an errors member, which returns errors encountered during processing.
If Bitcoin Core has not been running for long enough and has not seen enough blocks or transactions to produce an accurate fee estimation, an error will be returned (previously a value of -1 was used to indicate an error, which could be confused for a feerate).
A new estimaterawfee RPC is added to provide raw fee data. External clients can query and use this data in their own fee estimation logic.
Multi-wallet support
Bitcoin Core now supports loading multiple, separate wallets (See PR 8694, PR 10849). The wallets are completely separated, with individual balances, keys and received transactions.

Multi-wallet is enabled by using more than one -wallet argument when starting Bitcoin, either on the command line or in the Bitcoin config file.

In Bitcoin-Qt, only the first wallet will be displayed and accessible for creating and signing transactions. GUI selectable multiple wallets will be supported in a future version. However, even in 0.15 other loaded wallets will remain synchronized to the node’s current tip in the background. This can be useful if running a pruned node, since loading a wallet where the most recent sync is beyond the pruned height results in having to download and revalidate the whole blockchain. Continuing to synchronize all wallets in the background avoids this problem.

Bitcoin Core 0.15.0 contains the following changes to the RPC interface and bitcoin-cli for multi-wallet:

When running Bitcoin Core with a single wallet, there are no changes to the RPC interface or bitcoin-cli. All RPC calls and bitcoin-cli commands continue to work as before.
When running Bitcoin Core with multi-wallet, all node-level RPC methods continue to work as before. HTTP RPC requests should be send to the normal <RPC IP address>:<RPC port>/ endpoint, and bitcoin-cli commands should be run as before. A node-level RPC method is any method which does not require access to the wallet.
When running Bitcoin Core with multi-wallet, wallet-level RPC methods must specify the wallet for which they’re intended in every request. HTTP RPC requests should be send to the <RPC IP address>:<RPC port>/wallet/<wallet name>/ endpoint, for example 127.0.0.1:8332/wallet/wallet1.dat/. bitcoin-cli commands should be run with a -rpcwallet option, for example bitcoin-cli -rpcwallet=wallet1.dat getbalance.
A new node-level listwallets RPC method is added to display which wallets are currently loaded. The names returned by this method are the same as those used in the HTTP endpoint and for the rpcwallet argument.
Note that while multi-wallet is now fully supported, the RPC multi-wallet interface should be considered unstable for version 0.15.0, and there may backwards-incompatible changes in future versions.

Replace-by-fee control in the GUI
Bitcoin Core has supported creating opt-in replace-by-fee (RBF) transactions since version 0.12.0, and since version 0.14.0 has included a bumpfee RPC method to replace unconfirmed opt-in RBF transactions with a new transaction that pays a higher fee.

In version 0.15, creating an opt-in RBF transaction and replacing the unconfirmed transaction with a higher-fee transaction are both supported in the GUI (See PR 9592).

Removal of Coin Age Priority
In previous versions of Bitcoin Core, a portion of each block could be reserved for transactions based on the age and value of UTXOs they spent. This concept (Coin Age Priority) is a policy choice by miners, and there are no consensus rules around the inclusion of Coin Age Priority transactions in blocks. In practice, only a few miners continue to use Coin Age Priority for transaction selection in blocks. Bitcoin Core 0.15 removes all remaining support for Coin Age Priority (See PR 9602). This has the following implications:

The concept of free transactions has been removed. High Coin Age Priority transactions would previously be allowed to be relayed even if they didn’t attach a miner fee. This is no longer possible since there is no concept of Coin Age Priority. The -limitfreerelay and -relaypriority options which controlled relay of free transactions have therefore been removed.
The -sendfreetransactions option has been removed, since almost all miners do not include transactions which do not attach a transaction fee.
The -blockprioritysize option has been removed.
The estimatepriority and estimatesmartpriority RPCs have been removed.
The getmempoolancestors, getmempooldescendants, getmempoolentry and getrawmempool RPCs no longer return startingpriority and currentpriority.
The prioritisetransaction RPC no longer takes a priority_delta argument, which is replaced by a dummy argument for backwards compatibility with clients using positional arguments. The RPC is still used to change the apparent fee-rate of the transaction by using the fee_delta argument.
-minrelaytxfee can now be set to 0. If minrelaytxfee is set, then fees smaller than minrelaytxfee (per kB) are rejected from relaying, mining and transaction creation. This defaults to 1000 satoshi/kB.
The -printpriority option has been updated to only output the fee rate and hash of transactions included in a block by the mining code.
Mempool Persistence Across Restarts
Version 0.14 introduced mempool persistence across restarts (the mempool is saved to a mempool.dat file in the data directory prior to shutdown and restores the mempool when the node is restarted). Version 0.15 allows this feature to be switched on or off using the -persistmempool command-line option (See PR 9966). By default, the option is set to true, and the mempool is saved on shutdown and reloaded on startup. If set to false, the mempool.dat file will not be loaded on startup or saved on shutdown.

New RPC methods
Version 0.15 introduces several new RPC methods:

abortrescan stops current wallet rescan, e.g. when triggered by an importprivkey call (See PR 10208).
combinerawtransaction accepts a JSON array of raw transactions and combines them into a single raw transaction (See PR 10571).
estimaterawfee returns raw fee data so that customized logic can be implemented to analyze the data and calculate estimates. See Fee Estimation Improvements for full details on changes to the fee estimation logic and interface.
getchaintxstats returns statistics about the total number and rate of transactions in the chain (See PR 9733).
listwallets lists wallets which are currently loaded. See the Multi-wallet section of these release notes for full details (See Multi-wallet support).
uptime returns the total runtime of the bitcoind server since its last start (See PR 10400).
Low-level RPC changes
When using Bitcoin Core in multi-wallet mode, RPC requests for wallet methods must specify the wallet that they’re intended for. See Multi-wallet support for full details.

The new database model no longer stores information about transaction versions of unspent outputs (See Performance improvements). This means that:
The gettxout RPC no longer has a version field in the response.
The gettxoutsetinfo RPC reports hash_serialized_2 instead of hash_serialized, which does not commit to the transaction versions of unspent outputs, but does commit to the height and coinbase information.
The getutxos REST path no longer reports the txvers field in JSON format, and always reports 0 for transaction versions in the binary format
The estimatefee RPC is deprecated. Clients should switch to using the estimatesmartfee RPC, which returns better fee estimates. See Fee Estimation Improvements for full details on changes to the fee estimation logic and interface.

The gettxoutsetinfo response now contains disk_size and bogosize instead of bytes_serialized. The first is a more accurate estimate of actual disk usage, but is not deterministic. The second is unrelated to disk usage, but is a database-independent metric of UTXO set size: it counts every UTXO entry as 50 + the length of its scriptPubKey (See PR 10426).

signrawtransaction can no longer be used to combine multiple transactions into a single transaction. Instead, use the new combinerawtransaction RPC (See PR 10571).

fundrawtransaction no longer accepts a reserveChangeKey option. This option used to allow RPC users to fund a raw transaction using an key from the keypool for the change address without removing it from the available keys in the keypool. The key could then be re-used for a getnewaddress call, which could potentially result in confusing or dangerous behaviour (See PR 10784).

estimatepriority and estimatesmartpriority have been removed. See Removal of Coin Age Priority.

The listunspent RPC now takes a query_options argument (see PR 8952), which is a JSON object containing one or more of the following members:
minimumAmount - a number specifying the minimum value of each UTXO
maximumAmount - a number specifying the maximum value of each UTXO
maximumCount - a number specifying the minimum number of UTXOs
minimumSumAmount - a number specifying the minimum sum value of all UTXOs
The getmempoolancestors, getmempooldescendants, getmempoolentry and getrawmempool RPCs no longer return startingpriority and currentpriority. See Removal of Coin Age Priority.

The dumpwallet RPC now returns the full absolute path to the dumped wallet. It used to return no value, even if successful (See PR 9740).

In the getpeerinfo RPC, the return object for each peer now returns an addrbind member, which contains the ip address and port of the connection to the peer. This is in addition to the addrlocal member which contains the ip address and port of the local node as reported by the peer (See PR 10478).

The disconnectnode RPC can now disconnect a node specified by node ID (as well as by IP address/port). To disconnect a node based on node ID, call the RPC with the new nodeid argument (See PR 10143).

The second argument in prioritisetransaction has been renamed from priority_delta to dummy since Bitcoin Core no longer has a concept of coin age priority. The dummy argument has no functional effect, but is retained for positional argument compatibility. See Removal of Coin Age Priority.

The resendwallettransactions RPC throws an error if the -walletbroadcast option is set to false (See PR 10995).

The second argument in the submitblock RPC argument has been renamed from parameters to dummy. This argument never had any effect, and the renaming is simply to communicate this fact to the user (See PR 10191) (Clients should, however, use positional arguments for submitblock in order to be compatible with BIP 22.)

The verbose argument of getblock has been renamed to verbosity and now takes an integer from 0 to 2. Verbose level 0 is equivalent to verbose=false. Verbose level 1 is equivalent to verbose=true. Verbose level 2 will give the full transaction details of each transaction in the output as given by getrawtransaction. The old behavior of using the verbose named argument and a boolean value is still maintained for compatibility.

Error codes have been updated to be more accurate for the following error cases (See PR 9853):
getblock now returns RPC_MISC_ERROR if the block can’t be found on disk (for example if the block has been pruned). Previously returned RPC_INTERNAL_ERROR.
pruneblockchain now returns RPC_MISC_ERROR if the blocks cannot be pruned because the node is not in pruned mode. Previously returned RPC_METHOD_NOT_FOUND.
pruneblockchain now returns RPC_INVALID_PARAMETER if the blocks cannot be pruned because the supplied timestamp is too late. Previously returned RPC_INTERNAL_ERROR.
pruneblockchain now returns RPC_MISC_ERROR if the blocks cannot be pruned because the blockchain is too short. Previously returned RPC_INTERNAL_ERROR.
setban now returns RPC_CLIENT_INVALID_IP_OR_SUBNET if the supplied IP address or subnet is invalid. Previously returned RPC_CLIENT_NODE_ALREADY_ADDED.
setban now returns RPC_CLIENT_INVALID_IP_OR_SUBNET if the user tries to unban a node that has not previously been banned. Previously returned RPC_MISC_ERROR.
removeprunedfunds now returns RPC_WALLET_ERROR if bitcoind is unable to remove the transaction. Previously returned RPC_INTERNAL_ERROR.
removeprunedfunds now returns RPC_INVALID_PARAMETER if the transaction does not exist in the wallet. Previously returned RPC_INTERNAL_ERROR.
fundrawtransaction now returns RPC_INVALID_ADDRESS_OR_KEY if an invalid change address is provided. Previously returned RPC_INVALID_PARAMETER.
fundrawtransaction now returns RPC_WALLET_ERROR if bitcoind is unable to create the transaction. The error message provides further details. Previously returned RPC_INTERNAL_ERROR.
bumpfee now returns RPC_INVALID_PARAMETER if the provided transaction has descendants in the wallet. Previously returned RPC_MISC_ERROR.
bumpfee now returns RPC_INVALID_PARAMETER if the provided transaction has descendants in the mempool. Previously returned RPC_MISC_ERROR.
bumpfee now returns RPC_WALLET_ERROR if the provided transaction has has been mined or conflicts with a mined transaction. Previously returned RPC_INVALID_ADDRESS_OR_KEY.
bumpfee now returns RPC_WALLET_ERROR if the provided transaction is not BIP 125 replaceable. Previously returned RPC_INVALID_ADDRESS_OR_KEY.
bumpfee now returns RPC_WALLET_ERROR if the provided transaction has already been bumped by a different transaction. Previously returned RPC_INVALID_REQUEST.
bumpfee now returns RPC_WALLET_ERROR if the provided transaction contains inputs which don’t belong to this wallet. Previously returned RPC_INVALID_ADDRESS_OR_KEY.
bumpfee now returns RPC_WALLET_ERROR if the provided transaction has multiple change outputs. Previously returned RPC_MISC_ERROR.
bumpfee now returns RPC_WALLET_ERROR if the provided transaction has no change output. Previously returned RPC_MISC_ERROR.
bumpfee now returns RPC_WALLET_ERROR if the fee is too high. Previously returned RPC_MISC_ERROR.
bumpfee now returns RPC_WALLET_ERROR if the fee is too low. Previously returned RPC_MISC_ERROR.
bumpfee now returns RPC_WALLET_ERROR if the change output is too small to bump the fee. Previously returned RPC_MISC_ERROR.
0.15.0 Change log
RPC and other APIs
#9485 61a640e ZMQ example using python3 and asyncio (mcelrath)
#9894 0496e15 remove ‘label’ filter for rpc command help (instagibbs)
#9853 02bd6e9 Fix error codes from various RPCs (jnewbery)
#9842 598ef9c Fix RPC failure testing (continuation of #9707) (jnewbery)
#10038 d34995a Add mallocinfo mode to getmemoryinfo RPC (laanwj)
#9500 3568b30 [Qt/RPC] Autocomplete commands for ‘help’ command in debug console (achow101)
#10056 e6156a0 [zmq] Call va_end() on va_start()ed args (kallewoof)
#10086 7438cea Trivial: move rpcserialversion into RPC option group (jlopp)
#10150 350b224 [rpc] Add logging rpc (jnewbery)
#10208 393160c [wallet] Rescan abortability (kallewoof)
#10143 a987def [net] Allow disconnectnode RPC to be called with node id (jnewbery)
#10281 0e8499c doc: Add RPC interface guidelines (laanwj)
#9733 d4732f3 Add getchaintxstats RPC (sipa)
#10310 f4b15e2 [doc] Add hint about getmempoolentry to getrawmempool help (kallewoof)
#8704 96c850c [RPC] Transaction details in getblock (achow101)
#8952 9390845 Add query options to listunspent RPC call (pedrobranco)
#10413 08ac35a Fix docs (there’s no rpc command setpaytxfee) (RHavar)
#8384 e317c0d Add witness data output to TxInError messages (instagibbs)
#9571 4677151 RPC: getblockchaininfo returns BIP signaling statistics (pinheadmz)
#10450 ef2d062 Fix bumpfee rpc “errors” return value (ryanofsky)
#10475 39039b1 [RPC] getmempoolinfo mempoolminfee is a BTC/KB feerate (instagibbs)
#10478 296928e rpc: Add listen address to incoming connections in getpeerinfo (laanwj)
#10403 08d0390 Fix importmulti failure to return rescan errors (ryanofsky)
#9740 9fec4da Add friendly output to dumpwallet (aideca)
#10426 16f6c98 Replace bytes_serialized with bogosize (sipa)
#10252 980deaf RPC/Mining: Restore API compatibility for prioritisetransaction (luke-jr)
#9672 46311e7 Opt-into-RBF for RPC & bitcoin-tx (luke-jr)
#10481 9c248e3 Decodehextx scripts sanity check (achow101)
#10488 fa1f106 Note that the prioritizetransaction dummy value is deprecated, and has no meaning (TheBlueMatt)
#9738 c94b89e gettxoutproof() should return consistent result (jnewbery)
#10191 00350bd [trivial] Rename unused RPC arguments ‘dummy’ (jnewbery)
#10627 b62b4c8 fixed listunspent rpc convert parameter (tnakagawa)
#10412 bef02fb Improve wallet rescan API (ryanofsky)
#10400 1680ee0 [RPC] Add an uptime command that displays the amount of time (in seconds) bitcoind has been running (rvelhote)
#10683 d81bec7 rpc: Move the generate RPC call to rpcwallet (laanwj)
#10710 30bc0f6 REST/RPC example update (Mirobit)
#10747 9edda0c [rpc] fix verbose argument for getblock in bitcoin-cli (jnewbery)
#10589 104f5f2 More economical fee estimates for RBF and RPC options to control (morcos)
#10543 b27b004 Change API to estimaterawfee (morcos)
#10807 afd2fca getbalance example covers at least 6 confirms (instagibbs)
#10707 75b5643 Better API for estimatesmartfee RPC (morcos)
#10784 9e8d6a3 Do not allow users to get keys from keypool without reserving them (TheBlueMatt)
#10857 d445a2c [RPC] Add a deprecation warning to getinfo’s output (achow101)
#10571 adf170d [RPC]Move transaction combining from signrawtransaction to new RPC (achow101)
#10783 041dad9 [RPC] Various rpc argument fixes (instagibbs)
#9622 6ef3c7e [rpc] listsinceblock should include lost transactions when parameter is a reorg’d block (kallewoof)
#10799 8537187 Prevent user from specifying conflicting parameters to fundrawtx (TheBlueMatt)
#10931 0b11a07 Fix misleading “Method not found” multiwallet errors (ryanofsky)
#10788 f66c596 [RPC] Fix addwitnessaddress by replacing ismine with producesignature (achow101)
#10999 627c3c0 Fix amounts formatting in decoderawtransaction (laanwj)
#11002 4268426 [wallet] return correct error code from resendwallettransaction (jnewbery)
#11029 96a63a3 [RPC] trivial: gettxout no longer shows version of tx (FelixWeis)
#11083 6c2b008 Fix combinerawtransaction RPC help result section (jonasnick)
#11027 07164bb [RPC] Only return hex field once in getrawtransaction (achow101)
#10698 5af6572 Be consistent in calling transactions “replaceable” for Opt-In RBF (TheBlueMatt)
Block and transaction handling
#9801 a8c5751 Removed redundant parameter from mempool.PrioritiseTransaction (gubatron)
#9819 1efc99c Remove harmless read of unusued priority estimates (morcos)
#9822 b7547fa Remove block file location upgrade code (benma)
#9602 30ff3a2 Remove coin age priority and free transactions - implementation (morcos)
#9548 47510ad Remove min reasonable fee (morcos)
#10249 c73af54 Switch CCoinsMap from boost to std unordered_map (sipa)
#9966 2a183de Control mempool persistence using a command line parameter (jnewbery)
#10199 318ea50 Better fee estimates (morcos)
#10196 bee3529 Bugfix: PrioritiseTransaction updates the mempool tx counter (sdaftuar)
#10195 1088b02 Switch chainstate db and cache to per-txout model (sipa)
#10284 c2ab38b Always log debug information for fee calculation in CreateTransaction (morcos)
#10503 efbcf2b Use REJECT_DUPLICATE for already known and conflicted txn (sipa)
#10537 b3eb0d6 Few Minor per-utxo assert-semantics re-adds and tweak (TheBlueMatt)
#10626 8c841a3 doc: Remove outdated minrelaytxfee comment (MarcoFalke)
#10559 234ffc6 Change semantics of HaveCoinInCache to match HaveCoin (morcos)
#10581 7878353 Simplify return values of GetCoin/HaveCoin(InCache) (sipa)
#10684 a381f6a Remove no longer used mempool.exists(outpoint) (morcos)
#10148 d4e551a Use non-atomic flushing with block replay (sipa)
#10685 30c2130 Clarify CCoinsViewMemPool documentation (TheBlueMatt)
#10558 90a002e Address nits from per-utxo change (morcos)
#10706 6859ad2 Improve wallet fee logic and fix GUI bugs (morcos)
#10526 754aa02 Force on-the-fly compaction during pertxout upgrade (sipa)
#10985 d896d5c Add undocumented -forcecompactdb to force LevelDB compactions (sipa)
#10292 e4bbd3d Improved efficiency in COutPoint constructors (mm-s)
#10290 8d6d43e Add -stopatheight for benchmarking (sipa)
P2P protocol and network code
#9726 7639d38 netbase: Do not print an error on connection timeouts through proxy (laanwj)
#9805 5b583ef Add seed.btc.petertodd.org to mainnet DNS seeds (petertodd)
#9861 22f609f Trivial: Debug log ambiguity fix for peer addrs (keystrike)
#9774 90cb2a2 Enable host lookups for -proxy and -onion parameters (jmcorgan)
#9558 7b585cf Clarify assumptions made about when BlockCheck is called (TheBlueMatt)
#10135 e19586a [p2p] Send the correct error code in reject messages (jnewbery)
#9665 eab00d9 Use cached [compact] blocks to respond to getdata messages (TheBlueMatt)
#10215 a077a90 Check interruptNet during dnsseed lookups (TheBlueMatt)
#10234 faf2dea [net] listbanned RPC and QT should show correct banned subnets (jnewbery)
#10134 314ebdf [qa] Fixes segwit block relay test after inv-direct-fetch was disabled (sdaftuar)
#10351 3f57c55 removed unused code in INV message (Greg-Griffith)
#10061 ae78609 [net] Added SetSocketNoDelay() utility function (tjps)
#10408 28c6e8d Net: Improvements to Tor control port parser (str4d)
#10460 5c63d66 Broadcast address every day, not 9 hours (sipa)
#10471 400fdd0 Denote functions CNode::GetRecvVersion() and CNode::GetRefCount() as const (pavlosantoniou)
#10345 67700b3 [P2P] Timeout for headers sync (sdaftuar)
#10564 8d9f45e Return early in IsBanned (gmaxwell)
#10587 de8db47 Net: Fix resource leak in ReadBinaryFile(…) (practicalswift)
#9549 b33ca14 [net] Avoid possibility of NULL pointer dereference in MarkBlockAsInFlight(…) (practicalswift)
#10446 2772dc9 net: avoid extra dns query per seed (theuni)
#10824 9dd6a2b Avoid unnecessary work in SetNetworkActive (promag)
#10948 df3a6f4 p2p: Hardcoded seeds update pre-0.15 branch (laanwj)
#10977 02f4c4a [net] Fix use of uninitialized value in getnetworkinfo(const JSONRPCRequest&) (practicalswift)
#10982 c8b62c7 Disconnect network service bits 6 and 8 until Aug 1, 2018 (TheBlueMatt)
#11012 0e5cff6 Make sure to clean up mapBlockSource if we’ve already seen the block (theuni)
Validation
#9725 67023e9 CValidationInterface Cleanups (TheBlueMatt)
#10178 2584925 Remove CValidationInterface::UpdatedTransaction (TheBlueMatt)
#10201 a6548a4 pass Consensus::Params& to functions in validation.cpp and make them static (mariodian)
#10297 431a548 Simplify DisconnectBlock arguments/return value (sipa)
#10464 f94b7d5 Introduce static DoWarning (simplify UpdateTip) (jtimon)
#10569 2e7d8f8 Fix stopatheight (achow101)
#10192 2935b46 Cache full script execution results in addition to signatures (TheBlueMatt)
#10179 21ed30a Give CValidationInterface Support for calling notifications on the CScheduler Thread (TheBlueMatt)
#10557 66270a4 Make check to distinguish between orphan txs and old txs more efficient (morcos)
#10775 7c2400c nCheckDepth chain height fix (romanornr)
#10821 16240f4 Add SSE4 optimized SHA256 (sipa)
#10854 04d395e Avoid using sizes on non-fixed-width types to derive protocol constants (gmaxwell)
#10945 2a50b11 Update defaultAssumeValid according to release-process.md (gmaxwell)
#10986 2361208 Update chain transaction statistics (sipa)
#11028 6bdf4b3 Avoid masking of difficulty adjustment errors by checkpoints (sipa)
#9533 cb598cf Allow non-power-of-2 signature cache sizes (sipa)
#9208 acd9957 Improve DisconnectTip performance (sdaftuar)
#10618 f90603a Remove confusing MAX_BLOCK_BASE_SIZE (gmaxwell)
#10758 bd92424 Fix some chainstate-init-order bugs (TheBlueMatt)
#10550 b7296bc Don’t return stale data from CCoinsViewCache::Cursor() (ryanofsky)
#10998 2507fd5 Fix upgrade cancel warnings (TheBlueMatt)
#9868 cbdb473 Abstract out the command line options for block assembly (sipa)
Build system
#9727 5f0556d Remove fallbacks for boost_filesystem < v3 (laanwj)
#9788 50a2265 gitian: bump descriptors for master (theuni)
#9794 7ca2f54 Minor update to qrencode package builder (mitchellcash)
#9514 2cc0df1 release: Windows signing script (theuni)
#9921 8b789d8 build: Probe MSG_DONTWAIT in the same way as MSG_NOSIGNAL (laanwj)
#10011 32d1b34 build: Fix typo s/HAVE_DONTWAIT/HAVE_MSG_DONTWAIT (laanwj)
#9946 90dd9e6 Fix build errors if spaces in path or parent directory (pinheadmz)
#10136 81da4c7 build: Disable Wshadow warning (laanwj)
#10166 64962ae Ignore Doxyfile generated from Doxyfile.in template (paveljanik)
#10239 0416ea9 Make Boost use std::atomic internally (sipa)
#10228 27faa6c build: regenerate bitcoin-config.h as necessary (theuni)
#10273 8979f45 [scripts] Minor improvements to macdeployqtplus script (chrisgavin)
#10325 a26280b 0.15.0 Depends Updates (fanquake)
#10328 79aeff6 Update contrib/debian to latest Ubuntu PPA upload (TheBlueMatt)
#7522 d25449f Bugfix: Only use git for build info if the repository is actually the right one (luke-jr)
#10489 e654d61 build: silence gcc7’s implicit fallthrough warning (theuni)
#10549 ad1a13e Avoid printing generic and duplicated “checking for QT” during ./configure (drizzt)
#10628 8465b68 [depends] expat 2.2.1 (fanquake)
#10806 db825d2 build: verify that the assembler can handle crc32 functions (theuni)
#10766 b4d03be Building Environment: Set ARFLAGS to cr (ReneNyffenegger)
#10803 91edda8 Explicitly search for bdb5.3 (pstratem)
#10855 81560b0 random: only use getentropy on openbsd (theuni)
#10508 1caafa6 Run Qt wallet tests on travis (ryanofsky)
#10851 e222618 depends: fix fontconfig with newer glibc (theuni)
#10971 88b1e4b build: fix missing sse42 in depends builds (theuni)
#11097 129b03f gitian: quick hack to fix version string in releases (theuni)
#10039 919aaf6 Fix compile errors with Qt 5.3.2 and Boost 1.55.0 (ryanofsky)
#10168 7032021 Fix build warning from #error text (jnewbery)
#10301 318392c Check if sys/random.h is required for getentropy (jameshilliard)
GUI
#9724 1a9fd5c Qt/Intro: Add explanation of IBD process (luke-jr)
#9834 b00ba62 qt: clean up initialize/shutdown signals (benma)
#9481 ce01e62 [Qt] Show more significant warning if we fall back to the default fee (jonasschnelli)
#9974 b9f930b Add basic Qt wallet test (ryanofsky)
#9690 a387d3a Change ‘Clear’ button string to ‘Reset’ (da2x)
#9592 9c7b7cf [Qt] Add checkbox in the GUI to opt-in to RBF when creating a transaction (ryanofsky)
#10098 2b477e6 Make qt wallet test compatible with qt4 (ryanofsky)
#9890 1fa4ae6 Add a button to open the config file in a text editor (ericshawlinux)
#10156 51833a1 Fix for issues with startup and multiple monitors on windows (AllanDoensen)
#10177 de01da7 Changed “Send” button default status from true to false (KibbledJiveElkZoo)
#10221 e96486c Stop treating coinbase outputs differently in GUI: show them at 1conf (TheBlueMatt)
#10231 987a6c0 [Qt] Reduce a significant cs_main lock freeze (jonasschnelli)
#10242 f6f3b58 [qt] Don’t call method on null WalletModel object (ryanofsky)
#10093 a3e756b [Qt] Don’t add arguments of sensitive command to console window (jonasschnelli)
#10362 95546c8 [GUI] Add OSX keystroke to RPCConsole info (spencerlievens)
#9697 962cd3f [Qt] simple fee bumper with user verification (jonasschnelli)
#10390 e477516 [wallet] remove minimum total fee option (instagibbs)
#10420 4314544 Add Qt tests for wallet spends & bumpfee (ryanofsky)
#10454 c1c9a95 Fix broken q4 test build (ryanofsky)
#10449 64beb13 Overhaul Qt fee bumper (jonasschnelli)
#10582 7c72fb9 Pass in smart fee slider value to coin control dialog (morcos)
#10673 4c72cc3 [qt] Avoid potential null pointer dereference in TransactionView::exportClicked() (practicalswift)
#10769 8fdd23a [Qt] replace fee slider with a Dropdown, extend conf. targets (jonasschnelli)
#10870 412b466 [Qt] Use wallet 0 in rpc console if running with multiple wallets (jonasschnelli)
#10988 a9dd111 qt: Increase BLOCK_CHAIN_SIZE constants (laanwj)
#10644 e292140 Slightly overhaul NSI pixmaps (jonasschnelli)
#10660 0c3542e Allow to cancel the txdb upgrade via splashscreen keypress ‘q’ (jonasschnelli)
Wallet
#9359 f7ec7cf Add test for CWalletTx::GetImmatureCredit() returning stale values (ryanofsky)
#9576 56ab672 [wallet] Remove redundant initialization (practicalswift)
#9333 fa625b0 Document CWalletTx::mapValue entries and remove erase of nonexistent “version” entry (ryanofsky)
#9906 72fb515 Disallow copy constructor CReserveKeys (instagibbs)
#9369 3178b2c Factor out CWallet::nTimeSmart computation into a method (ryanofsky)
#9830 afcd7c0 Add safe flag to listunspent result (NicolasDorier)
#9993 c49355c Initialize nRelockTime (pstratem)
#9818 3d857f3 Save watch only key timestamps when reimporting keys (ryanofsky)
#9294 f34cdcb Use internal HD chain for change outputs (hd split) (jonasschnelli)
#10164 e183ea2 Wallet: reduce excess logic InMempool() (kewde)
#10186 c9ff4f8 Remove SYNC_TRANSACTION_NOT_IN_BLOCK magic number (jnewbery)
#10226 64c45aa wallet: Use boost to more portably ensure -wallet specifies only a filename (luke-jr)
#9827 c91ca0a Improve ScanForWalletTransactions return value (ryanofsky)
#9951 fa1ac28 Wallet database handling abstractions/simplifications (laanwj)
#10265 c29a0d4 [wallet/moveonly] Check non-null pindex before potentially referencing (kallewoof)
#10283 a550f6e Cleanup: reduce to one GetMinimumFee call signature (morcos)
#10294 e2b99b1 [Wallet] unset change position when there is no change (instagibbs)
#10115 d3dce0e Avoid reading the old hd master key during wallet encryption (TheBlueMatt)
#10341 18c9deb rpc/wallet: Workaround older UniValue which returns a std::string temporary for get_str (luke-jr)
#10308 94e5227 [wallet] Securely erase potentially sensitive keys/values (tjps)
#10257 ea1fd43 [test] Add test for getmemoryinfo (jimmysong)
#10295 ce8176d [qt] Move some WalletModel functions into CWallet (ryanofsky)
#10506 7cc2c67 Fix bumpfee test after #10449 (ryanofsky)
#10500 098b01d Avoid CWalletTx copies in GetAddressBalances and GetAddressGroupings (ryanofsky)
#10455 0747d33 Simplify feebumper minimum fee code slightly (ryanofsky)
#10522 2805d60 [wallet] Remove unused variables (practicalswift)
#8694 177433a Basic multiwallet support (luke-jr)
#10598 7a74f88 Supress struct/class mismatch warnings introduced in #10284 (paveljanik)
#9343 209eef6 Don’t create change at dust limit (morcos)
#10744 ed88e31 Use method name via func macro (darksh1ne)
#10712 e8b9523 Add change output if necessary to reduce excess fee (morcos)
#10816 1c011ff Properly forbid -salvagewallet and -zapwallettxes for multi wallet (morcos)
#10235 5cfdda2 Track keypool entries as internal vs external in memory (TheBlueMatt)
#10330 bf0a08b [wallet] fix zapwallettxes interaction with persistent mempool (jnewbery)
#10831 0b01935 Batch flushing operations to the walletdb during top up and increase keypool size (gmaxwell)
#10795 7b6e8bc No longer ever reuse keypool indexes (TheBlueMatt)
#10849 bde4f93 Multiwallet: simplest endpoint support (jonasschnelli)
#10817 9022aa3 Redefine Dust and add a discard_rate (morcos)
#10883 bf3b742 Rename -usewallet to -rpcwallet (morcos)
#10604 420238d [wallet/tests] Add listwallets RPC, include wallet name in getwalletinfo and add multiwallet test (jnewbery)
#10885 70888a3 Reject invalid wallets (promag)
#10949 af56397 Clarify help message for -discardfee (morcos)
#10942 2e857bb Eliminate fee overpaying edge case when subtracting fee from recipients (morcos)
#10995 fa64636 Fix resendwallettransactions assert failure if -walletbroadcast=0 (TheBlueMatt)
#11022 653a46d Basic keypool topup (jnewbery)
#11081 9fe1f6b Add length check for CExtKey deserialization (jonasschnelli, guidovranken)
#11044 4ef8374 [wallet] Keypool topup cleanups (jnewbery)
#11145 e51bb71 Fix rounding bug in calculation of minimum change (morcos)
#9605 779f2f9 Use CScheduler for wallet flushing, remove ThreadFlushWalletDB (TheBlueMatt)
#10108 4e3efd4 ApproximateBestSubset should take inputs by reference, not value (RHavar)
Tests and QA
#9744 8efd1c8 Remove unused module from rpc-tests (34ro)
#9657 7ff4a53 Improve rpc-tests.py (jnewbery)
#9766 7146d96 Add –exclude option to rpc-tests.py (jnewbery)
#9577 d6064a8 Fix docstrings in qa tests (jnewbery)
#9823 a13a417 qa: Set correct path for binaries in rpc tests (MarcoFalke)
#9847 6206252 Extra test vector for BIP32 (sipa)
#9350 88c2ae3 [Trivial] Adding label for amount inside of tx_valid/tx_invalid.json (Christewart)
#9888 36afd4d travis: Verify commits only for one target (MarcoFalke)
#9904 58861ad test: Fail if InitBlockIndex fails (laanwj)
#9828 67c5cc1 Avoid -Wshadow warnings in wallet_tests (ryanofsky)
#9832 48c3429 [qa] assert_start_raises_init_error (NicolasDorier)
#9739 9d5fcbf Fix BIP68 activation test (jnewbery)
#9547 d32581c bench: Assert that division by zero is unreachable (practicalswift)
#9843 c78adbf Fix segwit getblocktemplate test (jnewbery)
#9929 d5ce14e tests: Delete unused function _rpchost_to_args (laanwj)
#9555 19be26a [test] Avoid reading a potentially uninitialized variable in tx_invalid-test (transaction_tests.cpp) (practicalswift)
#9945 ac23a7c Improve logging in bctest.py if there is a formatting mismatch (jnewbery)
#9768 8910b47 [qa] Add logging to test_framework.py (jnewbery)
#9972 21833f9 Fix extended rpc tests broken by #9768 (jnewbery)
#9977 857d1e1 QA: getblocktemplate_longpoll.py should always use >0 fee tx (sdaftuar)
#9970 3cc13ea Improve readability of segwit.py, smartfees.py (sdaftuar)
#9497 2c781fb CCheckQueue Unit Tests (JeremyRubin)
#10024 9225de2 [trivial] Use log.info() instead of print() in remaining functional test cases (jnewbery)
#9956 3192e52 Reorganise qa directory (jnewbery)
#10017 02d64bd combine_logs.py - aggregates log files from multiple bitcoinds during functional tests (jnewbery)
#10047 dfef6b6 [tests] Remove unused variables and imports (practicalswift)
#9701 a230b05 Make bumpfee tests less fragile (ryanofsky)
#10053 ca20923 [test] Allow functional test cases to be skipped (jnewbery)
#10052 a0b1e57 [test] Run extended tests once daily in Travis (jnewbery)
#10069 1118493 [QA] Fix typo in fundrawtransaction test (NicolasDorier)
#10083 c044f03 [QA] Renaming rawTx into rawtx (NicolasDorier)
#10073 b1a4f27 Actually run assumevalid.py (jnewbery)
#9780 c412fd8 Suppress noisy output from qa tests in Travis (jnewbery)
#10096 79af9fb Check that all test scripts in test/functional are being run (jnewbery)
#10076 5b029aa [qa] combine_logs: Use ordered list for logfiles (MarcoFalke)
#10107 f2734c2 Remove unused variable. Remove accidental trailing semicolons in Python code (practicalswift)
#10109 8ac8041 Remove SingleNodeConnCB (jnewbery)
#10114 edc62c9 [tests] sync_with_ping should assert that ping hasn’t timed out (jnewbery)
#10128 427d2fd Speed Up CuckooCache tests (JeremyRubin)
#10072 12af74b Remove sources of unreliablility in extended functional tests (jnewbery)
#10077 ebfd653 [qa] Add setnetworkactive smoke test (MarcoFalke)
#10152 080d7c7 [trivial] remove unused line in Travis config (jnewbery)
#10159 df1ca9e [tests] color test results and sort alphabetically (jnewbery)
#10124 88799ea [test] Suppress test logging spam (jnewbery)
#10142 ed09dd3 Run bitcoin_test-qt under minimal QPA platform (ryanofsky)
#9949 a27dbc5 [bench] Avoid function call arguments which are pointers to uninitialized values (practicalswift)
#10187 b44adf9 tests: Fix test_runner return value in case of skipped test (laanwj)
#10197 d86bb07 [tests] Functional test warnings (jnewbery)
#10219 9111df9 Tests: Order Python Tests Differently (jimmysong)
#10229 f3db4c6 Tests: Add test for getdifficulty (jimmysong)
#10224 2723bcd [test] Add test for getaddednodeinfo (jimmysong)
#10023 c530c15 [tests] remove maxblocksinflight.py (functionality covered by other test) (jnewbery)
#10097 1b25b6d Move zmq test skipping logic into individual test case (jnewbery)
#10272 54e2d87 [Tests] Prevent warning: variable ‘x’ is uninitialized (paveljanik)
#10225 e0a7e19 [test] Add aborttrescan tests (kallewoof)
#10278 8254a8a [test] Add Unit Test for GetListenPort (jimmysong)
#10280 47535d7 [test] Unit test amount.h/amount.cpp (jimmysong)
#10256 80c3a73 [test] Add test for gettxout to wallet.py (jimmysong)
#10264 492d22f [test] Add tests for getconnectioncount, getnettotals and ping (jimmysong)
#10169 8f3e384 [tests] Remove func test code duplication (jnewbery)
#10198 dc8fc0c [tests] Remove is_network_split from functional test framework (jnewbery)
#10255 3c5e6c9 [test] Add test for listaddressgroupings (jimmysong)
#10137 75171f0 Remove unused import. Remove accidental trailing semicolons (practicalswift)
#10307 83073de [tests] allow zmq test to be run in out-of-tree builds (jnewbery)
#10344 e927483 [tests] Fix abandonconflict.py intermittency (jnewbery)
#10318 170bc2c [tests] fix wait_for_inv() (jnewbery)
#10171 fff72de [tests] Add node methods to test framework (jnewbery)
#10352 23d78c4 test: Add elapsed time to RPC tracing (laanwj)
#10342 6a796b2 [tests] Improve mempool_persist test (jnewbery)
#10287 776ba23 [tests] Update Unit Test for addrman.h/addrman.cpp (jimmysong)
#10365 7ee5236 [tests] increase timeouts in sendheaders test (jnewbery)
#10361 f6241b3 qa: disablewallet: Check that wallet is really disabled (MarcoFalke)
#10371 4b766fc [tests] Clean up addrman_tests.cpp (jimmysong)
#10253 87abe20 [test] Add test for getnetworkhashps (jimmysong)
#10376 8bd16ee [tests] fix disconnect_ban intermittency (jnewbery)
#10374 5411997 qa: Warn when specified test is not found (MarcoFalke)
#10405 0542978 tests: Correct testcase in script_tests.json for large number OP_EQUAL (laanwj)
#10429 6b99daf tests: fix spurious addrman test failure (theuni)
#10433 8e57256 [tests] improve tmpdir structure (jnewbery)
#10415 217b416 [tests] Speed up fuzzing by ~200x when using afl-fuzz (practicalswift)
#10445 b4b057a Add test for empty chain and reorg consistency for gettxoutsetinfo (gmaxwell)
#10423 1aefc94 [tests] skipped tests should clean up after themselves (jnewbery)
#10359 329fc1d [tests] functional tests should call BitcoinTestFramework start/stop node methods (jnewbery)
#10514 e103b3f Bugfix: missing == 0 after randrange (sipa)
#10515 c871f32 [test] Add test for getchaintxstats (jimmysong)
#10509 bea5b00 Remove xvfb configuration from travis (ryanofsky)
#10535 30853e1 [qa] fundrawtx: Fix shutdown race (MarcoFalke)
#9909 300f8e7 tests: Add FindEarliestAtLeast test for edge cases (ryanofsky)
#10331 75e898c Share config between util and functional tests (jnewbery)
#10321 e801084 Use FastRandomContext for all tests (sipa)
#10524 6c2d81f [tests] Remove printf(…) (practicalswift)
#10547 71ab6e5 [tests] Use FastRandomContext instead of boost::random::{mt19937,uniform_int_distribution} (practicalswift)
#10551 6702617 [Tests] Wallet encryption functional tests (achow101)
#10555 643fa0b [tests] various improvements to zmq_test.py (jnewbery)
#10533 d083bd9 [tests] Use cookie auth instead of rpcuser and rpcpassword (achow101)
#10632 c68a9a6 qa: Add stopatheight test (MarcoFalke)
#10636 4bc853b [qa] util: Check return code after closing bitcoind proc (MarcoFalke)
#10662 e0a7801 Initialize randomness in benchmarks (achow101)
#10612 7c87a9c The young person’s guide to the test_framework (jnewbery)
#10659 acb1153 [qa] blockchain: Pass on closed connection during generate call (MarcoFalke)
#10690 416af3e [qa] Bugfix: allow overriding extra_args in ComparisonTestFramework (sdaftuar)
#10556 65cc7aa Move stop/start functions from utils.py into BitcoinTestFramework (jnewbery)
#10704 dd07f47 [tests] nits in dbcrash.py (jnewbery)
#10743 be82498 [test] don’t run dbcrash.py on Travis (jnewbery)
#10761 d3b5870 [tests] fix replace_by_fee.py (jnewbery)
#10759 1d4805c Fix multi_rpc test for hosts that dont default to utf8 (TheBlueMatt)
#10190 e4f226a [tests] mining functional tests (including regression test for submitblock) (jnewbery)
#10739 1fc783f test: Move variable state down where it is used (paveljanik)
#9980 fee0d80 Fix mem access violation merkleblock (Christewart)
#10893 0c173a1 [QA] Avoid running multiwallet.py twice (jonasschnelli)
#10927 9d5e8f9 test: Make sure wallet.backup is created in temp path (laanwj)
#10899 f29d5db [test] Qt: Use _putenv_s instead of setenv on Windows builds (brianmcmichael)
#10912 5c8eb79 [tests] Fix incorrect memory_cleanse(…) call in crypto_tests.cpp (practicalswift)
#11001 fa8a063 [tests] Test disconnecting unsupported service bits logic (jnewbery)
#10695 929fd72 [qa] Rewrite BIP65/BIP66 functional tests (sdaftuar)
#10963 ecd2135 [bench] Restore format state of cout after printing with std::fixed/setprecision (practicalswift)
#11025 e5d26e4 qa: Fix inv race in example_test (MarcoFalke)
#10765 2c811e0 Tests: address placement should be deterministic by default (ReneNyffenegger)
#11000 ac016e1 test: Add resendwallettransactions functional tests (promag)
#11032 aeb3175 [qa] Fix block message processing error in sendheaders.py (sdaftuar)
#10105 0b9fb68 [tests] fixup - make all Travis test runs quiet, non just cron job runs (jnewbery)
#10222 6ce7337 [tests] test_runner - check unicode (jnewbery)
#10327 35da2ae [tests] remove import-abort-rescan.py (jnewbery)
#11023 bf74d37 [tests] Add option to attach a python debugger if functional test fails (jnewbery)
#10565 8c2098a [coverage] Remove subtrees and benchmarks from coverage report (achow101)
Miscellaneous
#9871 be8ba2c Add a tree sha512 hash to merge commits (sipa)
#9821 d19d45a util: Specific GetOSRandom for Linux/FreeBSD/OpenBSD (laanwj)
#9903 ba80a68 Docs: add details to -rpcclienttimeout doc (ian-kelling)
#9910 53c300f Docs: correct and elaborate -rpcbind doc (ian-kelling)
#9905 01b7cda [contrib] gh-merge: Move second sha512 check to the end (MarcoFalke)
#9880 4df8213 Verify Tree-SHA512s in merge commits, enforce sigs are not SHA1 (TheBlueMatt)
#9932 00c13ea Fix verify-commits on travis and always check top commit’s tree (TheBlueMatt)
#9952 6996e06 Add historical release notes for 0.14.0 (laanwj)
#9940 fa99663 Fix verify-commits on OSX, update for new bad Tree-SHA512, point travis to different keyservers (TheBlueMatt)
#9963 8040ae6 util: Properly handle errors during log message formatting (laanwj)
#9984 cce056d devtools: Make github-merge compute SHA512 from git, instead of worktree (laanwj)
#9995 8bcf934 [doc] clarify blockchain size and pruning (askmike)
#9734 0c17afc Add updating of chainTxData to release process (sipa)
#10063 530fcbd add missing spaces so that markdown recognizes headline (flack)
#10085 db1ae54 Docs: remove ‘noconnect’ option (jlopp)
#10090 8e4f7e7 Update bitcoin.conf with example for pruning (coinables)
#9424 1a5aaab Change LogAcceptCategory to use uint32_t rather than sets of strings (gmaxwell)
#10036 fbf36ca Fix init README format to render correctly on github (jlopp)
#10058 a2cd0b0 No need to use OpenSSL malloc/free (tjps)
#10123 471ed00 Allow debug logs to be excluded from specified component (jnewbery)
#10104 fadf078 linearize script: Option to use RPC cookie (achow101)
#10162 a3a2160 [trivial] Log calls to getblocktemplate (jnewbery)
#10155 928695b build: Deduplicate version numbers (laanwj)
#10211 a86255b [doc] Contributor fixes & new “finding reviewers” section (kallewoof)
#10250 1428f30 Fix some empty vector references (sipa)
#10270 95f5e44 Remove Clang workaround for Boost 1.46 (fanquake)
#10263 cb007e4 Trivial: fix fee estimate write error log message (CryptAxe)
#9670 bd9ec0e contrib: github-merge improvements (laanwj)
#10260 1d75597 [doc] Minor corrections to osx dependencies (fanquake)
#10189 750c5a5 devtools/net: add a verifier for scriptable changes. Use it to make CNode::id private (theuni)
#10322 bc64b5a Use hardware timestamps in RNG seeding (sipa)
#10381 7f2b9e0 Shadowing warnings are not enabled by default, update doc accordingly (paveljanik)
#10380 b6ee855 [doc] Removing comments about dirty entries on txmempool (madeo)
#10383 d0c37ee [logging] log system time and mock time (jnewbery)
#10404 b45a52a doc: Add logging to FinalizeNode() (sdaftuar)
#10388 526e839 Output line to debug.log when IsInitialBlockDownload latches to false (morcos)
#10372 15254e9 Add perf counter data to GetStrongRandBytes state in scheduler (TheBlueMatt)
#10461 55b72f3 Update style guide (sipa)
#10486 10e8c0a devtools: Retry after signing fails in github-merge (laanwj)
#10447 f259263 Make bitcoind invalid argument error message specific (laanwj)
#10495 6a38b79 contrib: Update location of seeds.txt (laanwj)
#10469 b6b150b Fixing typo in rpcdump.cpp help message (keystrike)
#10451 27b9931 contrib/init/bitcoind.openrcconf: Don’t disable wallet by default (luke-jr)
#10323 00d3692 Update to latest libsecp256k1 master (sipa)
#10422 cec9e1e Fix timestamp in fee estimate debug message (morcos)
#10566 5d034ee [docs] Use the “domain name setup” image (previously unused) in the gitian docs (practicalswift)
#10534 a514ac3 Clarify prevector::erase and avoid swap-to-clear (sipa)
#10575 22ec768 Header include guideline (sipa)
#10480 fbf5d3b Improve commit-check-script.sh (sipa)
#10502 1ad3d4e scripted-diff: Remove BOOST_FOREACH, Q_FOREACH and PAIRTYPE (jtimon)
#10377 b63be2c Use rdrand as entropy source on supported platforms (sipa)
#9895 228c319 Turn TryCreateDirectory() into TryCreateDirectories() (benma)
#10602 d76e84a Make clang-format use C++11 features (practicalswift)
#10623 c38f540 doc: Add 0.14.2 release notes (MarcoFalke)
#10276 b750b33 contrib/verifybinaries: allow filtering by platform (knocte)
#10248 01c4b14 Rewrite addrdb with less duplication using CHashVerifier (sipa)
#10577 232508f Add an explanation of quickly hashing onto a non-power of two range (gmaxwell)
#10608 eee398f Add a comment explaining the use of MAX_BLOCK_BASE_SIZE (gmaxwell)
#10728 7397af9 fix typo in help text for removeprunedfunds (AkioNak)
#10193 6dbcc74 scripted-diff: Remove #include <boost/foreach.hpp> (jtimon)
#10676 379aed0 document script-based return fields for validateaddress (instagibbs)
#10651 cef4b5c Verify binaries from bitcoincore.org and bitcoin.org (TheBlueMatt)
#10786 ca4c545 Add PR description to merge commit in github-merge.py (sipa)
#10812 c5904e8 [utils] Allow bitcoin-cli’s -rpcconnect option to be used with square brackets (jnewbery)
#10842 3895e25 Fix incorrect Doxygen tag (@ince → @since). Doxygen parameter name matching (practicalswift)
#10681 df0793f add gdb attach process to test README (instagibbs)
#10789 1124328 Punctuation/grammer fixes in rpcwallet.cpp (stevendlander)
#10655 78f307b Properly document target_confirmations in listsinceblock (RHavar)
#10917 5c003cb developer-notes: add reference to snake_case and PascalCase (benma)
#11003 4b5a7ce Docs: Capitalize bullet points in CONTRIBUTING guide (eklitzke)
#10968 98aa3f6 Add instructions for parallel gitian builds (coblee)
#11076 1c4b9b3 0.15 release-notes nits: fix redundancy, remove accidental parenthesis & fix range style (practicalswift)
#11090 8f0121c Update contributor names in release-notes.md (Derek701)
#11056 cbdd338 disable jni in builds (instagibbs)
#11080 2b59cfb doc: Update build-openbsd for 6.1 (laanwj)
#11119 0a6af47 [doc] build-windows: Mention that only trusty works (MarcoFalke)
#11108 e8ad101 Changing -txindex requires -reindex, not -reindex-chainstate (TheBlueMatt)
#9792 342b9bc FastRandomContext improvements and switch to ChaCha20 (sipa)
#9505 67ed40e Prevector Quick Destruct (JeremyRubin)
#10820 ef37f20 Use cpuid intrinsics instead of asm code (sipa)
#9999 a328904 [LevelDB] Plug leveldb logs to bitcoin logs (NicolasDorier)
#9693 c5e9e42 Prevent integer overflow in ReadVarInt (gmaxwell)
#10129 351d0ad scheduler: fix sub-second precision with boost < 1.50 (theuni)
#10153 fade788 logging: Fix off-by-one for shrinkdebugfile default (MarcoFalke)
#10305 c45da32 Fix potential NPD introduced in b297426c (TheBlueMatt)
#10338 daf3e7d Maintain state across GetStrongRandBytes calls (sipa)
#10544 a4fe077 Update to LevelDB 1.20 (sipa)
#10614 cafe24f random: fix crash on some 64bit platforms (theuni)
#10714 2a09a38 Avoid printing incorrect block indexing time due to uninitialized variable (practicalswift)
#10837 8bc6d1f Fix resource leak on error in GetDevURandom (corebob)
#10832 89bb036 init: Factor out AppInitLockDataDirectory and fix startup core dump issue (laanwj)
#10914 b995a37 Add missing lock in CScheduler::AreThreadsServicingQueue() (TheBlueMatt)
#10958 659c096 Update to latest Bitcoin patches for LevelDB (sipa)
#10919 c1c671f Fix more init bugs (TheBlueMatt)
Credits
Thanks to everyone who directly contributed to this release:

ロハン ダル
Ahmad Kazi
aideca
Akio Nakamura
Alex Morcos
Allan Doensen
Andres G. Aragoneses
Andrew Chow
Angel Leon
Awemany
Bob McElrath
Brian McMichael
BtcDrak
Charlie Lee
Chris Gavin
Chris Stewart
Cory Fields
CryptAxe
Dag Robole
Daniel Aleksandersen
Daniel Cousens
darksh1ne
Dimitris Tsapakidis
Eric Shaw
Evan Klitzke
fanquake
Felix Weis
flack
Guido Vranken
Greg Griffith
Gregory Maxwell
Gregory Sanders
Ian Kelling
Jack Grigg
James Evans
James Hilliard
Jameson Lopp
Jeremy Rubin
Jimmy Song
João Barbosa
Johnathan Corgan
John Newbery
Jonas Schnelli
Jorge Timón
Karl-Johan Alm
kewde
KibbledJiveElkZoo
Kirit Thadaka
kobake
Kyle Honeycutt
Lawrence Nahum
Luke Dashjr
Marco Falke
Marcos Mayorga
Marijn Stollenga
Mario Dian
Mark Friedenbach
Marko Bencun
Masahiko Hyuga
Matt Corallo
Matthew Zipkin
Matthias Grundmann
Michael Goldstein
Michael Rotarius
Mikerah
Mike van Rossum
Mitchell Cash
Nicolas Dorier
Patrick Strateman
Pavel Janík
Pavlos Antoniou
Pavol Rusnak
Pedro Branco
Peter Todd
Pieter Wuille
practicalswift
René Nyffenegger
Ricardo Velhote
romanornr
Russell Yanofsky
Rusty Russell
Ryan Havar
shaolinfry
Shigeya Suzuki
Simone Madeo
Spencer Lievens
Steven D. Lander
Suhas Daftuar
Takashi Mitsuta
Thomas Snider
Timothy Redaelli
tintinweb
tnaka
Warren Togami
Wladimir J. van der Laan
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.15.0.1 released
19 September 2017

How to Upgrade
Compatibility
Notes for 0.15.0.1
Notes for 0.15.0
Notable changes
0.15.0 Change log
- {:.}
RPC and other APIs
- {:.}
Block and transaction handling
- {:.}
P2P protocol and network code
- {:.}
Validation
- {:.}
Build system
- {:.}
GUI
- {:.}
Wallet
- {:.}
Tests and QA
- {:.}
Miscellaneous
Credits
Bitcoin Core version 0.15.0.1 is not available for security reasons:

https://bitcoin.org/bin/bitcoin-core-0.15.0.1/

and

https://bitcoincore.org/bin/bitcoin-core-0.15.0.1/

This is a new major version release, including new features, various bugfixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

The first time you run version 0.15.0, your chainstate database will be converted to a new format, which will take anywhere from a few minutes to half an hour, depending on the speed of your machine.

The file format of fee_estimates.dat changed in version 0.15.0. Hence, a downgrade from version 0.15.0 or upgrade to version 0.15.0 will cause all fee estimates to be discarded.

Note that the block database format also changed in version 0.8.0 and there is no automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading directly from 0.7.x and earlier without redownloading the blockchain is not supported. However, as usual, old wallet versions are still supported.

Downgrading warning
The chainstate database for this release is not compatible with previous releases, so if you run 0.15 and then decide to switch back to any older version, you will need to run the old release with the -reindex-chainstate option to rebuild the chainstate data structures in the old format.

If your node has pruning enabled, this will entail re-downloading and processing the entire blockchain.

Compatibility
Bitcoin Core is extensively tested on multiple operating systems using the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.

Bitcoin Core should also work on most other Unix-like systems but is not frequently tested on them.

Notes for 0.15.0.1
GUI startup crash issue
After upgrade to 0.15.0, some clients would crash at startup because a custom fee setting was configured that no longer exists in the GUI. This is a minimal patch to avoid this issue from occuring.

Notes for 0.15.0
Current SegWit support
Version 0.15.0 supports adding a segregated witness address via the addwitnessaddress RPC, but please note that this is a testing/expert RPC, which does not guarantee recovery from backup. Only use this RPC if you know what you are doing. More complete wallet support for segregated witness is coming in a next version.

Rescanning with encrypted wallets
As in previous versions, when using an encrypted HD wallet, the keypool cannot be topped up without unlocking the wallet. This means that currently, in order to recover from a backup of an encrypted HD wallet, the user must unlock the wallet with a really long timeout and manually trigger a rescan, otherwise they risk missing some keys when auto-topup cannot run. Unfortunately there is no rescan RPC in this version, that will be included in a future version, so for now a rescan can be triggered using one of the import* commands, using a dummy address generated by another (trusted) wallet.

Notable changes
Performance Improvements
Version 0.15 contains a number of significant performance improvements, which make Initial Block Download, startup, transaction and block validation much faster:

The chainstate database (which is used for tracking UTXOs) has been changed from a per-transaction model to a per-output model (See PR 10195). Advantages of this model are that it:
avoids the CPU overhead of deserializing and serializing the unused outputs;
has more predictable memory usage;
uses simpler code;
is adaptable to various future cache flushing strategies.
As a result, validating the blockchain during Initial Block Download (IBD) and reindex is ~30-40% faster, uses 10-20% less memory, and flushes to disk far less frequently. The only downside is that the on-disk database is 15% larger. During the conversion from the previous format a few extra gigabytes may be used.

Earlier versions experienced a spike in memory usage while flushing UTXO updates to disk. As a result, only half of the available memory was actually used as cache, and the other half was reserved to accommodate flushing. This is no longer the case (See PR 10148), and the entirety of the available cache (see -dbcache) is now actually used as cache. This reduces the flushing frequency by a factor 2 or more.
In previous versions, signature validation for transactions has been cached when the transaction is accepted to the mempool. Version 0.15 extends this to cache the entire script validity (See PR 10192). This means that if a transaction in a block has already been accepted to the mempool, the scriptSig does not need to be re-evaluated. Empirical tests show that this results in new block validation being 40-50% faster.
LevelDB has been upgraded to version 1.20 (See PR 10544). This version contains hardware acceleration for CRC on architectures supporting SSE 4.2. As a result, synchronization and block validation are now faster.
SHA256 hashing has been optimized for architectures supporting SSE 4 (See PR 10821). SHA256 is around 50% faster on supported hardware, which results in around 5% faster IBD and block validation. In version 0.15, SHA256 hardware optimization is disabled in release builds by default, but can be enabled by using --enable-experimental-asm when building.
Refill of the keypool no longer flushes the wallet between each key which resulted in a ~20x speedup in creating a new wallet. Part of this speedup was used to increase the default keypool to 1000 keys to make recovery more robust. (See PR 10831).
Fee Estimation Improvements
Fee estimation has been significantly improved in version 0.15, with more accurate fee estimates used by the wallet and a wider range of options for advanced users of the estimatesmartfee and estimaterawfee RPCs (See PR 10199).

Changes to internal logic and wallet behavior
Internally, estimates are now tracked on 3 different time horizons. This allows for longer targets and means estimates adjust more quickly to changes in conditions.
Estimates can now be conservative or economical. Conservative estimates use longer time horizons to produce an estimate which is less susceptible to rapid changes in fee conditions. Economical estimates use shorter time horizons and will be more affected by short-term changes in fee conditions. Economical estimates may be considerably lower during periods of low transaction activity (for example over weekends), but may result in transactions being unconfirmed if prevailing fees increase rapidly.
By default, the wallet will use conservative fee estimates to increase the reliability of transactions being confirmed within the desired target. For transactions that are marked as replaceable, the wallet will use an economical estimate by default, since the fee can be ‘bumped’ if the fee conditions change rapidly (See PR 10589).
Estimates can now be made for confirmation targets up to 1008 blocks (one week).
More data on historical fee rates is stored, leading to more precise fee estimates.
Transactions which leave the mempool due to eviction or other non-confirmed reasons are now taken into account by the fee estimation logic, leading to more accurate fee estimates.
The fee estimation logic will make sure enough data has been gathered to return a meaningful estimate. If there is insufficient data, a fallback default fee is used.
Changes to fee estimate RPCs
The estimatefee RPC is now deprecated in favor of using only estimatesmartfee (which is the implementation used by the GUI)
The estimatesmartfee RPC interface has been changed (See PR 10707):
The nblocks argument has been renamed to conf_target (to be consistent with other RPC methods).
An estimate_mode argument has been added. This argument takes one of the following strings: CONSERVATIVE, ECONOMICAL or UNSET (which defaults to CONSERVATIVE).
The RPC return object now contains an errors member, which returns errors encountered during processing.
If Bitcoin Core has not been running for long enough and has not seen enough blocks or transactions to produce an accurate fee estimation, an error will be returned (previously a value of -1 was used to indicate an error, which could be confused for a feerate).
A new estimaterawfee RPC is added to provide raw fee data. External clients can query and use this data in their own fee estimation logic.
Multi-wallet support
Bitcoin Core now supports loading multiple, separate wallets (See PR 8694, PR 10849). The wallets are completely separated, with individual balances, keys and received transactions.

Multi-wallet is enabled by using more than one -wallet argument when starting Bitcoin, either on the command line or in the Bitcoin config file.

In Bitcoin-Qt, only the first wallet will be displayed and accessible for creating and signing transactions. GUI selectable multiple wallets will be supported in a future version. However, even in 0.15 other loaded wallets will remain synchronized to the node’s current tip in the background. This can be useful if running a pruned node, since loading a wallet where the most recent sync is beyond the pruned height results in having to download and revalidate the whole blockchain. Continuing to synchronize all wallets in the background avoids this problem.

Bitcoin Core 0.15.0 contains the following changes to the RPC interface and bitcoin-cli for multi-wallet:

When running Bitcoin Core with a single wallet, there are no changes to the RPC interface or bitcoin-cli. All RPC calls and bitcoin-cli commands continue to work as before.
When running Bitcoin Core with multi-wallet, all node-level RPC methods continue to work as before. HTTP RPC requests should be send to the normal <RPC IP address>:<RPC port>/ endpoint, and bitcoin-cli commands should be run as before. A node-level RPC method is any method which does not require access to the wallet.
When running Bitcoin Core with multi-wallet, wallet-level RPC methods must specify the wallet for which they’re intended in every request. HTTP RPC requests should be send to the <RPC IP address>:<RPC port>/wallet/<wallet name>/ endpoint, for example 127.0.0.1:8332/wallet/wallet1.dat/. bitcoin-cli commands should be run with a -rpcwallet option, for example bitcoin-cli -rpcwallet=wallet1.dat getbalance.
A new node-level listwallets RPC method is added to display which wallets are currently loaded. The names returned by this method are the same as those used in the HTTP endpoint and for the rpcwallet argument.
Note that while multi-wallet is now fully supported, the RPC multi-wallet interface should be considered unstable for version 0.15.0, and there may backwards-incompatible changes in future versions.

Replace-by-fee control in the GUI
Bitcoin Core has supported creating opt-in replace-by-fee (RBF) transactions since version 0.12.0, and since version 0.14.0 has included a bumpfee RPC method to replace unconfirmed opt-in RBF transactions with a new transaction that pays a higher fee.

In version 0.15, creating an opt-in RBF transaction and replacing the unconfirmed transaction with a higher-fee transaction are both supported in the GUI (See PR 9592).

Removal of Coin Age Priority
In previous versions of Bitcoin Core, a portion of each block could be reserved for transactions based on the age and value of UTXOs they spent. This concept (Coin Age Priority) is a policy choice by miners, and there are no consensus rules around the inclusion of Coin Age Priority transactions in blocks. In practice, only a few miners continue to use Coin Age Priority for transaction selection in blocks. Bitcoin Core 0.15 removes all remaining support for Coin Age Priority (See PR 9602). This has the following implications:

The concept of free transactions has been removed. High Coin Age Priority transactions would previously be allowed to be relayed even if they didn’t attach a miner fee. This is no longer possible since there is no concept of Coin Age Priority. The -limitfreerelay and -relaypriority options which controlled relay of free transactions have therefore been removed.
The -sendfreetransactions option has been removed, since almost all miners do not include transactions which do not attach a transaction fee.
The -blockprioritysize option has been removed.
The estimatepriority and estimatesmartpriority RPCs have been removed.
The getmempoolancestors, getmempooldescendants, getmempoolentry and getrawmempool RPCs no longer return startingpriority and currentpriority.
The prioritisetransaction RPC no longer takes a priority_delta argument, which is replaced by a dummy argument for backwards compatibility with clients using positional arguments. The RPC is still used to change the apparent fee-rate of the transaction by using the fee_delta argument.
-minrelaytxfee can now be set to 0. If minrelaytxfee is set, then fees smaller than minrelaytxfee (per kB) are rejected from relaying, mining and transaction creation. This defaults to 1000 satoshi/kB.
The -printpriority option has been updated to only output the fee rate and hash of transactions included in a block by the mining code.
Mempool Persistence Across Restarts
Version 0.14 introduced mempool persistence across restarts (the mempool is saved to a mempool.dat file in the data directory prior to shutdown and restores the mempool when the node is restarted). Version 0.15 allows this feature to be switched on or off using the -persistmempool command-line option (See PR 9966). By default, the option is set to true, and the mempool is saved on shutdown and reloaded on startup. If set to false, the mempool.dat file will not be loaded on startup or saved on shutdown.

New RPC methods
Version 0.15 introduces several new RPC methods:

abortrescan stops current wallet rescan, e.g. when triggered by an importprivkey call (See PR 10208).
combinerawtransaction accepts a JSON array of raw transactions and combines them into a single raw transaction (See PR 10571).
estimaterawfee returns raw fee data so that customized logic can be implemented to analyze the data and calculate estimates. See Fee Estimation Improvements for full details on changes to the fee estimation logic and interface.
getchaintxstats returns statistics about the total number and rate of transactions in the chain (See PR 9733).
listwallets lists wallets which are currently loaded. See the Multi-wallet section of these release notes for full details (See Multi-wallet support).
uptime returns the total runtime of the bitcoind server since its last start (See PR 10400).
Low-level RPC changes
When using Bitcoin Core in multi-wallet mode, RPC requests for wallet methods must specify the wallet that they’re intended for. See Multi-wallet support for full details.

The new database model no longer stores information about transaction versions of unspent outputs (See Performance improvements). This means that:
The gettxout RPC no longer has a version field in the response.
The gettxoutsetinfo RPC reports hash_serialized_2 instead of hash_serialized, which does not commit to the transaction versions of unspent outputs, but does commit to the height and coinbase information.
The getutxos REST path no longer reports the txvers field in JSON format, and always reports 0 for transaction versions in the binary format
The estimatefee RPC is deprecated. Clients should switch to using the estimatesmartfee RPC, which returns better fee estimates. See Fee Estimation Improvements for full details on changes to the fee estimation logic and interface.

The gettxoutsetinfo response now contains disk_size and bogosize instead of bytes_serialized. The first is a more accurate estimate of actual disk usage, but is not deterministic. The second is unrelated to disk usage, but is a database-independent metric of UTXO set size: it counts every UTXO entry as 50 + the length of its scriptPubKey (See PR 10426).

signrawtransaction can no longer be used to combine multiple transactions into a single transaction. Instead, use the new combinerawtransaction RPC (See PR 10571).

fundrawtransaction no longer accepts a reserveChangeKey option. This option used to allow RPC users to fund a raw transaction using an key from the keypool for the change address without removing it from the available keys in the keypool. The key could then be re-used for a getnewaddress call, which could potentially result in confusing or dangerous behaviour (See PR 10784).

estimatepriority and estimatesmartpriority have been removed. See Removal of Coin Age Priority.

The listunspent RPC now takes a query_options argument (see PR 8952), which is a JSON object containing one or more of the following members:
minimumAmount - a number specifying the minimum value of each UTXO
maximumAmount - a number specifying the maximum value of each UTXO
maximumCount - a number specifying the minimum number of UTXOs
minimumSumAmount - a number specifying the minimum sum value of all UTXOs
The getmempoolancestors, getmempooldescendants, getmempoolentry and getrawmempool RPCs no longer return startingpriority and currentpriority. See Removal of Coin Age Priority.

The dumpwallet RPC now returns the full absolute path to the dumped wallet. It used to return no value, even if successful (See PR 9740).

In the getpeerinfo RPC, the return object for each peer now returns an addrbind member, which contains the ip address and port of the connection to the peer. This is in addition to the addrlocal member which contains the ip address and port of the local node as reported by the peer (See PR 10478).

The disconnectnode RPC can now disconnect a node specified by node ID (as well as by IP address/port). To disconnect a node based on node ID, call the RPC with the new nodeid argument (See PR 10143).

The second argument in prioritisetransaction has been renamed from priority_delta to dummy since Bitcoin Core no longer has a concept of coin age priority. The dummy argument has no functional effect, but is retained for positional argument compatibility. See Removal of Coin Age Priority.

The resendwallettransactions RPC throws an error if the -walletbroadcast option is set to false (See PR 10995).

The second argument in the submitblock RPC argument has been renamed from parameters to dummy. This argument never had any effect, and the renaming is simply to communicate this fact to the user (See PR 10191) (Clients should, however, use positional arguments for submitblock in order to be compatible with BIP 22.)

The verbose argument of getblock has been renamed to verbosity and now takes an integer from 0 to 2. Verbose level 0 is equivalent to verbose=false. Verbose level 1 is equivalent to verbose=true. Verbose level 2 will give the full transaction details of each transaction in the output as given by getrawtransaction. The old behavior of using the verbose named argument and a boolean value is still maintained for compatibility.

Error codes have been updated to be more accurate for the following error cases (See PR 9853):
getblock now returns RPC_MISC_ERROR if the block can’t be found on disk (for example if the block has been pruned). Previously returned RPC_INTERNAL_ERROR.
pruneblockchain now returns RPC_MISC_ERROR if the blocks cannot be pruned because the node is not in pruned mode. Previously returned RPC_METHOD_NOT_FOUND.
pruneblockchain now returns RPC_INVALID_PARAMETER if the blocks cannot be pruned because the supplied timestamp is too late. Previously returned RPC_INTERNAL_ERROR.
pruneblockchain now returns RPC_MISC_ERROR if the blocks cannot be pruned because the blockchain is too short. Previously returned RPC_INTERNAL_ERROR.
setban now returns RPC_CLIENT_INVALID_IP_OR_SUBNET if the supplied IP address or subnet is invalid. Previously returned RPC_CLIENT_NODE_ALREADY_ADDED.
setban now returns RPC_CLIENT_INVALID_IP_OR_SUBNET if the user tries to unban a node that has not previously been banned. Previously returned RPC_MISC_ERROR.
removeprunedfunds now returns RPC_WALLET_ERROR if bitcoind is unable to remove the transaction. Previously returned RPC_INTERNAL_ERROR.
removeprunedfunds now returns RPC_INVALID_PARAMETER if the transaction does not exist in the wallet. Previously returned RPC_INTERNAL_ERROR.
fundrawtransaction now returns RPC_INVALID_ADDRESS_OR_KEY if an invalid change address is provided. Previously returned RPC_INVALID_PARAMETER.
fundrawtransaction now returns RPC_WALLET_ERROR if bitcoind is unable to create the transaction. The error message provides further details. Previously returned RPC_INTERNAL_ERROR.
bumpfee now returns RPC_INVALID_PARAMETER if the provided transaction has descendants in the wallet. Previously returned RPC_MISC_ERROR.
bumpfee now returns RPC_INVALID_PARAMETER if the provided transaction has descendants in the mempool. Previously returned RPC_MISC_ERROR.
bumpfee now returns RPC_WALLET_ERROR if the provided transaction has has been mined or conflicts with a mined transaction. Previously returned RPC_INVALID_ADDRESS_OR_KEY.
bumpfee now returns RPC_WALLET_ERROR if the provided transaction is not BIP 125 replaceable. Previously returned RPC_INVALID_ADDRESS_OR_KEY.
bumpfee now returns RPC_WALLET_ERROR if the provided transaction has already been bumped by a different transaction. Previously returned RPC_INVALID_REQUEST.
bumpfee now returns RPC_WALLET_ERROR if the provided transaction contains inputs which don’t belong to this wallet. Previously returned RPC_INVALID_ADDRESS_OR_KEY.
bumpfee now returns RPC_WALLET_ERROR if the provided transaction has multiple change outputs. Previously returned RPC_MISC_ERROR.
bumpfee now returns RPC_WALLET_ERROR if the provided transaction has no change output. Previously returned RPC_MISC_ERROR.
bumpfee now returns RPC_WALLET_ERROR if the fee is too high. Previously returned RPC_MISC_ERROR.
bumpfee now returns RPC_WALLET_ERROR if the fee is too low. Previously returned RPC_MISC_ERROR.
bumpfee now returns RPC_WALLET_ERROR if the change output is too small to bump the fee. Previously returned RPC_MISC_ERROR.
0.15.0 Change log
RPC and other APIs
#9485 61a640e ZMQ example using python3 and asyncio (mcelrath)
#9894 0496e15 remove ‘label’ filter for rpc command help (instagibbs)
#9853 02bd6e9 Fix error codes from various RPCs (jnewbery)
#9842 598ef9c Fix RPC failure testing (continuation of #9707) (jnewbery)
#10038 d34995a Add mallocinfo mode to getmemoryinfo RPC (laanwj)
#9500 3568b30 [Qt/RPC] Autocomplete commands for ‘help’ command in debug console (achow101)
#10056 e6156a0 [zmq] Call va_end() on va_start()ed args (kallewoof)
#10086 7438cea Trivial: move rpcserialversion into RPC option group (jlopp)
#10150 350b224 [rpc] Add logging rpc (jnewbery)
#10208 393160c [wallet] Rescan abortability (kallewoof)
#10143 a987def [net] Allow disconnectnode RPC to be called with node id (jnewbery)
#10281 0e8499c doc: Add RPC interface guidelines (laanwj)
#9733 d4732f3 Add getchaintxstats RPC (sipa)
#10310 f4b15e2 [doc] Add hint about getmempoolentry to getrawmempool help (kallewoof)
#8704 96c850c [RPC] Transaction details in getblock (achow101)
#8952 9390845 Add query options to listunspent RPC call (pedrobranco)
#10413 08ac35a Fix docs (there’s no rpc command setpaytxfee) (RHavar)
#8384 e317c0d Add witness data output to TxInError messages (instagibbs)
#9571 4677151 RPC: getblockchaininfo returns BIP signaling statistics (pinheadmz)
#10450 ef2d062 Fix bumpfee rpc “errors” return value (ryanofsky)
#10475 39039b1 [RPC] getmempoolinfo mempoolminfee is a BTC/KB feerate (instagibbs)
#10478 296928e rpc: Add listen address to incoming connections in getpeerinfo (laanwj)
#10403 08d0390 Fix importmulti failure to return rescan errors (ryanofsky)
#9740 9fec4da Add friendly output to dumpwallet (aideca)
#10426 16f6c98 Replace bytes_serialized with bogosize (sipa)
#10252 980deaf RPC/Mining: Restore API compatibility for prioritisetransaction (luke-jr)
#9672 46311e7 Opt-into-RBF for RPC & bitcoin-tx (luke-jr)
#10481 9c248e3 Decodehextx scripts sanity check (achow101)
#10488 fa1f106 Note that the prioritizetransaction dummy value is deprecated, and has no meaning (TheBlueMatt)
#9738 c94b89e gettxoutproof() should return consistent result (jnewbery)
#10191 00350bd [trivial] Rename unused RPC arguments ‘dummy’ (jnewbery)
#10627 b62b4c8 fixed listunspent rpc convert parameter (tnakagawa)
#10412 bef02fb Improve wallet rescan API (ryanofsky)
#10400 1680ee0 [RPC] Add an uptime command that displays the amount of time (in seconds) bitcoind has been running (rvelhote)
#10683 d81bec7 rpc: Move the generate RPC call to rpcwallet (laanwj)
#10710 30bc0f6 REST/RPC example update (Mirobit)
#10747 9edda0c [rpc] fix verbose argument for getblock in bitcoin-cli (jnewbery)
#10589 104f5f2 More economical fee estimates for RBF and RPC options to control (morcos)
#10543 b27b004 Change API to estimaterawfee (morcos)
#10807 afd2fca getbalance example covers at least 6 confirms (instagibbs)
#10707 75b5643 Better API for estimatesmartfee RPC (morcos)
#10784 9e8d6a3 Do not allow users to get keys from keypool without reserving them (TheBlueMatt)
#10857 d445a2c [RPC] Add a deprecation warning to getinfo’s output (achow101)
#10571 adf170d [RPC]Move transaction combining from signrawtransaction to new RPC (achow101)
#10783 041dad9 [RPC] Various rpc argument fixes (instagibbs)
#9622 6ef3c7e [rpc] listsinceblock should include lost transactions when parameter is a reorg’d block (kallewoof)
#10799 8537187 Prevent user from specifying conflicting parameters to fundrawtx (TheBlueMatt)
#10931 0b11a07 Fix misleading “Method not found” multiwallet errors (ryanofsky)
#10788 f66c596 [RPC] Fix addwitnessaddress by replacing ismine with producesignature (achow101)
#10999 627c3c0 Fix amounts formatting in decoderawtransaction (laanwj)
#11002 4268426 [wallet] return correct error code from resendwallettransaction (jnewbery)
#11029 96a63a3 [RPC] trivial: gettxout no longer shows version of tx (FelixWeis)
#11083 6c2b008 Fix combinerawtransaction RPC help result section (jonasnick)
#11027 07164bb [RPC] Only return hex field once in getrawtransaction (achow101)
#10698 5af6572 Be consistent in calling transactions “replaceable” for Opt-In RBF (TheBlueMatt)
Block and transaction handling
#9801 a8c5751 Removed redundant parameter from mempool.PrioritiseTransaction (gubatron)
#9819 1efc99c Remove harmless read of unusued priority estimates (morcos)
#9822 b7547fa Remove block file location upgrade code (benma)
#9602 30ff3a2 Remove coin age priority and free transactions - implementation (morcos)
#9548 47510ad Remove min reasonable fee (morcos)
#10249 c73af54 Switch CCoinsMap from boost to std unordered_map (sipa)
#9966 2a183de Control mempool persistence using a command line parameter (jnewbery)
#10199 318ea50 Better fee estimates (morcos)
#10196 bee3529 Bugfix: PrioritiseTransaction updates the mempool tx counter (sdaftuar)
#10195 1088b02 Switch chainstate db and cache to per-txout model (sipa)
#10284 c2ab38b Always log debug information for fee calculation in CreateTransaction (morcos)
#10503 efbcf2b Use REJECT_DUPLICATE for already known and conflicted txn (sipa)
#10537 b3eb0d6 Few Minor per-utxo assert-semantics re-adds and tweak (TheBlueMatt)
#10626 8c841a3 doc: Remove outdated minrelaytxfee comment (MarcoFalke)
#10559 234ffc6 Change semantics of HaveCoinInCache to match HaveCoin (morcos)
#10581 7878353 Simplify return values of GetCoin/HaveCoin(InCache) (sipa)
#10684 a381f6a Remove no longer used mempool.exists(outpoint) (morcos)
#10148 d4e551a Use non-atomic flushing with block replay (sipa)
#10685 30c2130 Clarify CCoinsViewMemPool documentation (TheBlueMatt)
#10558 90a002e Address nits from per-utxo change (morcos)
#10706 6859ad2 Improve wallet fee logic and fix GUI bugs (morcos)
#10526 754aa02 Force on-the-fly compaction during pertxout upgrade (sipa)
#10985 d896d5c Add undocumented -forcecompactdb to force LevelDB compactions (sipa)
#10292 e4bbd3d Improved efficiency in COutPoint constructors (mm-s)
#10290 8d6d43e Add -stopatheight for benchmarking (sipa)
P2P protocol and network code
#9726 7639d38 netbase: Do not print an error on connection timeouts through proxy (laanwj)
#9805 5b583ef Add seed.btc.petertodd.org to mainnet DNS seeds (petertodd)
#9861 22f609f Trivial: Debug log ambiguity fix for peer addrs (keystrike)
#9774 90cb2a2 Enable host lookups for -proxy and -onion parameters (jmcorgan)
#9558 7b585cf Clarify assumptions made about when BlockCheck is called (TheBlueMatt)
#10135 e19586a [p2p] Send the correct error code in reject messages (jnewbery)
#9665 eab00d9 Use cached [compact] blocks to respond to getdata messages (TheBlueMatt)
#10215 a077a90 Check interruptNet during dnsseed lookups (TheBlueMatt)
#10234 faf2dea [net] listbanned RPC and QT should show correct banned subnets (jnewbery)
#10134 314ebdf [qa] Fixes segwit block relay test after inv-direct-fetch was disabled (sdaftuar)
#10351 3f57c55 removed unused code in INV message (Greg-Griffith)
#10061 ae78609 [net] Added SetSocketNoDelay() utility function (tjps)
#10408 28c6e8d Net: Improvements to Tor control port parser (str4d)
#10460 5c63d66 Broadcast address every day, not 9 hours (sipa)
#10471 400fdd0 Denote functions CNode::GetRecvVersion() and CNode::GetRefCount() as const (pavlosantoniou)
#10345 67700b3 [P2P] Timeout for headers sync (sdaftuar)
#10564 8d9f45e Return early in IsBanned (gmaxwell)
#10587 de8db47 Net: Fix resource leak in ReadBinaryFile(…) (practicalswift)
#9549 b33ca14 [net] Avoid possibility of NULL pointer dereference in MarkBlockAsInFlight(…) (practicalswift)
#10446 2772dc9 net: avoid extra dns query per seed (theuni)
#10824 9dd6a2b Avoid unnecessary work in SetNetworkActive (promag)
#10948 df3a6f4 p2p: Hardcoded seeds update pre-0.15 branch (laanwj)
#10977 02f4c4a [net] Fix use of uninitialized value in getnetworkinfo(const JSONRPCRequest&) (practicalswift)
#10982 c8b62c7 Disconnect network service bits 6 and 8 until Aug 1, 2018 (TheBlueMatt)
#11012 0e5cff6 Make sure to clean up mapBlockSource if we’ve already seen the block (theuni)
Validation
#9725 67023e9 CValidationInterface Cleanups (TheBlueMatt)
#10178 2584925 Remove CValidationInterface::UpdatedTransaction (TheBlueMatt)
#10201 a6548a4 pass Consensus::Params& to functions in validation.cpp and make them static (mariodian)
#10297 431a548 Simplify DisconnectBlock arguments/return value (sipa)
#10464 f94b7d5 Introduce static DoWarning (simplify UpdateTip) (jtimon)
#10569 2e7d8f8 Fix stopatheight (achow101)
#10192 2935b46 Cache full script execution results in addition to signatures (TheBlueMatt)
#10179 21ed30a Give CValidationInterface Support for calling notifications on the CScheduler Thread (TheBlueMatt)
#10557 66270a4 Make check to distinguish between orphan txs and old txs more efficient (morcos)
#10775 7c2400c nCheckDepth chain height fix (romanornr)
#10821 16240f4 Add SSE4 optimized SHA256 (sipa)
#10854 04d395e Avoid using sizes on non-fixed-width types to derive protocol constants (gmaxwell)
#10945 2a50b11 Update defaultAssumeValid according to release-process.md (gmaxwell)
#10986 2361208 Update chain transaction statistics (sipa)
#11028 6bdf4b3 Avoid masking of difficulty adjustment errors by checkpoints (sipa)
#9533 cb598cf Allow non-power-of-2 signature cache sizes (sipa)
#9208 acd9957 Improve DisconnectTip performance (sdaftuar)
#10618 f90603a Remove confusing MAX_BLOCK_BASE_SIZE (gmaxwell)
#10758 bd92424 Fix some chainstate-init-order bugs (TheBlueMatt)
#10550 b7296bc Don’t return stale data from CCoinsViewCache::Cursor() (ryanofsky)
#10998 2507fd5 Fix upgrade cancel warnings (TheBlueMatt)
#9868 cbdb473 Abstract out the command line options for block assembly (sipa)
Build system
#9727 5f0556d Remove fallbacks for boost_filesystem < v3 (laanwj)
#9788 50a2265 gitian: bump descriptors for master (theuni)
#9794 7ca2f54 Minor update to qrencode package builder (mitchellcash)
#9514 2cc0df1 release: Windows signing script (theuni)
#9921 8b789d8 build: Probe MSG_DONTWAIT in the same way as MSG_NOSIGNAL (laanwj)
#10011 32d1b34 build: Fix typo s/HAVE_DONTWAIT/HAVE_MSG_DONTWAIT (laanwj)
#9946 90dd9e6 Fix build errors if spaces in path or parent directory (pinheadmz)
#10136 81da4c7 build: Disable Wshadow warning (laanwj)
#10166 64962ae Ignore Doxyfile generated from Doxyfile.in template (paveljanik)
#10239 0416ea9 Make Boost use std::atomic internally (sipa)
#10228 27faa6c build: regenerate bitcoin-config.h as necessary (theuni)
#10273 8979f45 [scripts] Minor improvements to macdeployqtplus script (chrisgavin)
#10325 a26280b 0.15.0 Depends Updates (fanquake)
#10328 79aeff6 Update contrib/debian to latest Ubuntu PPA upload (TheBlueMatt)
#7522 d25449f Bugfix: Only use git for build info if the repository is actually the right one (luke-jr)
#10489 e654d61 build: silence gcc7’s implicit fallthrough warning (theuni)
#10549 ad1a13e Avoid printing generic and duplicated “checking for QT” during ./configure (drizzt)
#10628 8465b68 [depends] expat 2.2.1 (fanquake)
#10806 db825d2 build: verify that the assembler can handle crc32 functions (theuni)
#10766 b4d03be Building Environment: Set ARFLAGS to cr (ReneNyffenegger)
#10803 91edda8 Explicitly search for bdb5.3 (pstratem)
#10855 81560b0 random: only use getentropy on openbsd (theuni)
#10508 1caafa6 Run Qt wallet tests on travis (ryanofsky)
#10851 e222618 depends: fix fontconfig with newer glibc (theuni)
#10971 88b1e4b build: fix missing sse42 in depends builds (theuni)
#11097 129b03f gitian: quick hack to fix version string in releases (theuni)
#10039 919aaf6 Fix compile errors with Qt 5.3.2 and Boost 1.55.0 (ryanofsky)
#10168 7032021 Fix build warning from #error text (jnewbery)
#10301 318392c Check if sys/random.h is required for getentropy (jameshilliard)
GUI
#9724 1a9fd5c Qt/Intro: Add explanation of IBD process (luke-jr)
#9834 b00ba62 qt: clean up initialize/shutdown signals (benma)
#9481 ce01e62 [Qt] Show more significant warning if we fall back to the default fee (jonasschnelli)
#9974 b9f930b Add basic Qt wallet test (ryanofsky)
#9690 a387d3a Change ‘Clear’ button string to ‘Reset’ (da2x)
#9592 9c7b7cf [Qt] Add checkbox in the GUI to opt-in to RBF when creating a transaction (ryanofsky)
#10098 2b477e6 Make qt wallet test compatible with qt4 (ryanofsky)
#9890 1fa4ae6 Add a button to open the config file in a text editor (ericshawlinux)
#10156 51833a1 Fix for issues with startup and multiple monitors on windows (AllanDoensen)
#10177 de01da7 Changed “Send” button default status from true to false (KibbledJiveElkZoo)
#10221 e96486c Stop treating coinbase outputs differently in GUI: show them at 1conf (TheBlueMatt)
#10231 987a6c0 [Qt] Reduce a significant cs_main lock freeze (jonasschnelli)
#10242 f6f3b58 [qt] Don’t call method on null WalletModel object (ryanofsky)
#10093 a3e756b [Qt] Don’t add arguments of sensitive command to console window (jonasschnelli)
#10362 95546c8 [GUI] Add OSX keystroke to RPCConsole info (spencerlievens)
#9697 962cd3f [Qt] simple fee bumper with user verification (jonasschnelli)
#10390 e477516 [wallet] remove minimum total fee option (instagibbs)
#10420 4314544 Add Qt tests for wallet spends & bumpfee (ryanofsky)
#10454 c1c9a95 Fix broken q4 test build (ryanofsky)
#10449 64beb13 Overhaul Qt fee bumper (jonasschnelli)
#10582 7c72fb9 Pass in smart fee slider value to coin control dialog (morcos)
#10673 4c72cc3 [qt] Avoid potential null pointer dereference in TransactionView::exportClicked() (practicalswift)
#10769 8fdd23a [Qt] replace fee slider with a Dropdown, extend conf. targets (jonasschnelli)
#10870 412b466 [Qt] Use wallet 0 in rpc console if running with multiple wallets (jonasschnelli)
#10988 a9dd111 qt: Increase BLOCK_CHAIN_SIZE constants (laanwj)
#10644 e292140 Slightly overhaul NSI pixmaps (jonasschnelli)
#10660 0c3542e Allow to cancel the txdb upgrade via splashscreen keypress ‘q’ (jonasschnelli)
#11332 46c8d23 Fix possible crash with invalid nCustomFeeRadio in QSettings (achow101, TheBlueMatt)
Wallet
#9359 f7ec7cf Add test for CWalletTx::GetImmatureCredit() returning stale values (ryanofsky)
#9576 56ab672 [wallet] Remove redundant initialization (practicalswift)
#9333 fa625b0 Document CWalletTx::mapValue entries and remove erase of nonexistent “version” entry (ryanofsky)
#9906 72fb515 Disallow copy constructor CReserveKeys (instagibbs)
#9369 3178b2c Factor out CWallet::nTimeSmart computation into a method (ryanofsky)
#9830 afcd7c0 Add safe flag to listunspent result (NicolasDorier)
#9993 c49355c Initialize nRelockTime (pstratem)
#9818 3d857f3 Save watch only key timestamps when reimporting keys (ryanofsky)
#9294 f34cdcb Use internal HD chain for change outputs (hd split) (jonasschnelli)
#10164 e183ea2 Wallet: reduce excess logic InMempool() (kewde)
#10186 c9ff4f8 Remove SYNC_TRANSACTION_NOT_IN_BLOCK magic number (jnewbery)
#10226 64c45aa wallet: Use boost to more portably ensure -wallet specifies only a filename (luke-jr)
#9827 c91ca0a Improve ScanForWalletTransactions return value (ryanofsky)
#9951 fa1ac28 Wallet database handling abstractions/simplifications (laanwj)
#10265 c29a0d4 [wallet/moveonly] Check non-null pindex before potentially referencing (kallewoof)
#10283 a550f6e Cleanup: reduce to one GetMinimumFee call signature (morcos)
#10294 e2b99b1 [Wallet] unset change position when there is no change (instagibbs)
#10115 d3dce0e Avoid reading the old hd master key during wallet encryption (TheBlueMatt)
#10341 18c9deb rpc/wallet: Workaround older UniValue which returns a std::string temporary for get_str (luke-jr)
#10308 94e5227 [wallet] Securely erase potentially sensitive keys/values (tjps)
#10257 ea1fd43 [test] Add test for getmemoryinfo (jimmysong)
#10295 ce8176d [qt] Move some WalletModel functions into CWallet (ryanofsky)
#10506 7cc2c67 Fix bumpfee test after #10449 (ryanofsky)
#10500 098b01d Avoid CWalletTx copies in GetAddressBalances and GetAddressGroupings (ryanofsky)
#10455 0747d33 Simplify feebumper minimum fee code slightly (ryanofsky)
#10522 2805d60 [wallet] Remove unused variables (practicalswift)
#8694 177433a Basic multiwallet support (luke-jr)
#10598 7a74f88 Supress struct/class mismatch warnings introduced in #10284 (paveljanik)
#9343 209eef6 Don’t create change at dust limit (morcos)
#10744 ed88e31 Use method name via func macro (darksh1ne)
#10712 e8b9523 Add change output if necessary to reduce excess fee (morcos)
#10816 1c011ff Properly forbid -salvagewallet and -zapwallettxes for multi wallet (morcos)
#10235 5cfdda2 Track keypool entries as internal vs external in memory (TheBlueMatt)
#10330 bf0a08b [wallet] fix zapwallettxes interaction with persistent mempool (jnewbery)
#10831 0b01935 Batch flushing operations to the walletdb during top up and increase keypool size (gmaxwell)
#10795 7b6e8bc No longer ever reuse keypool indexes (TheBlueMatt)
#10849 bde4f93 Multiwallet: simplest endpoint support (jonasschnelli)
#10817 9022aa3 Redefine Dust and add a discard_rate (morcos)
#10883 bf3b742 Rename -usewallet to -rpcwallet (morcos)
#10604 420238d [wallet/tests] Add listwallets RPC, include wallet name in getwalletinfo and add multiwallet test (jnewbery)
#10885 70888a3 Reject invalid wallets (promag)
#10949 af56397 Clarify help message for -discardfee (morcos)
#10942 2e857bb Eliminate fee overpaying edge case when subtracting fee from recipients (morcos)
#10995 fa64636 Fix resendwallettransactions assert failure if -walletbroadcast=0 (TheBlueMatt)
#11022 653a46d Basic keypool topup (jnewbery)
#11081 9fe1f6b Add length check for CExtKey deserialization (jonasschnelli, guidovranken)
#11044 4ef8374 [wallet] Keypool topup cleanups (jnewbery)
#11145 e51bb71 Fix rounding bug in calculation of minimum change (morcos)
#9605 779f2f9 Use CScheduler for wallet flushing, remove ThreadFlushWalletDB (TheBlueMatt)
#10108 4e3efd4 ApproximateBestSubset should take inputs by reference, not value (RHavar)
Tests and QA
#9744 8efd1c8 Remove unused module from rpc-tests (34ro)
#9657 7ff4a53 Improve rpc-tests.py (jnewbery)
#9766 7146d96 Add –exclude option to rpc-tests.py (jnewbery)
#9577 d6064a8 Fix docstrings in qa tests (jnewbery)
#9823 a13a417 qa: Set correct path for binaries in rpc tests (MarcoFalke)
#9847 6206252 Extra test vector for BIP32 (sipa)
#9350 88c2ae3 [Trivial] Adding label for amount inside of tx_valid/tx_invalid.json (Christewart)
#9888 36afd4d travis: Verify commits only for one target (MarcoFalke)
#9904 58861ad test: Fail if InitBlockIndex fails (laanwj)
#9828 67c5cc1 Avoid -Wshadow warnings in wallet_tests (ryanofsky)
#9832 48c3429 [qa] assert_start_raises_init_error (NicolasDorier)
#9739 9d5fcbf Fix BIP68 activation test (jnewbery)
#9547 d32581c bench: Assert that division by zero is unreachable (practicalswift)
#9843 c78adbf Fix segwit getblocktemplate test (jnewbery)
#9929 d5ce14e tests: Delete unused function _rpchost_to_args (laanwj)
#9555 19be26a [test] Avoid reading a potentially uninitialized variable in tx_invalid-test (transaction_tests.cpp) (practicalswift)
#9945 ac23a7c Improve logging in bctest.py if there is a formatting mismatch (jnewbery)
#9768 8910b47 [qa] Add logging to test_framework.py (jnewbery)
#9972 21833f9 Fix extended rpc tests broken by #9768 (jnewbery)
#9977 857d1e1 QA: getblocktemplate_longpoll.py should always use >0 fee tx (sdaftuar)
#9970 3cc13ea Improve readability of segwit.py, smartfees.py (sdaftuar)
#9497 2c781fb CCheckQueue Unit Tests (JeremyRubin)
#10024 9225de2 [trivial] Use log.info() instead of print() in remaining functional test cases (jnewbery)
#9956 3192e52 Reorganise qa directory (jnewbery)
#10017 02d64bd combine_logs.py - aggregates log files from multiple bitcoinds during functional tests (jnewbery)
#10047 dfef6b6 [tests] Remove unused variables and imports (practicalswift)
#9701 a230b05 Make bumpfee tests less fragile (ryanofsky)
#10053 ca20923 [test] Allow functional test cases to be skipped (jnewbery)
#10052 a0b1e57 [test] Run extended tests once daily in Travis (jnewbery)
#10069 1118493 [QA] Fix typo in fundrawtransaction test (NicolasDorier)
#10083 c044f03 [QA] Renaming rawTx into rawtx (NicolasDorier)
#10073 b1a4f27 Actually run assumevalid.py (jnewbery)
#9780 c412fd8 Suppress noisy output from qa tests in Travis (jnewbery)
#10096 79af9fb Check that all test scripts in test/functional are being run (jnewbery)
#10076 5b029aa [qa] combine_logs: Use ordered list for logfiles (MarcoFalke)
#10107 f2734c2 Remove unused variable. Remove accidental trailing semicolons in Python code (practicalswift)
#10109 8ac8041 Remove SingleNodeConnCB (jnewbery)
#10114 edc62c9 [tests] sync_with_ping should assert that ping hasn’t timed out (jnewbery)
#10128 427d2fd Speed Up CuckooCache tests (JeremyRubin)
#10072 12af74b Remove sources of unreliablility in extended functional tests (jnewbery)
#10077 ebfd653 [qa] Add setnetworkactive smoke test (MarcoFalke)
#10152 080d7c7 [trivial] remove unused line in Travis config (jnewbery)
#10159 df1ca9e [tests] color test results and sort alphabetically (jnewbery)
#10124 88799ea [test] Suppress test logging spam (jnewbery)
#10142 ed09dd3 Run bitcoin_test-qt under minimal QPA platform (ryanofsky)
#9949 a27dbc5 [bench] Avoid function call arguments which are pointers to uninitialized values (practicalswift)
#10187 b44adf9 tests: Fix test_runner return value in case of skipped test (laanwj)
#10197 d86bb07 [tests] Functional test warnings (jnewbery)
#10219 9111df9 Tests: Order Python Tests Differently (jimmysong)
#10229 f3db4c6 Tests: Add test for getdifficulty (jimmysong)
#10224 2723bcd [test] Add test for getaddednodeinfo (jimmysong)
#10023 c530c15 [tests] remove maxblocksinflight.py (functionality covered by other test) (jnewbery)
#10097 1b25b6d Move zmq test skipping logic into individual test case (jnewbery)
#10272 54e2d87 [Tests] Prevent warning: variable ‘x’ is uninitialized (paveljanik)
#10225 e0a7e19 [test] Add aborttrescan tests (kallewoof)
#10278 8254a8a [test] Add Unit Test for GetListenPort (jimmysong)
#10280 47535d7 [test] Unit test amount.h/amount.cpp (jimmysong)
#10256 80c3a73 [test] Add test for gettxout to wallet.py (jimmysong)
#10264 492d22f [test] Add tests for getconnectioncount, getnettotals and ping (jimmysong)
#10169 8f3e384 [tests] Remove func test code duplication (jnewbery)
#10198 dc8fc0c [tests] Remove is_network_split from functional test framework (jnewbery)
#10255 3c5e6c9 [test] Add test for listaddressgroupings (jimmysong)
#10137 75171f0 Remove unused import. Remove accidental trailing semicolons (practicalswift)
#10307 83073de [tests] allow zmq test to be run in out-of-tree builds (jnewbery)
#10344 e927483 [tests] Fix abandonconflict.py intermittency (jnewbery)
#10318 170bc2c [tests] fix wait_for_inv() (jnewbery)
#10171 fff72de [tests] Add node methods to test framework (jnewbery)
#10352 23d78c4 test: Add elapsed time to RPC tracing (laanwj)
#10342 6a796b2 [tests] Improve mempool_persist test (jnewbery)
#10287 776ba23 [tests] Update Unit Test for addrman.h/addrman.cpp (jimmysong)
#10365 7ee5236 [tests] increase timeouts in sendheaders test (jnewbery)
#10361 f6241b3 qa: disablewallet: Check that wallet is really disabled (MarcoFalke)
#10371 4b766fc [tests] Clean up addrman_tests.cpp (jimmysong)
#10253 87abe20 [test] Add test for getnetworkhashps (jimmysong)
#10376 8bd16ee [tests] fix disconnect_ban intermittency (jnewbery)
#10374 5411997 qa: Warn when specified test is not found (MarcoFalke)
#10405 0542978 tests: Correct testcase in script_tests.json for large number OP_EQUAL (laanwj)
#10429 6b99daf tests: fix spurious addrman test failure (theuni)
#10433 8e57256 [tests] improve tmpdir structure (jnewbery)
#10415 217b416 [tests] Speed up fuzzing by ~200x when using afl-fuzz (practicalswift)
#10445 b4b057a Add test for empty chain and reorg consistency for gettxoutsetinfo (gmaxwell)
#10423 1aefc94 [tests] skipped tests should clean up after themselves (jnewbery)
#10359 329fc1d [tests] functional tests should call BitcoinTestFramework start/stop node methods (jnewbery)
#10514 e103b3f Bugfix: missing == 0 after randrange (sipa)
#10515 c871f32 [test] Add test for getchaintxstats (jimmysong)
#10509 bea5b00 Remove xvfb configuration from travis (ryanofsky)
#10535 30853e1 [qa] fundrawtx: Fix shutdown race (MarcoFalke)
#9909 300f8e7 tests: Add FindEarliestAtLeast test for edge cases (ryanofsky)
#10331 75e898c Share config between util and functional tests (jnewbery)
#10321 e801084 Use FastRandomContext for all tests (sipa)
#10524 6c2d81f [tests] Remove printf(…) (practicalswift)
#10547 71ab6e5 [tests] Use FastRandomContext instead of boost::random::{mt19937,uniform_int_distribution} (practicalswift)
#10551 6702617 [Tests] Wallet encryption functional tests (achow101)
#10555 643fa0b [tests] various improvements to zmq_test.py (jnewbery)
#10533 d083bd9 [tests] Use cookie auth instead of rpcuser and rpcpassword (achow101)
#10632 c68a9a6 qa: Add stopatheight test (MarcoFalke)
#10636 4bc853b [qa] util: Check return code after closing bitcoind proc (MarcoFalke)
#10662 e0a7801 Initialize randomness in benchmarks (achow101)
#10612 7c87a9c The young person’s guide to the test_framework (jnewbery)
#10659 acb1153 [qa] blockchain: Pass on closed connection during generate call (MarcoFalke)
#10690 416af3e [qa] Bugfix: allow overriding extra_args in ComparisonTestFramework (sdaftuar)
#10556 65cc7aa Move stop/start functions from utils.py into BitcoinTestFramework (jnewbery)
#10704 dd07f47 [tests] nits in dbcrash.py (jnewbery)
#10743 be82498 [test] don’t run dbcrash.py on Travis (jnewbery)
#10761 d3b5870 [tests] fix replace_by_fee.py (jnewbery)
#10759 1d4805c Fix multi_rpc test for hosts that dont default to utf8 (TheBlueMatt)
#10190 e4f226a [tests] mining functional tests (including regression test for submitblock) (jnewbery)
#10739 1fc783f test: Move variable state down where it is used (paveljanik)
#9980 fee0d80 Fix mem access violation merkleblock (Christewart)
#10893 0c173a1 [QA] Avoid running multiwallet.py twice (jonasschnelli)
#10927 9d5e8f9 test: Make sure wallet.backup is created in temp path (laanwj)
#10899 f29d5db [test] Qt: Use _putenv_s instead of setenv on Windows builds (brianmcmichael)
#10912 5c8eb79 [tests] Fix incorrect memory_cleanse(…) call in crypto_tests.cpp (practicalswift)
#11001 fa8a063 [tests] Test disconnecting unsupported service bits logic (jnewbery)
#10695 929fd72 [qa] Rewrite BIP65/BIP66 functional tests (sdaftuar)
#10963 ecd2135 [bench] Restore format state of cout after printing with std::fixed/setprecision (practicalswift)
#11025 e5d26e4 qa: Fix inv race in example_test (MarcoFalke)
#10765 2c811e0 Tests: address placement should be deterministic by default (ReneNyffenegger)
#11000 ac016e1 test: Add resendwallettransactions functional tests (promag)
#11032 aeb3175 [qa] Fix block message processing error in sendheaders.py (sdaftuar)
#10105 0b9fb68 [tests] fixup - make all Travis test runs quiet, non just cron job runs (jnewbery)
#10222 6ce7337 [tests] test_runner - check unicode (jnewbery)
#10327 35da2ae [tests] remove import-abort-rescan.py (jnewbery)
#11023 bf74d37 [tests] Add option to attach a python debugger if functional test fails (jnewbery)
#10565 8c2098a [coverage] Remove subtrees and benchmarks from coverage report (achow101)
Miscellaneous
#9871 be8ba2c Add a tree sha512 hash to merge commits (sipa)
#9821 d19d45a util: Specific GetOSRandom for Linux/FreeBSD/OpenBSD (laanwj)
#9903 ba80a68 Docs: add details to -rpcclienttimeout doc (ian-kelling)
#9910 53c300f Docs: correct and elaborate -rpcbind doc (ian-kelling)
#9905 01b7cda [contrib] gh-merge: Move second sha512 check to the end (MarcoFalke)
#9880 4df8213 Verify Tree-SHA512s in merge commits, enforce sigs are not SHA1 (TheBlueMatt)
#9932 00c13ea Fix verify-commits on travis and always check top commit’s tree (TheBlueMatt)
#9952 6996e06 Add historical release notes for 0.14.0 (laanwj)
#9940 fa99663 Fix verify-commits on OSX, update for new bad Tree-SHA512, point travis to different keyservers (TheBlueMatt)
#9963 8040ae6 util: Properly handle errors during log message formatting (laanwj)
#9984 cce056d devtools: Make github-merge compute SHA512 from git, instead of worktree (laanwj)
#9995 8bcf934 [doc] clarify blockchain size and pruning (askmike)
#9734 0c17afc Add updating of chainTxData to release process (sipa)
#10063 530fcbd add missing spaces so that markdown recognizes headline (flack)
#10085 db1ae54 Docs: remove ‘noconnect’ option (jlopp)
#10090 8e4f7e7 Update bitcoin.conf with example for pruning (coinables)
#9424 1a5aaab Change LogAcceptCategory to use uint32_t rather than sets of strings (gmaxwell)
#10036 fbf36ca Fix init README format to render correctly on github (jlopp)
#10058 a2cd0b0 No need to use OpenSSL malloc/free (tjps)
#10123 471ed00 Allow debug logs to be excluded from specified component (jnewbery)
#10104 fadf078 linearize script: Option to use RPC cookie (achow101)
#10162 a3a2160 [trivial] Log calls to getblocktemplate (jnewbery)
#10155 928695b build: Deduplicate version numbers (laanwj)
#10211 a86255b [doc] Contributor fixes & new “finding reviewers” section (kallewoof)
#10250 1428f30 Fix some empty vector references (sipa)
#10270 95f5e44 Remove Clang workaround for Boost 1.46 (fanquake)
#10263 cb007e4 Trivial: fix fee estimate write error log message (CryptAxe)
#9670 bd9ec0e contrib: github-merge improvements (laanwj)
#10260 1d75597 [doc] Minor corrections to osx dependencies (fanquake)
#10189 750c5a5 devtools/net: add a verifier for scriptable changes. Use it to make CNode::id private (theuni)
#10322 bc64b5a Use hardware timestamps in RNG seeding (sipa)
#10381 7f2b9e0 Shadowing warnings are not enabled by default, update doc accordingly (paveljanik)
#10380 b6ee855 [doc] Removing comments about dirty entries on txmempool (madeo)
#10383 d0c37ee [logging] log system time and mock time (jnewbery)
#10404 b45a52a doc: Add logging to FinalizeNode() (sdaftuar)
#10388 526e839 Output line to debug.log when IsInitialBlockDownload latches to false (morcos)
#10372 15254e9 Add perf counter data to GetStrongRandBytes state in scheduler (TheBlueMatt)
#10461 55b72f3 Update style guide (sipa)
#10486 10e8c0a devtools: Retry after signing fails in github-merge (laanwj)
#10447 f259263 Make bitcoind invalid argument error message specific (laanwj)
#10495 6a38b79 contrib: Update location of seeds.txt (laanwj)
#10469 b6b150b Fixing typo in rpcdump.cpp help message (keystrike)
#10451 27b9931 contrib/init/bitcoind.openrcconf: Don’t disable wallet by default (luke-jr)
#10323 00d3692 Update to latest libsecp256k1 master (sipa)
#10422 cec9e1e Fix timestamp in fee estimate debug message (morcos)
#10566 5d034ee [docs] Use the “domain name setup” image (previously unused) in the gitian docs (practicalswift)
#10534 a514ac3 Clarify prevector::erase and avoid swap-to-clear (sipa)
#10575 22ec768 Header include guideline (sipa)
#10480 fbf5d3b Improve commit-check-script.sh (sipa)
#10502 1ad3d4e scripted-diff: Remove BOOST_FOREACH, Q_FOREACH and PAIRTYPE (jtimon)
#10377 b63be2c Use rdrand as entropy source on supported platforms (sipa)
#9895 228c319 Turn TryCreateDirectory() into TryCreateDirectories() (benma)
#10602 d76e84a Make clang-format use C++11 features (practicalswift)
#10623 c38f540 doc: Add 0.14.2 release notes (MarcoFalke)
#10276 b750b33 contrib/verifybinaries: allow filtering by platform (knocte)
#10248 01c4b14 Rewrite addrdb with less duplication using CHashVerifier (sipa)
#10577 232508f Add an explanation of quickly hashing onto a non-power of two range (gmaxwell)
#10608 eee398f Add a comment explaining the use of MAX_BLOCK_BASE_SIZE (gmaxwell)
#10728 7397af9 fix typo in help text for removeprunedfunds (AkioNak)
#10193 6dbcc74 scripted-diff: Remove #include <boost/foreach.hpp> (jtimon)
#10676 379aed0 document script-based return fields for validateaddress (instagibbs)
#10651 cef4b5c Verify binaries from bitcoincore.org and bitcoin.org (TheBlueMatt)
#10786 ca4c545 Add PR description to merge commit in github-merge.py (sipa)
#10812 c5904e8 [utils] Allow bitcoin-cli’s -rpcconnect option to be used with square brackets (jnewbery)
#10842 3895e25 Fix incorrect Doxygen tag (@ince → @since). Doxygen parameter name matching (practicalswift)
#10681 df0793f add gdb attach process to test README (instagibbs)
#10789 1124328 Punctuation/grammer fixes in rpcwallet.cpp (stevendlander)
#10655 78f307b Properly document target_confirmations in listsinceblock (RHavar)
#10917 5c003cb developer-notes: add reference to snake_case and PascalCase (benma)
#11003 4b5a7ce Docs: Capitalize bullet points in CONTRIBUTING guide (eklitzke)
#10968 98aa3f6 Add instructions for parallel gitian builds (coblee)
#11076 1c4b9b3 0.15 release-notes nits: fix redundancy, remove accidental parenthesis & fix range style (practicalswift)
#11090 8f0121c Update contributor names in release-notes.md (Derek701)
#11056 cbdd338 disable jni in builds (instagibbs)
#11080 2b59cfb doc: Update build-openbsd for 6.1 (laanwj)
#11119 0a6af47 [doc] build-windows: Mention that only trusty works (MarcoFalke)
#11108 e8ad101 Changing -txindex requires -reindex, not -reindex-chainstate (TheBlueMatt)
#9792 342b9bc FastRandomContext improvements and switch to ChaCha20 (sipa)
#9505 67ed40e Prevector Quick Destruct (JeremyRubin)
#10820 ef37f20 Use cpuid intrinsics instead of asm code (sipa)
#9999 a328904 [LevelDB] Plug leveldb logs to bitcoin logs (NicolasDorier)
#9693 c5e9e42 Prevent integer overflow in ReadVarInt (gmaxwell)
#10129 351d0ad scheduler: fix sub-second precision with boost < 1.50 (theuni)
#10153 fade788 logging: Fix off-by-one for shrinkdebugfile default (MarcoFalke)
#10305 c45da32 Fix potential NPD introduced in b297426c (TheBlueMatt)
#10338 daf3e7d Maintain state across GetStrongRandBytes calls (sipa)
#10544 a4fe077 Update to LevelDB 1.20 (sipa)
#10614 cafe24f random: fix crash on some 64bit platforms (theuni)
#10714 2a09a38 Avoid printing incorrect block indexing time due to uninitialized variable (practicalswift)
#10837 8bc6d1f Fix resource leak on error in GetDevURandom (corebob)
#10832 89bb036 init: Factor out AppInitLockDataDirectory and fix startup core dump issue (laanwj)
#10914 b995a37 Add missing lock in CScheduler::AreThreadsServicingQueue() (TheBlueMatt)
#10958 659c096 Update to latest Bitcoin patches for LevelDB (sipa)
#10919 c1c671f Fix more init bugs (TheBlueMatt)
Credits
Thanks to everyone who directly contributed to this release:

ロハン ダル
Ahmad Kazi
aideca
Akio Nakamura
Alex Morcos
Allan Doensen
Andres G. Aragoneses
Andrew Chow
Angel Leon
Awemany
Bob McElrath
Brian McMichael
BtcDrak
Charlie Lee
Chris Gavin
Chris Stewart
Cory Fields
CryptAxe
Dag Robole
Daniel Aleksandersen
Daniel Cousens
darksh1ne
Dimitris Tsapakidis
Eric Shaw
Evan Klitzke
fanquake
Felix Weis
flack
Guido Vranken
Greg Griffith
Gregory Maxwell
Gregory Sanders
Ian Kelling
Jack Grigg
James Evans
James Hilliard
Jameson Lopp
Jeremy Rubin
Jimmy Song
João Barbosa
Johnathan Corgan
John Newbery
Jonas Schnelli
Jorge Timón
Karl-Johan Alm
kewde
KibbledJiveElkZoo
Kirit Thadaka
kobake
Kyle Honeycutt
Lawrence Nahum
Luke Dashjr
Marco Falke
Marcos Mayorga
Marijn Stollenga
Mario Dian
Mark Friedenbach
Marko Bencun
Masahiko Hyuga
Matt Corallo
Matthew Zipkin
Matthias Grundmann
Michael Goldstein
Michael Rotarius
Mikerah
Mike van Rossum
Mitchell Cash
Nicolas Dorier
Patrick Strateman
Pavel Janík
Pavlos Antoniou
Pavol Rusnak
Pedro Branco
Peter Todd
Pieter Wuille
practicalswift
René Nyffenegger
Ricardo Velhote
romanornr
Russell Yanofsky
Rusty Russell
Ryan Havar
shaolinfry
Shigeya Suzuki
Simone Madeo
Spencer Lievens
Steven D. Lander
Suhas Daftuar
Takashi Mitsuta
Thomas Snider
Timothy Redaelli
tintinweb
tnaka
Warren Togami
Wladimir J. van der Laan
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.15.1 released
11 November 2017

How to Upgrade
Compatibility
Notable changes
0.15.1 Change log
- {:.}
Mining
- {:.}
RPC and other APIs
- {:.}
P2P protocol and network code
- {:.}
Validation
- {:.}
Build system
- {:.}
GUI
- {:.}
Wallet
- {:.}
Tests and QA
- {:.}
Miscellaneous
Credits
Bitcoin Core version 0.15.1 is not available for security reasons:

https://bitcoincore.org/bin/bitcoin-core-0.15.1/

or

https://bitcoin.org/bin/bitcoin-core-0.15.1/

This is a new minor version release, including various bugfixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

The first time you run version 0.15.0 or higher, your chainstate database will be converted to a new format, which will take anywhere from a few minutes to half an hour, depending on the speed of your machine.

The file format of fee_estimates.dat changed in version 0.15.0. Hence, a downgrade from version 0.15 or upgrade to version 0.15 will cause all fee estimates to be discarded.

Note that the block database format also changed in version 0.8.0 and there is no automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading directly from 0.7.x and earlier without redownloading the blockchain is not supported. However, as usual, old wallet versions are still supported.

Downgrading warning
The chainstate database for this release is not compatible with previous releases, so if you run 0.15 and then decide to switch back to any older version, you will need to run the old release with the -reindex-chainstate option to rebuild the chainstate data structures in the old format.

If your node has pruning enabled, this will entail re-downloading and processing the entire blockchain.

Compatibility
Bitcoin Core is extensively tested on multiple operating systems using the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.

Bitcoin Core should also work on most other Unix-like systems but is not frequently tested on them.

Notable changes
Network fork safety enhancements
A number of changes to the way Bitcoin Core deals with peer connections and invalid blocks have been made, as a safety precaution against blockchain forks and misbehaving peers.

Unrequested blocks with less work than the minimum-chain-work are now no longer processed even if they have more work than the tip (a potential issue during IBD where the tip may have low-work). This prevents peers wasting the resources of a node.

Peers which provide a chain with less work than the minimum-chain-work during IBD will now be disconnected.

For a given outbound peer, we now check whether their best known block has at least as much work as our tip. If it doesn’t, and if we still haven’t heard about a block with sufficient work after a 20 minute timeout, then we send a single getheaders message, and wait 2 more minutes. If after two minutes their best known block has insufficient work, we disconnect that peer. We protect 4 of our outbound peers from being disconnected by this logic to prevent excessive network topology changes as a result of this algorithm, while still ensuring that we have a reasonable number of nodes not known to be on bogus chains.

Outbound (non-manual) peers that serve us block headers that are already known to be invalid (other than compact block announcements, because BIP 152 explicitly permits nodes to relay compact blocks before fully validating them) will now be disconnected.

If the chain tip has not been advanced for over 30 minutes, we now assume the tip may be stale and will try to connect to an additional outbound peer. A periodic check ensures that if this extra peer connection is in use, we will disconnect the peer that least recently announced a new block.

The set of all known invalid-themselves blocks (i.e. blocks which we attempted to connect but which were found to be invalid) are now tracked and used to check if new headers build on an invalid chain. This ensures that everything that descends from an invalid block is marked as such.

Miner block size limiting deprecated
Though blockmaxweight has been preferred for limiting the size of blocks returned by getblocktemplate since 0.13.0, blockmaxsize remained as an option for those who wished to limit their block size directly. Using this option resulted in a few UI issues as well as non-optimal fee selection and ever-so-slightly worse performance, and has thus now been deprecated. Further, the blockmaxsize option is now used only to calculate an implied blockmaxweight, instead of limiting block size directly. Any miners who wish to limit their blocks by size, instead of by weight, will have to do so manually by removing transactions from their block template directly.

GUI settings backed up on reset
The GUI settings will now be written to guisettings.ini.bak in the data directory before wiping them when the -resetguisettings argument is used. This can be used to retroactively troubleshoot issues due to the GUI settings.

Duplicate wallets disallowed
Previously, it was possible to open the same wallet twice by manually copying the wallet file, causing issues when both were opened simultaneously. It is no longer possible to open copies of the same wallet.

Debug -minimumchainwork argument added
A hidden debug argument -minimumchainwork has been added to allow a custom minimum work value to be used when validating a chain.

Low-level RPC changes
The “currentblocksize” value in getmininginfo has been removed.

dumpwallet no longer allows overwriting files. This is a security measure as well as prevents dangerous user mistakes.

backupwallet will now fail when attempting to backup to source file, rather than destroying the wallet.

listsinceblock will now throw an error if an unknown blockhash argument value is passed, instead of returning a list of all wallet transactions since the genesis block. The behaviour is unchanged when an empty string is provided.

0.15.1 Change log
Mining
#11100 7871a7d Fix confusing blockmax{size,weight} options, dont default to throwing away money (TheBlueMatt)
RPC and other APIs
#10859 2a5d099 gettxout: Slightly improve doc and tests (jtimon)
#11267 b1a6c94 update cli for estimate*fee argument rename (laanwj)
#11483 20cdc2b Fix importmulti bug when importing an already imported key (pedrobranco)
#9937 a43be5b Prevent dumpwallet from overwriting files (laanwj)
#11465 405e069 Update named args documentation for importprivkey (dusty-wil)
#11131 b278a43 Write authcookie atomically (laanwj)
#11565 7d4546f Make listsinceblock refuse unknown block hash (ryanofsky)
#11593 8195cb0 Work-around an upstream libevent bug (theuni)
P2P protocol and network code
#11397 27e861a Improve and document SOCKS code (laanwj)
#11252 0fe2a9a When clearing addrman clear mapInfo and mapAddr (instagibbs)
#11527 a2bd86a Remove my testnet DNS seed (schildbach)
#10756 0a5477c net processing: swap out signals for an interface class (theuni)
#11531 55b7abf Check that new headers are not a descendant of an invalid block (more effeciently) (TheBlueMatt)
#11560 49bf090 Connect to a new outbound peer if our tip is stale (sdaftuar)
#11568 fc966bb Disconnect outbound peers on invalid chains (sdaftuar)
#11578 ec8dedf Add missing lock in ProcessHeadersMessage(…) (practicalswift)
#11456 6f27965 Replace relevant services logic with a function suite (TheBlueMatt)
#11490 bf191a7 Disconnect from outbound peers with bad headers chains (sdaftuar)
Validation
#10357 da4908c Allow setting nMinimumChainWork on command line (sdaftuar)
#11458 2df65ee Don’t process unrequested, low-work blocks (sdaftuar)
Build system
#11440 b6c0209 Fix validationinterface build on super old boost/clang (TheBlueMatt)
#11530 265bb21 Add share/rpcuser to dist. source code archive (MarcoFalke)
GUI
#11334 19d63e8 Remove custom fee radio group and remove nCustomFeeRadio setting (achow101)
#11198 7310f1f Fix display of package name on ‘open config file’ tooltip (esotericnonsense)
#11015 6642558 Add delay before filtering transactions (lclc)
#11338 6a62c74 Backup former GUI settings on -resetguisettings (laanwj)
#11335 8d13b42 Replace save	restoreWindowGeometry with Qt functions (MeshCollider)
#11237 2e31b1d Fixing division by zero in time remaining (MeshCollider)
#11247 47c02a8 Use IsMine to validate custom change address (MarcoFalke)
Wallet
#11017 9e8aae3 Close DB on error (kallewoof)
#11225 6b4d9f2 Update stored witness in AddToWallet (sdaftuar)
#11126 2cb720a Acquire cs_main lock before cs_wallet during wallet initialization (ryanofsky)
#11476 9c8006d Avoid opening copied wallet databases simultaneously (ryanofsky)
#11492 de7053f Fix leak in CDB constructor (promag)
#11376 fd79ed6 Ensure backupwallet fails when attempting to backup to source file (tomasvdw)
#11326 d570aa4 Fix crash on shutdown with invalid wallet (MeshCollider)
Tests and QA
#11399 a825d4a Fix bip68-sequence rpc test (jl2012)
#11150 847c75e Add getmininginfo test (mess110)
#11407 806c78f add functional test for mempoolreplacement command line arg (instagibbs)
#11433 e169349 Restore bitcoin-util-test py2 compatibility (MarcoFalke)
#11308 2e1ac70 zapwallettxes: Wait up to 3s for mempool reload (MarcoFalke)
#10798 716066d test bitcoin-cli (jnewbery)
#11443 019c492 Allow “make cov” out-of-tree; Fix rpc mapping check (MarcoFalke)
#11445 51bad91 0.15.1 Backports (MarcoFalke)
#11319 2f0b30a Fix error introduced into p2p-segwit.py, and prevent future similar errors (sdaftuar)
#10552 e4605d9 Tests for zmqpubrawtx and zmqpubrawblock (achow101)
#11067 eeb24a3 TestNode: Add wait_until_stopped helper method (MarcoFalke)
#11068 5398f20 Move wait_until to util (MarcoFalke)
#11125 812c870 Add bitcoin-cli -stdin and -stdinrpcpass functional tests (promag)
#11077 1d80d1e fix timeout issues from TestNode (jnewbery)
#11078 f1ced0d Make p2p-leaktests.py more robust (jnewbery)
#11210 f3f7891 Stop test_bitcoin-qt touching ~/.bitcoin (MeshCollider)
#11234 f0b6795 Remove redundant testutil.cpp	h files (MeshCollider)
#11215 cef0319 fixups from set_test_params() (jnewbery)
#11345 f9cf7b5 Check connectivity before sending in assumevalid.py (jnewbery)
#11091 c276c1e Increase initial RPC timeout to 60 seconds (laanwj)
#10711 fc2aa09 Introduce TestNode (jnewbery)
#11230 d8dd8e7 Fixup dbcrash interaction with add_nodes() (jnewbery)
#11241 4424176 Improve signmessages functional test (mess110)
#11116 2c4ff35 Unit tests for script/standard and IsMine functions (jimpo)
#11422 a36f332 Verify DBWrapper iterators are taking snapshots (TheBlueMatt)
#11121 bb5e7cb TestNode tidyups (jnewbery)
#11521 ca0f3f7 travis: move back to the minimal image (theuni)
#11538 adbc9d1 Fix race condition failures in replace-by-fee.py, sendheaders.py (sdaftuar)
#11472 4108879 Make tmpdir option an absolute path, misc cleanup (MarcoFalke)
#10853 5b728c8 Fix RPC failure testing (again) (jnewbery)
#11310 b6468d3 Test listwallets RPC (mess110)
Miscellaneous
#11377 75997c3 Disallow uncompressed pubkeys in bitcoin-tx [multisig] output adds (TheBlueMatt)
#11437 dea3b87 [Docs] Update Windows build instructions for using WSL and Ubuntu 17.04 (fanquake)
#11318 8b61aee Put back inadvertently removed copyright notices (gmaxwell)
#11442 cf18f42 [Docs] Update OpenBSD Build Instructions for OpenBSD 6.2 (fanquake)
#10957 50bd3f6 Avoid returning a BIP9Stats object with uninitialized values (practicalswift)
#11539 01223a0 [verify-commits] Allow revoked keys to expire (TheBlueMatt)
Credits
Thanks to everyone who directly contributed to this release:

Andreas Schildbach
Andrew Chow
Chris Moore
Cory Fields
Cristian Mircea Messel
Daniel Edgecumbe
Donal OConnor
Dusty Williams
fanquake
Gregory Sanders
Jim Posen
John Newbery
Johnson Lau
João Barbosa
Jorge Timón
Karl-Johan Alm
Lucas Betschart
MarcoFalke
Matt Corallo
Paul Berg
Pedro Branco
Pieter Wuille
practicalswift
Russell Yanofsky
Samuel Dobson
Suhas Daftuar
Tomas van der Wansem
Wladimir J. van der Laan
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.16.0 released
26 February 2018

How to Upgrade
Compatibility
Notable changes
Wallet changes
Segwit Wallet
BIP173 (Bech32) Address support (“bc1…” addresses)
HD-wallets by default
Replace-By-Fee by default in GUI
Wallets directory configuration (-walletdir)
Build: Minimum GCC bumped to 4.8.x
Support for signalling pruned nodes (BIP159)
Performance: SHA256 assembly enabled by default
GUI changes
RPC changes
New rescanblockchain RPC
New savemempool RPC
Safe mode disabled by default
Renamed script for creating JSON-RPC credentials
Validateaddress improvements
Low-level changes
Other changed command-line options
Testing changes
0.16.0 change log
Block and transaction handling
P2P protocol and network code
Wallet
RPC and other APIs
GUI
Build system
Tests and QA
Documentation
Refactoring
Miscellaneous
Credits
Bitcoin Core version 0.16.0 is not available for security reasons:

https://bitcoincore.org/bin/bitcoin-core-0.16.0/

This is a new major version release, including new features, various bugfixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

The first time you run version 0.15.0 or newer, your chainstate database will be converted to a new format, which will take anywhere from a few minutes to half an hour, depending on the speed of your machine.

Note that the block database format also changed in version 0.8.0 and there is no automatic upgrade code from before version 0.8 to version 0.15.0 or higher. Upgrading directly from 0.7.x and earlier without re-downloading the blockchain is not supported. However, as usual, old wallet versions are still supported.

Downgrading warning
Wallets created in 0.16 and later are not compatible with versions prior to 0.16 and will not work if you try to use newly created wallets in older versions. Existing wallets that were created with older versions are not affected by this.

Compatibility
Bitcoin Core is extensively tested on multiple operating systems using the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.

Bitcoin Core should also work on most other Unix-like systems but is not frequently tested on them.

Notable changes
Wallet changes
Segwit Wallet
Bitcoin Core 0.16.0 introduces full support for segwit in the wallet and user interfaces. A new -addresstype argument has been added, which supports legacy, p2sh-segwit (default), and bech32 addresses. It controls what kind of addresses are produced by getnewaddress, getaccountaddress, and createmultisigaddress. A -changetype argument has also been added, with the same options, and by default equal to -addresstype, to control which kind of change is used.

A new address_type parameter has been added to the getnewaddress and addmultisigaddress RPCs to specify which type of address to generate. A change_type argument has been added to the fundrawtransaction RPC to override the -changetype argument for specific transactions.

All segwit addresses created through getnewaddress or *multisig RPCs explicitly get their redeemscripts added to the wallet file. This means that downgrading after creating a segwit address will work, as long as the wallet file is up to date.
All segwit keys in the wallet get an implicit redeemscript added, without it being written to the file. This means recovery of an old backup will work, as long as you use new software.
All keypool keys that are seen used in transactions explicitly get their redeemscripts added to the wallet files. This means that downgrading after recovering from a backup that includes a segwit address will work
Note that some RPCs do not yet support segwit addresses. Notably, signmessage/verifymessage doesn’t support segwit addresses, nor does importmulti at this time. Support for segwit in those RPCs will continue to be added in future versions.

P2WPKH change outputs are now used by default if any destination in the transaction is a P2WPKH or P2WSH output. This is done to ensure the change output is as indistinguishable from the other outputs as possible in either case.

BIP173 (Bech32) Address support (“bc1…” addresses)
Full support for native segwit addresses (BIP173 / Bech32) has now been added. This includes the ability to send to BIP173 addresses (including non-v0 ones), and generating these addresses (including as default new addresses, see above).

A checkbox has been added to the GUI to select whether a Bech32 address or P2SH-wrapped address should be generated when using segwit addresses. When launched with -addresstype=bech32 it is checked by default. When launched with -addresstype=legacy it is unchecked and disabled.

HD-wallets by default
Due to a backward-incompatible change in the wallet database, wallets created with version 0.16.0 will be rejected by previous versions. Also, version 0.16.0 will only create hierarchical deterministic (HD) wallets. Note that this only applies to new wallets; wallets made with previous versions will not be upgraded to be HD.

Replace-By-Fee by default in GUI
The send screen now uses BIP125 RBF by default, regardless of -walletrbf. There is a checkbox to mark the transaction as final.

The RPC default remains unchanged: to use RBF, launch with -walletrbf=1 or use the replaceable argument for individual transactions.

Wallets directory configuration (-walletdir)
Bitcoin Core now has more flexibility in where the wallets directory can be located. Previously wallet database files were stored at the top level of the bitcoin data directory. The behavior is now:

For new installations (where the data directory doesn’t already exist), wallets will now be stored in a new wallets/ subdirectory inside the data directory by default.
For existing nodes (where the data directory already exists), wallets will be stored in the data directory root by default. If a wallets/ subdirectory already exists in the data directory root, then wallets will be stored in the wallets/ subdirectory by default.
The location of the wallets directory can be overridden by specifying a -walletdir=<path> option where <path> can be an absolute path to a directory or directory symlink.
Care should be taken when choosing the wallets directory location, as if it becomes unavailable during operation, funds may be lost.

Build: Minimum GCC bumped to 4.8.x
The minimum version of the GCC compiler required to compile Bitcoin Core is now 4.8. No effort will be made to support older versions of GCC. See discussion in issue #11732 for more information. The minimum version for the Clang compiler is still 3.3. Other minimum dependency versions can be found in doc/dependencies.md in the repository.

Support for signalling pruned nodes (BIP159)
Pruned nodes can now signal BIP159’s NODE_NETWORK_LIMITED using service bits, in preparation for full BIP159 support in later versions. This would allow pruned nodes to serve the most recent blocks. However, the current change does not yet include support for connecting to these pruned peers.

Performance: SHA256 assembly enabled by default
The SHA256 hashing optimizations for architectures supporting SSE4, which lead to ~50% speedups in SHA256 on supported hardware (~5% faster synchronization and block validation), have now been enabled by default. In previous versions they were enabled using the --enable-experimental-asm flag when building, but are now the default and no longer deemed experimental.

GUI changes
Uses of “µBTC” in the GUI now also show the more colloquial term “bits”, specified in BIP176.
The option to reuse a previous address has now been removed. This was justified by the need to “resend” an invoice, but now that we have the request history, that need should be gone.
Support for searching by TXID has been added, rather than just address and label.
A “Use available balance” option has been added to the send coins dialog, to add the remaining available wallet balance to a transaction output.
A toggle for unblinding the password fields on the password dialog has been added.
RPC changes
New rescanblockchain RPC
A new RPC rescanblockchain has been added to manually invoke a blockchain rescan. The RPC supports start and end-height arguments for the rescan, and can be used in a multiwallet environment to rescan the blockchain at runtime.

New savemempool RPC
A new savemempool RPC has been added which allows the current mempool to be saved to disk at any time to avoid it being lost due to crashes / power loss.

Safe mode disabled by default
Safe mode is now disabled by default and must be manually enabled (with -disablesafemode=0) if you wish to use it. Safe mode is a feature that disables a subset of RPC calls - mostly related to the wallet and sending - automatically in case certain problem conditions with the network are detected. However, developers have come to regard these checks as not reliable enough to act on automatically. Even with safe mode disabled, they will still cause warnings in the warnings field of the getneworkinfo RPC and launch the -alertnotify command.

Renamed script for creating JSON-RPC credentials
The share/rpcuser/rpcuser.py script was renamed to share/rpcauth/rpcauth.py. This script can be used to create rpcauth credentials for a JSON-RPC user.

Validateaddress improvements
The validateaddress RPC output has been extended with a few new fields, and support for segwit addresses (both P2SH and Bech32). Specifically:

A new field iswitness is True for P2WPKH and P2WSH addresses (“bc1…” addresses), but not for P2SH-wrapped segwit addresses (see below).
The existing field isscript will now also report True for P2WSH addresses.
A new field embedded is present for all script addresses where the script is known and matches something that can be interpreted as a known address. This is particularly true for P2SH-P2WPKH and P2SH-P2WSH addresses. The value for embedded includes much of the information validateaddress would report if invoked directly on the embedded address.
For multisig scripts a new pubkeys field was added that reports the full public keys involved in the script (if known). This is a replacement for the existing addresses field (which reports the same information but encoded as P2PKH addresses), represented in a more useful and less confusing way. The addresses field remains present for non-segwit addresses for backward compatibility.
For all single-key addresses with known key (even when wrapped in P2SH or P2WSH), the pubkey field will be present. In particular, this means that invoking validateaddress on the output of getnewaddress will always report the pubkey, even when the address type is P2SH-P2WPKH.
Low-level changes
The deprecated RPC getinfo was removed. It is recommended that the more specific RPCs are used:
getblockchaininfo
getnetworkinfo
getwalletinfo
getmininginfo
The wallet RPC getreceivedbyaddress will return an error if called with an address not in the wallet.
The wallet RPC addwitnessaddress was deprecated and will be removed in version 0.17, set the address_type argument of getnewaddress, or option -addresstype=[bech32|p2sh-segwit] instead.
dumpwallet now includes hex-encoded scripts from the wallet in the dumpfile, and importwallet now imports these scripts, but corresponding addresses may not be added correctly or a manual rescan may be required to find relevant transactions.
The RPC getblockchaininfo now includes an errors field.
A new blockhash parameter has been added to the getrawtransaction RPC which allows for a raw transaction to be fetched from a specific block if known, even without -txindex enabled.
The decoderawtransaction and fundrawtransaction RPCs now have optional iswitness parameters to override the heuristic witness checks if necessary.
The walletpassphrase timeout is now clamped to 2^30 seconds.
Using addresses with the createmultisig RPC is now deprecated, and will be removed in a later version. Public keys should be used instead.
Blockchain rescans now no longer lock the wallet for the entire rescan process, so other RPCs can now be used at the same time (although results of balances / transactions may be incorrect or incomplete until the rescan is complete).
The logging RPC has now been made public rather than hidden.
An initialblockdownload boolean has been added to the getblockchaininfo RPC to indicate whether the node is currently in IBD or not.
minrelaytxfee is now included in the output of getmempoolinfo
Other changed command-line options
-debuglogfile=<file> can be used to specify an alternative debug logging file.
bitcoin-cli now has an -stdinrpcpass option to allow the RPC password to be read from standard input.
The -usehd option has been removed.
bitcoin-cli now supports a new -getinfo flag which returns an output like that of the now-removed getinfo RPC.
Testing changes
The default regtest JSON-RPC port has been changed to 18443 to avoid conflict with testnet’s default of 18332.
Segwit is now always active in regtest mode by default. Thus, if you upgrade a regtest node you will need to either -reindex or use the old rules by adding vbparams=segwit:0:999999999999 to your regtest bitcoin.conf. Failure to do this will result in a CheckBlockIndex() assertion failure that will look like: Assertion `(pindexFirstNeverProcessed != nullptr) == (pindex->nChainTx == 0)’ failed.
0.16.0 change log
Block and transaction handling
#10953 aeed345 Combine scriptPubKey and amount as CTxOut in CScriptCheck (jl2012)
#11309 93d20a7 Minor cleanups for AcceptToMemoryPool (morcos)
#11418 38c201f Add error string for CLEANSTACK script violation (maaku)
#11411 339da9c Change SignatureHash input index check to an assert (jimpo)
#11406 e12522d Add state message print to AcceptBlock failure message (TheBlueMatt)
#11062 26fee4f Mark mempool import fails that were found in mempool as ‘already there’ (kallewoof)
#11269 61fb806 CTxMemPoolEntry::UpdateAncestorState: modifySiagOps param type (donaloconnor)
#11747 e970396 Fix: Open files read only if requested (Elbandi)
#11737 46d1ebf Document partial validation in ConnectBlock() (sdaftuar)
#10699 c090262 Make all script validation flags backward compatible (sipa)
#10279 214046f Add a CChainState class to validation.cpp to take another step towards clarifying internal interfaces (TheBlueMatt)
#11824 d9fdac1 Block ActivateBestChain to empty validationinterface queue (TheBlueMatt)
#12127 9501dc2 Remove unused mempool index (sdaftuar)
#12118 44080a9 Sort mempool by min(feerate, ancestor_feerate) (sdaftuar)
#8498 0e3a411 Minimize the number of times it is checked that no money… (jtimon)
#12368 3f5012b Hold mempool.cs for the duration of ATMP (TheBlueMatt)
#12401 d44cd7e Reset pblocktree before deleting LevelDB file (Sjors)
#12415 f893824 Interrupt loading thread after shutdown request (promag)
P2P protocol and network code
#10596 6866b49 Add vConnect to CConnman::Options (benma)
#10663 9d31ed2 Split resolve out of connect (theuni)
#11113 fef65c4 Ignore getheaders requests for very old side blocks (jimpo)
#11585 5aeaa9c addrman: Add missing lock in Clear() (CAddrMan) (practicalswift)
#11524 5ef3b69 De-duplicate connection eviction logic (tjps)
#11580 1f4375f Do not send (potentially) invalid headers in response to getheaders (TheBlueMatt)
#11655 aca77a4 Assert state.m_chain_sync.m_work_header in ConsiderEviction (practicalswift)
#11744 3ff6ff5 Add missing locks in net.{cpp,h} (practicalswift)
#11740 59d3dc8 Implement BIP159 NODE_NETWORK_LIMITED (pruned peers) signaling only (jonasschnelli)
#11583 37ffa16 Do not make it trivial for inbound peers to generate log entries (TheBlueMatt)
#11363 ba2f195 Split socket create/connect (theuni)
#11917 bc66765 Add testnet DNS seed: seed.testnet.bitcoin.sprovoost.nl (Sjors)
#11512 6e89de5 Use GetDesireableServiceFlags in seeds, dnsseeds, fixing static seed adding (TheBlueMatt)
#12262 16bac24 Hardcoded seed update (laanwj)
#12270 9cf6393 Update chainTxData for 0.16 (laanwj)
#12392 0f61651 Fix ignoring tx data requests when fPauseSend is set on a peer (TheBlueMatt)
Wallet
#11039 fc51565 Avoid second mapWallet lookup (promag)
#10952 2621673 Remove vchDefaultKey and have better first run detection (achow101)
#11007 fc5c237 Fix potential memory leak when loading a corrupted wallet file (practicalswift)
#10976 07c92b9 Move some static functions out of wallet.h/cpp (ryanofsky)
#11117 961901f Prepare for non-Base58 addresses (sipa)
#10916 e6ab88a add missing lock to crypter GetKeys() (benma)
#10767 791a0e6 Clarify wallet initialization / destruction interface (jnewbery)
#11250 c22a53c Bump wallet version to 159900 and remove the usehd option (achow101)
#11307 4f7e37e Display non-HD error on first run (MarcoFalke)
#11408 69c7ece Fix parameter name typo in ErasePurpose walletdb method (PierreRochard)
#11167 aa624b6 Full BIP173 (Bech32) support (sipa)
#11594 0ecc630 Improve -disablewallet parameter interaction (promag)
#10368 77ba4bf Remove helper conversion operator from wallet (kallewoof)
#11074 99ec126 Assert that CWallet::SyncMetaData finds oldest transaction (BitonicEelis)
#11272 e6e3fc3 CKeystore/CCrypter: move relevant implementation out of the header (jonasschnelli)
#10286 927a1d7 Call wallet notify callbacks in scheduler thread (without cs_main) (TheBlueMatt)
#10600 4ed8180 Make feebumper class stateless (ryanofsky)
#11466 d080a7d Specify custom wallet directory with -walletdir param (MeshCollider)
#11839 8ab6c0b Don’t attempt mempool entry for wallet transactions on startup (instagibbs)
#11854 2214954 Split up key and script metadata for better type safety (ryanofsky)
#11870 ef8ba7d Remove unnecessary mempool lock in ReacceptWalletTransactions (promag)
#11864 2ae58d5 Make CWallet::FundTransaction atomic (promag)
#11886 df71819 Clarify getbalance meaning a tiny bit in response to questions (TheBlueMatt)
#11923 81c89e9 Remove unused fNoncriticalErrors variable from CWalletDB::FindWalletTx (PierreRochard)
#11726 604e08c Cleanups + nit fixes for walletdir PR (MeshCollider)
#11403 d889c03 Segwit wallet support (sipa)
#11970 b7450cd Add test coverage for bitcoin-cli multiwallet calls (ryanofsky)
#11904 66e3af7 Add a lock to the wallet directory (MeshCollider)
#12101 c7978be Clamp walletpassphrase timeout to 2^30 seconds and check its bounds (achow101)
#12210 17180fa Deprecate addwitnessaddress (laanwj)
#12220 f4c942e Error if relative -walletdir is specified (ryanofsky)
#11281 8470e64 Avoid permanent cs_main/cs_wallet lock during RescanFromTime (jonasschnelli)
#12119 9594139 Use P2WPKH change output if any destination is P2WPKH or P2WSH (Sjors)
#12213 eadb2da Add address type option to addmultisigaddress (promag)
#12276 7936446 Remove duplicate mapWallet lookups (promag)
RPC and other APIs
#11008 3841aaf Enable disablesafemode by default (gmaxwell)
#11050 7ed57d3 Avoid treating null RPC arguments different from missing arguments (ryanofsky)
#10997 affe927 Add option -stdinrpcpass to bitcoin-cli to allow RPC password to be read from standard input (jharvell)
#11179 e0e3cbb Push down safe mode checks (laanwj)
#11203 d745b4c add wtxid to mempool entry output (sdaftuar)
#11099 bc561b4 Add savemempool RPC (greenaddress)
#10838 66a5b41 (finally) remove getinfo (TheBlueMatt)
#10753 7fcd61b test: Check RPC argument mapping (laanwj)
#11288 0f8e095 More user-friendly error message when partially signing (MeshCollider)
#11031 ef8340d deprecate estimatefee (jnewbery)
#10858 9a8e916 Add “errors” field to getblockchaininfo and unify “errors” field in get*info RPCs (achow101)
#11021 90926db Fix getchaintxstats() (AkioNak)
#11367 3a93270 getblockchaininfo: Add disk_size, prune_target_size (esotericnonsense)
#11006 a1d78b5 Improve shutdown process (promag)
#11529 ff92fbf Avoid slow transaction search with txindex enabled (promag)
#11618 87d90ef Lock cs_main in blockToJSON/blockheaderToJSON (practicalswift)
#11626 998c304 Make logging RPC public (laanwj)
#11258 033c786 Add initialblockdownload to getblockchaininfo (jnewbery)
#11087 99bc0b4 Diagnose unsuitable outputs in lockunspent() (BitonicEelis)
#11710 9388639 cli: Reject arguments to -getinfo (laanwj)
#11738 d4267a3 Fix sendrawtransaction hang when sending a tx already in mempool (TheBlueMatt)
#11753 32c9b57 clarify abortrescan rpc use (instagibbs)
#11191 ef14f2e Improve help text and behavior of RPC-logging (AkioNak)
#10874 9e38d35 getblockchaininfo: Loop through the bip9 soft fork deployments instead of hard coding (achow101)
#10275 497d0e0 Allow fetching tx directly from specified block in getrawtransaction (kallewoof)
#11178 fee0370 Add iswitness parameter to decode- and fundrawtransaction RPCs (MeshCollider)
#11667 711d16c Add scripts to dumpwallet RPC (MeshCollider)
#11475 9bad8d6 mempoolinfo should take ::minRelayTxFee into account (mess110)
#12001 a9a49e6 Adding ::minRelayTxFee amount to getmempoolinfo and updating help (jeffrade)
#12198 adce1de Add deprecation error for getinfo (laanwj)
#11415 69ec021 Disallow using addresses in createmultisig (achow101)
#12278 288deac Add special error for genesis coinbase to getrawtransaction (MeshCollider)
#11362 c6223b3 Remove nBlockMaxSize from miner opt struct as it is no longer used (gmaxwell)
#10825 28485c7 Set regtest JSON-RPC port to 18443 to avoid conflict with testnet 18332 (fametrano)
#11303 e542728 Fix estimatesmartfee rounding display issue (TheBlueMatt)
#7061 8c2de82 Add RPC call rescanblockchain <startheight> <stopheight> (jonasschnelli)
#11055 95e14dc RPC getreceivedbyaddress should return error if called with address not owned by the wallet (jnewbery)
#12366 93de37a http: Join worker threads before deleting work queue (laanwj)
#12315 758a41e Bech32 addresses in dumpwallet (fivepiece)
#12427 3762ac1 Make signrawtransaction accept P2SH-P2WSH redeemscripts (sipa)
GUI
#10964 64e66bb Pass SendCoinsRecipient (208 bytes) by reference (practicalswift)
#11169 5b8af7b Make tabs toolbar no longer have a context menu (achow101)
#10911 9c8f365 Fix typo and access key in optionsdialog.ui (keystrike)
#10770 ea729d5 Drop upgrade-cancel callback registration for a generic “cancelable” (TheBlueMatt)
#11156 a3624dd Fix memory leaks in qt/guiutil.cpp (danra)
#11268 31e72b2 [macOS] remove Growl support, remove unused code (jonasschnelli)
#11193 c5c77bd Terminate string *pszExePath after readlink and without using memset (practicalswift)
#11508 ffa5159 Fix crash via division by zero assertion (jonasschnelli)
#11499 6157e8c Add upload and download info to the peerlist (debug menu) (aarongolliver)
#11480 ffc0b11 Add toggle for unblinding password fields (tjps)
#11316 22cdf93 Add use available balance in send coins dialog (CryptAxe, promag)
#3716 13e352d Receive: Remove option to reuse a previous address (luke-jr)
#11690 f0c1f8a Fix the StartupWMClass for bitoin-qt, so gnome-shell can recognize it (eklitzke)
#10920 f6f8d54 Fix potential memory leak in newPossibleKey(ChangeCWallet *wallet) (practicalswift)
#11698 7293d06 RPC-Console nested commands documentation (lmlsna)
#11395 38d31f9 Enable searching by transaction id (luke-jr)
#11556 91eeaa0 Improved copy for RBF checkbox and tooltip (Sjors)
#11809 80f9dad Fix proxy setting options dialog crash (laanwj)
#11616 8585bb8 Update ban-state in case of dirty-state during periodic sweep (jonasschnelli)
#11605 f19ca12 Enable RBF by default in QT (Sjors)
#12074 a1136f0 Optimizes boolean expression model && model->haveWatchOnly() (251Labs)
#12035 eeb6d52 Change µBTC to bits (jb55)
#12092 fd4ca17 Replaces numbered place marker %2 with %1 (251Labs)
#12173 bbc91b7 Use flexible font size for QRCode image address (jonasschnelli)
#12211 10d10d7 Avoid potential null dereference in ReceiveCoinsDialog constructor (ryanofsky)
#12261 f359afc Bump BLOCK_CHAIN_SIZE to 200GB (laanwj)
#11991 062c8b6 Receive: checkbox for bech32 address (Sjors)
#11644 045a809 Fix qt build broken by 5a5e4e9 (TheBlueMatt)
#11448 d473e6d reset addrProxy/addrSeparateProxyTor if colon char missing (mess110)
#12377 604f289 qt: Poll ShutdownTimer after init is done (MarcoFalke)
#12374 daaae36 qt: Make sure splash screen is freed on AppInitMain fail (laanwj)
#12349 ad10b90 shutdown: fix crash on shutdown with reindex-chainstate (theuni)
Build system
#10923 2c9f5ec travis: Build with –enable-werror under OS X (practicalswift)
#11176 df8c722 build: Rename –enable-experimental-asm to –enable-asm and enable by default (laanwj)
#11286 11dacc6 [depends] Don’t build libevent sample code (fanquake)
#7142 801dd40 Travis: Test build against system libs (& Qt4) (luke-jr)
#11380 390771b Remove outdated share/certs/ directory (MeshCollider)
#11391 7632310 Remove lxcbr0 lines from gitian-build.sh (MeshCollider)
#11435 167cef8 build: Make “make clean” remove all files created when running “make check” (practicalswift)
#11460 e022463 [depends] mac_alias 2.0.6, ds_store 1.1.2 (fanquake)
#11541 bb9ab0f Build: Fix Automake warnings when running autogen.sh (fanquake)
#11611 0e70791 [build] Don’t fail when passed –disable-lcov and lcov isn’t available (fanquake)
#11651 3c098a8 refactor: Make all #includes relative to project root (laanwj, MeshCollider, ryanofsky)
#11621 1f7695b [build] Add temp_bitcoin_locale_qrc to CLEAN_QT to fix make distcheck (fanquake)
#11755 84fa645 [Docs] Bump minimum required version of GCC to 4.8 (fanquake)
#9254 6d3dc52 [depends] ZeroMQ 4.2.2 (fanquake)
#11842 3c8f0a3 [build] Add missing stuff to clean-local (kallewoof)
#11936 483bb67 [build] Warn that only libconsensus can be built without Boost (fanquake)
#11945 7a11ba7 Improve BSD compatibility of contrib/install_db4.sh (laanwj)
#11981 180a255 Fix gitian build after libzmq bump (theuni)
#11903 8f68fd2 [trivial] Add required package dependencies for depends cross compilation (jonasschnelli)
#12168 45cf8a0 #include sys/fcntl.h to just fcntl.h (without sys/) (jsarenik)
#12095 3fa1ab4 Use BDB_LIBS/CFLAGS and pass –disable-replication (fanquake)
#11711 6378e5c bitcoin_qt.m4: Minor fixes and clean-ups (fanquake)
#11989 90d4104 .gitignore: add QT Creator artifacts (Sjors)
#11577 c0ae864 Fix warnings (-Wsign-compare) when building with DEBUG_ADDRMAN (practicalswift)
Tests and QA
#11024 3e55f13 Remove OldSetKeyFromPassphrase/OldEncrypt/OldDecrypt (practicalswift)
#10679 31b2612 Document the non-DER-conformance of one test in tx_valid.json (schildbach)
#11160 ede386c Improve versionbits_computeblockversion test code consistency (danra)
#10303 f088a1b Include ms/blk stats in Connect* benchmarks (kallewoof)
#10777 d81dccf Avoid redundant assignments. Remove unused variables (practicalswift)
#11260 52f8877 travis: Assert default datadir isn’t created, Run scripted diff only once (MarcoFalke)
#11271 638e6c5 travis: filter out pyenv (theuni)
#11285 3255d63 Add -usehd to excluded args in check-doc.py (MeshCollider)
#11297 16e4184 Make sure ~/.bitcoin doesn’t exist before build (MeshCollider)
#11311 cce94c5 travis: Revert default datadir check (MarcoFalke)
#11300 f4ed44a Add a lint check for trailing whitespace (MeshCollider)
#11323 4ce2f3d mininode: add an optimistic write and disable nagle (theuni)
#11370 2d85899 Add getblockchaininfo functional test (promag)
#11365 f199b8a Add Qt GUI tests to Overview and ReceiveCoin Page (anditto)
#11293 dbc4ae0 Deduplicate CMerkleBlock construction code, add test coverage (jamesob)
#10440 9e8ef9d Add libFuzzer support (practicalswift)
#10941 364da2c Add blocknotify and walletnotify functional tests (promag)
#11420 8928093 Bump univalue subtree and fix json formatting in tests (MarcoFalke)
#10099 424be03 Slightly Improve Unit Tests for Checkqueue (JeremyRubin)
#11513 14b860b A few Python3 tidy ups (jnewbery)
#11486 2ca518d Add uacomment tests (mess110)
#11452 02ac8c8 Improve ZMQ functional test (promag)
#10409 b5545d8 Add fuzz testing for BlockTransactions and BlockTransactionsRequest (practicalswift)
#11389 dd56166 Support having segwit always active in regtest (sipa, ajtowns, jnewbery)
#11562 5776582 bench: use std::chrono rather than gettimeofday (theuni)
#11182 f7388e9 Add P2P interface to TestNode (jnewbery)
#11552 b5f9f02 Improve wallet-accounts test (ryanofsky)
#11638 5e3f5e4 Dead mininode code (jnewbery)
#11646 fe503e1 Require a steady clock for bench with at least micro precision (TheBlueMatt)
#11468 76b3349 Make comp test framework more debuggable (jnewbery)
#11623 ee92243 Add missing locks to tests (practicalswift)
#11035 927e528 [contrib] Add Valgrind suppressions file (practicalswift)
#11641 7adeea3 Only allow disconnecting all NodeConns (MarcoFalke)
#11677 3bdf242 Remove unused NodeConn members (MarcoFalke)
#11699 66d46c7 [travis-ci] Only run linters on Pull Requests (jnewbery)
#11654 084f52f Initialize recently introduced non-static class member lastCycles to zero in constructor (practicalswift)
#11648 ccc70a2 Add messages.py (jnewbery)
#11713 49667a7 Fix for mismatched extern definition in wallet tests (sipsorcery)
#11707 0d89fa0 Fix sendheaders (jnewbery)
#11718 9cdd2bc Move pwalletMain to wallet test fixture (laanwj)
#11714 901ba3e Test that mempool rejects coinbase transactions (jamesob)
#11743 3d6ad40 Add multiwallet prefix test (MarcoFalke)
#11683 a892218 Remove unused mininode functions {ser,deser}_int_vector(…). Remove unused imports (practicalswift)
#11712 9f2c2db Split NodeConn from NodeConnCB (jnewbery)
#11791 13e31dd Rename NodeConn and NodeConnCB (jnewbery)
#11835 f60b4ad Add Travis check for unused Python imports (practicalswift)
#11849 ad1820c Assert that only one NetworkThread exists (jnewbery)
#11877 d4991c0 Improve createrawtransaction functional tests (promag)
#11220 2971fd0 Check specific validation error in miner tests (Sjors)
#11947 797441e Fix rawtransactions test (laanwj)
#11946 8049241 Remove unused variable (firstAddrnServices) (practicalswift)
#11867 18a1bba Improve node network test (jnewbery)
#11883 cfd99dd Add configuration file/argument testing (MeshCollider)
#11879 d4e404a Remove redundant univalue_tests.cpp (jnewbery)
#11748 20166f8 Adding unit tests for GetDifficulty in blockchain.cpp (merehap)
#11517 5180a86 Improve benchmark precision (martinus)
#11291 a332a7d Fix string concatenation to os.path.join and add exception case (dongsam)
#11965 d38d1a3 Note on test order in test_runner (MarcoFalke)
#11997 ddff344 util_tests.cpp: actually check ignored args (ajtowns)
#12079 45173fa Improve prioritisetransaction test coverage (promag)
#12150 92a810d Fix ListCoins test failure due to unset g_address_type, g_change_type (ryanofsky)
#12133 1d2eaba Fix rare failure in p2p-segwit.py (sdaftuar)
#12082 0910cbe Adding test case for SINGLE	ANYONECANPAY hash type in tx_valid.json (Christewart)
#11796 4db16ec Functional test naming convention (ajtowns)
#12227 b987ca4 test_runner: Readable output if create_cache.py fails (ryanofsky)
#12089 126000b Make TestNodeCLI command optional in send_cli (MarcoFalke)
#11774 6970b30 Rename functional tests (ajtowns)
#12264 598a9c4 Fix versionbits warning test (jnewbery)
#12217 1213be6 Add missing syncwithvalidationinterfacequeue to tests (MarcoFalke)
#12292 eebe458 Fix names of excluded extended tests for travis (ajtowns)
#11789 60d739e [travis-ci] Combine logs on failure (jnewbery)
#11838 3e50024 Add getrawtransaction in_active_chain=False test (MarcoFalke)
#12206 898f560 Sync with validationinterface queue in sync_mempools (MarcoFalke)
#12424 ff44101 Fix rescan test failure due to unset g_address_type, g_change_type (ryanofsky)
#12388 e2431d1 travis: Full clone for git subtree check (MarcoFalke)
Documentation
#10680 6366941 Fix inconsistencies and grammar in various files (MeshCollider)
#11011 7db65c3 Add a comment on the use of prevector in script (gmaxwell)
#10878 c58128f Fix Markdown formatting issues in init.md (dongcarl)
#11066 9e00a62 Document the preference of nullptr over NULL or (void*)0 (practicalswift)
#11094 271e40a Hash in ZMQ hash is raw bytes, not hex (runn1ng)
#11026 ea3ac59 Bugfix: Use testnet RequireStandard for -acceptnonstdtxn default (luke-jr)
#11058 4b65fa5 Comments: More comments on functions/globals in standard.h (jimpo)
#11112 3f726c9 [developer-notes] By default, declare single-argument constructors “explicit” (practicalswift)
#11155 a084767 Trivial: Documentation fixes for CVectorWriter ctors (danra)
#11136 108222b Docs: Add python3 to list of dependencies on some platforms (danra)
#11216 81f8c03 Update hmac_sha256.h (utsavgupta)
#11236 ba05971 Add note on translations to CONTRIBUTING.md (MeshCollider)
#11173 4eb1f39 RPC: Fix currency unit string in the help text (AkioNak)
#11135 21e2f2f Update developer notes with RPC response guidelines (promag)
#11219 bcc8a62 explain how to recompile a modified unit test (Sjors)
#10779 f656147 Create dependencies.md (flack)
#10682 2a56baf Move the AreInputsStandard documentation next to its implementation (esneider)
#11276 ee50c9e Update CONTRIBUTING.md to reduce unnecessary review workload (jonasschnelli)
#11264 b148803 Fix broken Markdown table in dependencies.md (practicalswift)
#10691 ce82985 Properly comment about shutdown process in init.cpp file (wraith7)
#11330 ae233c4 Fix comments for DEFAULT_WHITELIST[FORCE]RELAY (danra)
#11340 d6d2c85 Fix validation comments (danra)
#11305 2847480 Update release notes and manpages for 0.16 (MarcoFalke)
#11132 551d7bf Document assumptions that are being made to avoid NULL pointer dereferences (practicalswift)
#11390 12ed800 Document scripted-diff (jnewbery)
#11392 a3b4c59 Fix stale link in gitian-building.md (shooterman)
#11401 4202273 Move gitian building to external repo (MarcoFalke)
#11414 bbc901d Remove partial gitian build instructions from descriptors dir (fanquake)
#11571 c95832d Fixed a couple small grammatical errors (BitsInMyBlood)
#11624 f9b74ef Change formatting for sequence of steps (vivganes)
#11597 6f01dcf Fix error messages in CFeeBumper (kallewoof)
#11438 7fbf3c6 Updated Windows build doc for WSL/Xenial workaround (sipsorcery)
#11663 41aa9c4 Add getreceivedbyaddress release notes (MarcoFalke)
#11533 cbb54e7 Update WSL installation notes for Fall Creators update (Thoragh)
#11680 4db82b7 Add instructions for lcov report generation (jamesob)
#11686 54aedc0 Make ISSUE_TEMPLATE a bit shorter, mention hardware tests (TheBlueMatt)
#11704 ea68190 Windows build doc update (sipsorcery)
#11706 5197100 Make default issue text all comments to make issues more readable (TheBlueMatt)
#11140 1429132 Improve #endif comments (danra)
#11729 7a43fbb links to code style guides (Sjors)
#11793 8879d50 Bump OS X version to 10.13 (Varunram)
#11783 16fff80 Fix shutdown in case of errors during initialization (laanwj)
#11804 00d25e9 Fixed outdated link with archive.is (TimothyShimmin)
#11960 4307062 Fix link to installation script (laudaa)
#12027 63a4dc1 Remove boost –c++ flag from osx build instructions (fernandezpablo85)
#12062 5961b23 Increment MIT Licence copyright header year on files modified in 2017 (akx20000a)
#12063 36a5a44 Update license year range to 2018 (akx20000a)
#12093 5691028 Fix incorrect Markdown link (practicalswift)
#12143 b0d626d Fix link for BIP159 pull request (azuchi)
#12112 3c62868 Remove the ending slashes from RPC URI format (jackycjh)
#12166 e839d65 Clarify -walletdir usage (jnewbery)
#12241 b030133 Fix incorrect link in /test/ README.md (fanquake)
#12187 b5e4b9b Updating benchmarkmarking.md with an updated sample output (jeffrade)
#12294 7cf1aea Create NetBSD build instructions and fix compilation (fanquake)
#12251 cc5870a initwallet: Do not translate highly technical addresstype help (MarcoFalke)
#11984 efae366 Update OpenBSD build instructions for 6.2 (cont’d) (laanwj)
#12293 9d9c418 Mention that HD is enabled if hdmasterkeyid is present in getwalletinfo RPC help (fanquake)
#12077 c04cb48 Correct sendmany curl example (251Labs)
#10677 b3ecb7b Document that addmultisigaddress is intended for non-watchonly addresses (instagibbs)
#12177 cad504b Fix address_type help text of getnewaddress and getrawchangeaddress (mruddy)
Refactoring
#9964 b6a4891 Add const to methods that do not modify the object for which it is called (practicalswift)
#10965 655970d Replace deprecated throw() with noexcept specifier (C++11) (practicalswift)
#10645 c484ec6 Use nullptr (C++11) instead of zero (0) as the null pointer constant (practicalswift)
#10901 22e301a Fix constness of ArgsManager methods (promag)
#10969 4afb5aa Declare single-argument (non-converting) constructors “explicit” (practicalswift)
#11071 dbf6bd6 Use static_assert(…, …) (C++11) instead of assert(…) where appropriate (practicalswift)
#10809 c559884 optim: mark a few classes final (theuni)
#10843 2ab7c63 Add attribute [[noreturn]] (C++11) to functions that will not return (practicalswift)
#11151 7fd49d0 Fix header guards using reserved identifiers (danra)
#11138 2982511 Compat: Simplify bswap_16 implementation (danra)
#11161 745bbdc Remove redundant explicitly defined copy ctors (danra)
#11144 cee4fe1 Move local include to before system includes (danra)
#10781 60dd9cc Python cleanups (practicalswift)
#10701 50fae68 Remove the virtual specifier for functions with the override specifier (practicalswift)
#11164 38a54a5 Fix boost headers included as user instead of system headers (danra)
#11143 3aa60b7 Fix include path for bitcoin-config.h (danra)
#8330 59e1789 Structure Packing Optimizations in C{,Mutable}Transaction (JeremyRubin)
#10845 39ae413 Remove unreachable code (practicalswift)
#11238 6acdb1f Add assertions before potential null deferences (MeshCollider)
#11259 089b742 Remove duplicate destination decoding (promag)
#11232 2f0d3e6 Ensure that data types are consistent (jjz)
#10793 efb4383 Changing &var[0] to var.data() (MeshCollider)
#11196 e278f86 Switch memory_cleanse implementation to BoringSSL’s to ensure memory clearing even with -lto (maaku)
#10888 9821274 range-based loops and const qualifications in net.cpp (benma)
#11351 6c4fecf Refactor: Modernize disallowed copy constructors/assignment (danra)
#11385 94c9015 Remove some unused functions and methods (sipa)
#11301 8776787 add m_added_nodes to connman options (benma)
#11432 058c0f9 Remove unused fTry from push_lock (promag)
#11107 e93fff1 Fix races in AppInitMain and others with lock and atomic bools (MeshCollider)
#9572 17f2ace Skip witness sighash cache for non-segwit transactions (jl2012)
#10961 da0478e Improve readability of DecodeBase58Check(…) (practicalswift)
#11133 a865b38 Document assumptions that are being made to avoid division by zero (practicalswift)
#11073 3bb77eb Remove dead store in ecdsa_signature_parse_der_lax (BitonicEelis)
#10898 470c730 Fix invalid checks (NULL checks after dereference, redundant checks, etc.) (practicalswift)
#11495 50d72b3 [trivial] Make namespace explicit for is_regular_file (jnewbery)
#11511 db2f83e [Init] Remove redundant exit(EXIT_FAILURE) instances and replace with return false (donaloconnor)
#10866 ef8a634 Fix -Wthread-safety-analysis warnings. Compile with -Wthread-safety-analysis if available (practicalswift)
#11221 0dec4cc Refactor: simpler read (gnuser)
#10696 ef3758d Remove redundant nullptr checks before deallocation (practicalswift)
#11043 5e9be16 Use std::unique_ptr (C++11) where possible (practicalswift)
#11353 05a7619 Small refactor of CCoinsViewCache::BatchWrite() (danra)
#10749 2adbddb Use compile-time constants instead of unnamed enumerations (remove “enum hack”) (practicalswift)
#11603 a933cb1 Move RPC registration out of AppInitParameterInteraction (ryanofsky)
#11722 26efc22 Switched sync.{cpp,h} to std threading primitives (tjps)
#10493 fbce66a Use range-based for loops (C++11) when looping over map elements (practicalswift)
#11337 0d7e0a3 Fix code constness in CBlockIndex::GetAncestor() overloads (danra)
#11516 0e722e8 crypto: Add test cases covering the relevant HMAC-SHA{256,512} key length boundaries (practicalswift)
#10574 5d132e8 Remove includes in .cpp files for things the corresponding .h file already included (practicalswift)
#11884 66479c0 Remove unused include in hash.cpp (kallewoof)
#10839 c66adb2 Don’t use pass by reference to const for cheaply-copied types (bool, char, etc.) (practicalswift)
#10657 79399c8 Utils: Improvements to ECDSA key-handling code (str4d)
#12250 e37ca2b Make CKey::Load references const (ryanofsky)
#12108 9220426 Remove unused fQuit var from checkqueue.h (donaloconnor)
#12159 f3c7062 Use the character based overload for std::string::find (kekimusmaximus)
#12266 3448907 Move scheduler/threadGroup into common-init instead of per-app (TheBlueMatt)
Miscellaneous
#11246 777519b github-merge: Coalesce git fetches (laanwj)
#10871 c9a4aa8 Handle getinfo in bitcoin-cli w/ -getinfo (revival of #8843) (achow101)
#11419 093074b Utils: Fix launchctl not being able to stop bitcoind (OmeGak)
#11394 6e4e98e Perform a weaker subtree check in Travis (sipa)
#11702 4122112 [build] Add a script for installing db4 (jamesob)
#11794 dd49862 Prefix leveldb debug logging (laanwj)
#11781 24df9af Add -debuglogfile option (laanwj)
#10773 c17f11f Shell script cleanups (practicalswift)
#11829 7630a1f Test datadir specified in conf file exists (MeshCollider)
#11836 d44535d Rename rpcuser.py to rpcauth.py (hkjn)
#11831 d48ab83 Always return true if AppInitMain got to the end (TheBlueMatt)
#11943 1808660 contrib: fix typo in install_db4.sh help message (laanwj)
#12075 c991b30 [scripts] Add missing univalue file to copyright_header.py (fanquake)
#12197 000ac4f Log debug build status and warn when running benchmarks (laanwj)
#10672 6ab0e4c Avoid division by zero in the case of a corrupt estimates file (practicalswift)
#11273 cdd6bbf Ignore old format estimation file (Xekyo)
#11951 1fb34e0 Remove dead feeest-file read code for old versions (TheBlueMatt)
#11421 9ccafb1 Merge current secp256k1 subtree (MarcoFalke)
#11573 2631d55 [Util] Update tinyformat.h (fanquake)
#10529 331352f Improve bitcoind systemd service file (Flowdalic)
#11620 70fec9e [build] .gitignore: add background.tiff (Sjors)
#11558 68e021e Minimal code changes to allow msvc compilation (sipsorcery)
#11284 10bee0d Fix invalid memory access in CScript::operator+= (guidovranken, ajtowns)
#10939 a1f7f18 [init] Check non-emptiness of -blocknotify command prior to executing (practicalswift)
#11467 937613d Fix typos. Use nullptr instead of NULL (practicalswift)
#11834 5bea05b [verify-commits] Fix gpg.sh’s echoing for commits with ‘\n’ (TheBlueMatt)
#11830 a13e443 rpcuser.py: Use ‘python’ not ‘python2’ (hkjn)
#12194 7abb0f0 Add change type option to fundrawtransaction (promag)
#12269 2ae7cf8 Update defaultAssumeValid to block 506067 (gmaxwell)
#11952 9ab9963 univalue: Bump subtree (MarcoFalke)
#12367 09fc859 Fix two fast-shutdown bugs (TheBlueMatt)
#12422 4d54e7a util: Make LockDirectory thread-safe, consistent, and fix OpenBSD 6.2 build (laanwj)
Credits
Thanks to everyone who directly contributed to this release:

251
Aaron Clauson
Aaron Golliver
aaron-hanson
Adam Langley
Akio Nakamura
Akira Takizawa
Alejandro Avilés
Alex Morcos
Alin Rus
Anditto Heristyo
Andras Elso
Andreas Schildbach
Andrew Chow
Anthony Towns
azuchi
Carl Dong
Chris Moore
Chris Stewart
Christian Gentry
Cory Fields
Cristian Mircea Messel
CryptAxe
Dan Raviv
Daniel Edgecumbe
danra
david60
Donal O’Connor
dongsamb
Dusty Williams
Eelis
esneider
Evan Klitzke
fanquake
Ferdinando M. Ametrano
fivepiece
flack
Florian Schmaus
gnuser
Gregory Maxwell
Gregory Sanders
Henrik Jonsson
Jack Grigg
Jacky C
James Evans
James O’Beirne
Jan Sarenik
Jeff Rade
Jeremiah Buddenhagen
Jeremy Rubin
Jim Posen
jjz
Joe Harvell
Johannes Kanig
John Newbery
Johnson Lau
Jonas Nick
Jonas Schnelli
João Barbosa
Jorge Timón
Karel Bílek
Karl-Johan Alm
klemens
Kyuntae Ethan Kim
laudaa
Lawrence Nahum
Lucas Betschart
Luke Dashjr
Luke Mlsna
MarcoFalke
Mark Friedenbach
Marko Bencun
Martin Ankerl
Matt Corallo
mruddy
Murch
NicolasDorier
Pablo Fernandez
Paul Berg
Pedro Branco
Pierre Rochard
Pieter Wuille
practicalswift
Randolf Richardson
Russell Yanofsky
Samuel Dobson
Sean Erle Johnson
Shooter
Sjors Provoost
Suhas Daftuar
Thomas Snider
Thoragh
Tim Shimmin
Tomas van der Wansem
Utsav Gupta
Varunram Ganesh
Vivek Ganesan
Werner Lemberg
William Casarin
Willy Ko
Wladimir J. van der Laan
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.16.1 released
15 June 2018

How to Upgrade
Compatibility
Notable changes
Credits
Bitcoin Core version 0.16.1 is not available for security reasons:

https://bitcoincore.org/bin/bitcoin-core-0.16.1/

This is a new major version release, including new features, various bugfixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

The first time you run version 0.15.0 or newer, your chainstate database will be converted to a new format, which will take anywhere from a few minutes to half an hour, depending on the speed of your machine.

Note that the block database format also changed in version 0.8.0 and there is no automatic upgrade code from before version 0.8 to version 0.15.0 or higher. Upgrading directly from 0.7.x and earlier without re-downloading the blockchain is not supported. However, as usual, old wallet versions are still supported.

Downgrading warning
Wallets created in 0.16 and later are not compatible with versions prior to 0.16 and will not work if you try to use newly created wallets in older versions. Existing wallets that were created with older versions are not affected by this.

Compatibility
Bitcoin Core is extensively tested on multiple operating systems using the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.

Bitcoin Core should also work on most other Unix-like systems but is not frequently tested on them.

Notable changes
Miner block size removed
The -blockmaxsize option for miners to limit their blocks’ sizes was deprecated in version 0.15.1, and has now been removed. Miners should use the -blockmaxweight option if they want to limit the weight of their blocks’ weights.

0.16.1 change log
Policy
#11423 d353dd1 [Policy] Several transaction standardness rules (jl2012)
Mining
#12756 e802c22 [config] Remove blockmaxsize option (jnewbery)
Block and transaction handling
#13199 c71e535 Bugfix: ensure consistency of m_failed_blocks after reconsiderblock (sdaftuar)
#13023 bb79aaf Fix some concurrency issues in ActivateBestChain() (skeees)
P2P protocol and network code
#12626 f60e84d Limit the number of IPs addrman learns from each DNS seeder (EthanHeilman)
Wallet
#13265 5d8de76 Exit SyncMetaData if there are no transactions to sync (laanwj)
#13030 5ff571e Fix zapwallettxes/multiwallet interaction. (jnewbery)
GUI
#12999 1720eb3 Show the Window when double clicking the taskbar icon (ken2812221)
#12650 f118a7a Fix issue: “default port not shown correctly in settings dialog” (251Labs)
#13251 ea487f9 Rephrase Bech32 checkbox texts, and enable it with legacy address default (fanquake)
Build system
#12474 b0f692f Allow depends system to support armv7l (hkjn)
#12585 72a3290 depends: Switch to downloading expat from GitHub (fanquake)
#12648 46ca8f3 test: Update trusted git root (MarcoFalke)
#11995 686cb86 depends: Fix Qt build with Xcode 9 (fanquake)
#12636 845838c backport: #11995 Fix Qt build with Xcode 9 (fanquake)
#12946 e055bc0 depends: Fix Qt build with XCode 9.3 (fanquake)
#12998 7847b92 Default to defining endian-conversion DECLs in compat w/o config (TheBlueMatt)
Tests and QA
#12447 01f931b Add missing signal.h header (laanwj)
#12545 1286f3e Use wait_until to ensure ping goes out (Empact)
#12804 4bdb0ce Fix intermittent rpc_net.py failure. (jnewbery)
#12553 0e98f96 Prefer wait_until over polling with time.sleep (Empact)
#12486 cfebd40 Round target fee to 8 decimals in assert_fee_amount (kallewoof)
#12843 df38b13 Test starting bitcoind with -h and -version (jnewbery)
#12475 41c29f6 Fix python TypeError in script.py (MarcoFalke)
#12638 0a76ed2 Cache only chain and wallet for regtest datadir (MarcoFalke)
#12902 7460945 Handle potential cookie race when starting node (sdaftuar)
#12904 6c26df0 Ensure bitcoind processes are cleaned up when tests end (sdaftuar)
#13049 9ea62a3 Backports (MarcoFalke)
#13201 b8aacd6 Handle disconnect_node race (sdaftuar)
Miscellaneous
#12518 a17fecf Bump leveldb subtree (MarcoFalke)
#12442 f3b8d85 devtools: Exclude patches from lint-whitespace (MarcoFalke)
#12988 acdf433 Hold cs_main while calling UpdatedBlockTip() signal (skeees)
#12985 0684cf9 Windows: Avoid launching as admin when NSIS installer ends. (JeremyRand)
Documentation
#12637 60086dd backport: #12556 fix version typo in getpeerinfo RPC call help (fanquake)
#13184 4087dd0 RPC Docs: gettxout*: clarify bestblock and unspent counts (harding)
#13246 6de7543 Bump to Ubuntu Bionic 18.04 in build-windows.md (ken2812221)
#12556 e730b82 Fix version typo in getpeerinfo RPC call help (tamasblummer)
Credits
Thanks to everyone who directly contributed to this release:

251
Ben Woosley
Chun Kuan Lee
David A. Harding
e0
fanquake
Henrik Jonsson
JeremyRand
Jesse Cohen
John Newbery
Johnson Lau
Karl-Johan Alm
Luke Dashjr
MarcoFalke
Matt Corallo
Pieter Wuille
Suhas Daftuar
Tamas Blummer
Wladimir J. van der Laan
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.16.2 released
29 July 2018

How to Upgrade
Compatibility
Credits
Bitcoin Core version 0.16.2 is not available for security reasons:

https://bitcoincore.org/bin/bitcoin-core-0.16.2/

This is a new minor version release, with various bugfixes as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

The first time you run version 0.15.0 or newer, your chainstate database will be converted to a new format, which will take anywhere from a few minutes to half an hour, depending on the speed of your machine.

Note that the block database format also changed in version 0.8.0 and there is no automatic upgrade code from before version 0.8 to version 0.15.0 or higher. Upgrading directly from 0.7.x and earlier without re-downloading the blockchain is not supported. However, as usual, old wallet versions are still supported.

Downgrading warning
Wallets created in 0.16 and later are not compatible with versions prior to 0.16 and will not work if you try to use newly created wallets in older versions. Existing wallets that were created with older versions are not affected by this.

Compatibility
Bitcoin Core is extensively tested on multiple operating systems using the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.

Bitcoin Core should also work on most other Unix-like systems but is not frequently tested on them.

0.16.2 change log
Wallet
#13622 c04a4a5 Remove mapRequest tracking that just effects Qt display. (TheBlueMatt)
#12905 cfc6f74 [rpcwallet] Clamp walletpassphrase value at 100M seconds (sdaftuar)
#13437 ed82e71 wallet: Erase wtxOrderd wtx pointer on removeprunedfunds (MarcoFalke)
RPC and other APIs
#13451 cbd2f70 rpc: expose CBlockIndex::nTx in getblock(header) (instagibbs)
#13507 f7401c8 RPC: Fix parameter count check for importpubkey (kristapsk)
#13452 6b9dc8c rpc: have verifytxoutproof check the number of txns in proof structure (instagibbs)
#12837 bf1f150 rpc: fix type mistmatch in listreceivedbyaddress (joemphilips)
#12743 657dfc5 Fix csBestBlock/cvBlockChange waiting in rpc/mining (sipa)
GUI
#12432 f78e7f6 [qt] send: Clear All also resets coin control options (Sjors)
#12617 21dd512 gui: Show messages as text not html (laanwj)
#12793 cf6feb7 qt: Avoid reseting on resetguisettigs=0 (MarcoFalke)
Build system
#13544 9fd3e00 depends: Update Qt download url (fanquake)
#12573 88d1a64 Fix compilation when compiler do not support __builtin_clz* (532479301)
Tests and QA
#13061 170b309 Make tests pass after 2020 (bmwiedemann)
#13192 79c4fff [tests] Fixed intermittent failure in p2p_sendheaders.py (lmanners)
#13300 d9c5630 qa: Initialize lockstack to prevent null pointer deref (MarcoFalke)
#13545 e15e3a9 tests: Fix test case streams_serializedata_xor Remove Boost dependency. (practicalswift)
#13304 cbdabef qa: Fix wallet_listreceivedby race (MarcoFalke)
Miscellaneous
#12887 2291774 Add newlines to end of log messages (jnewbery)
#12859 18b0c69 Bugfix: Include <memory> for std::unique_ptr (luke-jr)
#13131 ce8aa54 Add Windows shutdown handler (ken2812221)
#13652 20461fc rpc: Fix that CWallet::AbandonTransaction would leave the grandchildren, etc. active (Empact)
Credits
Thanks to everyone who directly contributed to this release:

532479301
Ben Woosley
Bernhard M. Wiedemann
Chun Kuan Lee
Cory Fields
fanquake
Gregory Sanders
joemphilips
John Newbery
Kristaps Kaupe
lmanners
Luke Dashjr
MarcoFalke
Matt Corallo
Pieter Wuille
practicalswift
Sjors Provoost
Suhas Daftuar
Wladimir J. van der Laan
And to those that reported security issues:

Braydon Fuller
Himanshu Mehta
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.16.3 released
18 September 2018

How to Upgrade
Compatibility
Notable changes
Credits
Bitcoin Core version 0.16.3 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.16.3/

This is a new minor version release, with various bugfixes.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

The first time you run version 0.15.0 or newer, your chainstate database will be converted to a new format, which will take anywhere from a few minutes to half an hour, depending on the speed of your machine.

Note that the block database format also changed in version 0.8.0 and there is no automatic upgrade code from before version 0.8 to version 0.15.0 or higher. Upgrading directly from 0.7.x and earlier without re-downloading the blockchain is not supported. However, as usual, old wallet versions are still supported.

Downgrading warning
Wallets created in 0.16 and later are not compatible with versions prior to 0.16 and will not work if you try to use newly created wallets in older versions. Existing wallets that were created with older versions are not affected by this.

Compatibility
Bitcoin Core is extensively tested on multiple operating systems using the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.

Bitcoin Core should also work on most other Unix-like systems but is not frequently tested on them.

Notable changes
Denial-of-Service vulnerability
A denial-of-service vulnerability (CVE-2018-17144) exploitable by miners has been discovered in Bitcoin Core versions 0.14.0 up to 0.16.2. It is recommended to upgrade any of the vulnerable versions to 0.16.3 as soon as possible.

0.16.3 change log
Consensus
#14249 696b936 Fix crash bug with duplicate inputs within a transaction (TheBlueMatt, sdaftuar)
RPC and other APIs
#13547 212ef1f Make signrawtransaction* give an error when amount is needed but missing (ajtowns)
Miscellaneous
#13655 1cdbea7 bitcoinconsensus: invalid flags error should be set to bitcoinconsensus_err (afk11)
Documentation
#13844 11b9dbb correct the help output for -prune (hebasto)
Credits
Thanks to everyone who directly contributed to this release:

Anthony Towns
Hennadii Stepanov
Matt Corallo
Suhas Daftuar
Thomas Kerin
Wladimir J. van der Laan
And to those that reported security issues:

(anonymous reporter)


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.14.3 released
28 September 2018

Compatibility
Notable changes
Known Bugs
0.14.3 Change log
- {:.}
Consensus
- {:.}
RPC and other APIs
- {:.}
P2P protocol and network code
- {:.}
Build system
- {:.}
Miscellaneous
- {:.}
GUI
- {:.}
Wallet
Credits
Bitcoin Core version 0.14.3 is now available from:

https://bitcoin.org/bin/bitcoin-core-0.14.3/

This is a new minor version release, including various bugfixes and performance improvements.

Please report bugs using the issue tracker at github:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

Compatibility
Bitcoin Core is extensively tested on multiple operating systems using the Linux kernel, macOS 10.8+, and Windows Vista and later.

Microsoft ended support for Windows XP on April 8th, 2014, No attempt is made to prevent installing or running the software on Windows XP, you can still do so at your own risk but be aware that there are known instabilities and issues. Please do not report issues about Windows XP to the issue tracker.

Bitcoin Core should also work on most other Unix-like systems but is not frequently tested on them.

Notable changes
Denial-of-Service vulnerability CVE-2018-17144 ——————————-

A denial-of-service vulnerability exploitable by miners has been discovered in Bitcoin Core versions 0.14.0 up to 0.16.2. It is recommended to upgrade any of the vulnerable versions to 0.14.3, 0.15.2 or 0.16.3 as soon as possible.

Known Bugs
Since 0.14.0 the approximate transaction fee shown in Bitcoin-Qt when using coin control and smart fee estimation does not reflect any change in target from the smart fee slider. It will only present an approximate fee calculated using the default target. The fee calculated using the correct target is still applied to the transaction and shown in the final send confirmation dialog.

0.14.3 Change log
Detailed release notes follow. This overview includes changes that affect behavior, not code moves, refactors and string updates. For convenience in locating the code changes and accompanying discussion, both the pull request and git merge commit are mentioned.

Consensus
#14247 52965fb Fix crash bug with duplicate inputs within a transaction (TheBlueMatt, sdaftuar)
RPC and other APIs
#10445 87a21d5 Fix: make CCoinsViewDbCursor::Seek work for missing keys (Pieter Wuille, Gregory Maxwell)
#9853 Return correct error codes in setban(), fundrawtransaction(), removeprunedfunds(), bumpfee(), blockchain.cpp (John Newbery)
P2P protocol and network code
#10234 d289b56 [net] listbanned RPC and QT should show correct banned subnets (John Newbery)
Build system
Miscellaneous
#10451 3612219 contrib/init/bitcoind.openrcconf: Don’t disable wallet by default (Luke Dashjr)
#10250 e23cef0 Fix some empty vector references (Pieter Wuille)
#10196 d28d583 PrioritiseTransaction updates the mempool tx counter (Suhas Daftuar)
#9497 e207342 Fix CCheckQueue IsIdle (potential) race condition and remove dangerous constructors. (Jeremy Rubin)
GUI
#9481 7abe7bb Give fallback fee a reasonable indent (Luke Dashjr)
#9481 3e4d7bf Qt/Send: Figure a decent warning colour from theme (Luke Dashjr)
#9481 e207342 Show more significant warning if we fall back to the default fee (Jonas Schnelli)
Wallet
#10308 28b8b8b Securely erase potentially sensitive keys/values (tjps)
#10265 ff13f59 Make sure pindex is non-null before possibly referencing in LogPrintf call. (Karl-Johan Alm)
Credits
Thanks to everyone who directly contributed to this release:

Cory Fields
CryptAxe
fanquake
Jeremy Rubin
John Newbery
Jonas Schnelli
Gregory Maxwell
Karl-Johan Alm
Luke Dashjr
MarcoFalke
Matt Corallo
Mikerah
Pieter Wuille
practicalswift
Suhas Daftuar
Thomas Snider
Tjps
Wladimir J. van der Laan
And to those that reported security issues:

awemany (for CVE-2018-17144, previously credited as “anonymous reporter”)


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.15.2 released
28 September 2018

How to Upgrade
Compatibility
Notable changes
0.15.2 Change log
- {:.}
Build system
- {:.}
Consensus
- {:.}
RPC
- {:.}
Wallet
- {:.}
bitcoin-tx
- {:.}
Tests
Credits
Bitcoin Core version 0.15.2 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.15.2/

This is a new minor version release, including various bugfixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

The first time you run version 0.15.0 or higher, your chainstate database will be converted to a new format, which will take anywhere from a few minutes to half an hour, depending on the speed of your machine.

The file format of fee_estimates.dat changed in version 0.15.0. Hence, a downgrade from version 0.15 or upgrade to version 0.15 will cause all fee estimates to be discarded.

Note that the block database format also changed in version 0.8.0 and there is no automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading directly from 0.7.x and earlier without redownloading the blockchain is not supported. However, as usual, old wallet versions are still supported.

Downgrading warning
The chainstate database for this release is not compatible with previous releases, so if you run 0.15 and then decide to switch back to any older version, you will need to run the old release with the -reindex-chainstate option to rebuild the chainstate data structures in the old format.

If your node has pruning enabled, this will entail re-downloading and processing the entire blockchain.

Compatibility
Bitcoin Core is extensively tested on multiple operating systems using the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.

Bitcoin Core should also work on most other Unix-like systems but is not frequently tested on them.

Notable changes
Denial-of-Service vulnerability CVE-2018-17144
A denial-of-service vulnerability exploitable by miners has been discovered in Bitcoin Core versions 0.14.0 up to 0.16.2. It is recommended to upgrade any of the vulnerable versions to 0.15.2 or 0.16.3 as soon as possible.

0.15.2 Change log
Build system
#11995 9bb1a16 depends: Fix Qt build with XCode 9.2(fanquake)
#12946 93b9a61 depends: Fix Qt build with XCode 9.3(fanquake)
#13544 9fd3e00 depends: Update Qt download url (fanquake)
#11847 cb7ef31 Make boost::multi_index comparators const (sdaftuar)
Consensus
#14247 4b8a3f5 Fix crash bug with duplicate inputs within a transaction (TheBlueMatt, sdaftuar)
RPC
#11676 7af2457 contrib/init: Update openrc-run filename (Luke Dashjr)
#11277 7026845 Fix uninitialized URI in batch RPC requests (Russell Yanofsky)
Wallet
#11289 3f1db56 Wrap dumpwallet warning and note scripts aren’t dumped (MeshCollider)
#11289 42ea47d Add wallet backup text to import, add and dumpwallet RPCs (MeshCollider)
#11590 6372a75 [Wallet] always show help-line of wallet encryption calls (Jonas Schnelli)
bitcoin-tx
#11554 a69cc07 Sanity-check script sizes in bitcoin-tx (TheBlueMatt)
Tests
#11277 3a6cdd4 Add test for multiwallet batch RPC calls (Russell Yanofsky)
#11647 1c8c7f8 Add missing batch rpc calls to python coverage logs (Russell Yanofsky)
#11277 1036c43 Add missing multiwallet rpc calls to python coverage logs (Russell Yanofsky)
#11277 305f768 Limit AuthServiceProxyWrapper.__getattr__ wrapping (Russell Yanofsky)
#11277 2eea279 Make AuthServiceProxy._batch method usable (Russell Yanofsky)
Credits
Thanks to everyone who directly contributed to this release:

fanquake
Jonas Schnelli
Luke Dashjr
Matt Corallo
MeshCollider
Russell Yanofsky
Suhas Daftuar
Wladimir J. van der Laan
And to those that reported security issues:

awemany (for CVE-2018-17144, previously credited as “anonymous reporter”)


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.17.0 released
3 October 2018

How to Upgrade
Compatibility
Known issues
Notable changes
0.17.0 change log
- {:.}
Consensus
- {:.}
Policy
- {:.}
Mining
- {:.}
Block and transaction handling
- {:.}
P2P protocol and network code
- {:.}
Wallet
- {:.}
RPC and other APIs
- {:.}
GUI
- {:.}
Build system
- {:.}
Tests and QA
- {:.}
Miscellaneous
- {:.}
Documentation
Credits
Bitcoin Core version 0.17.0 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.17.0/

or through BitTorrent:

magnet:?xt=urn:btih:1c72f17bc1667a2ce81860b75135e491f6637d05&dn=bitcoin-core-0.17.0&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969&tr=udp%3A%2F%2Fzer0day.ch%3A1337&tr=udp%3A%2F%2Fexplodie.org%3A6969

This is a new major version release, including new features, various bugfixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.

The first time you run version 0.15.0 or newer, your chainstate database will be converted to a new format, which will take anywhere from a few minutes to half an hour, depending on the speed of your machine.

Note that the block database format also changed in version 0.8.0 and there is no automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading directly from 0.7.x and earlier without redownloading the blockchain is not supported. However, as usual, old wallet versions are still supported.

Downgrading warning
The chainstate database for this release is not compatible with previous releases, so if you run 0.15 and then decide to switch back to any older version, you will need to run the old release with the -reindex-chainstate option to rebuild the chainstate data structures in the old format.

If your node has pruning enabled, this will entail re-downloading and processing the entire blockchain.

Compatibility
Bitcoin Core is extensively tested on multiple operating systems using the Linux kernel, macOS 10.10+, and Windows 7 and newer (Windows XP is not supported).

Bitcoin Core should also work on most other Unix-like systems but is not frequently tested on them.

From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn’t support versions of macOS older than 10.10.

Known issues
Upgrading from 0.13.0 or older currently results in memory blow-up during the roll-back of blocks to the SegWit activation point. In these cases, a full -reindex is necessary.

The GUI suffers from visual glitches in the new MacOS dark mode. This has to do with our Qt theme handling and is not a new problem in 0.17.0, but is expected to be resolved in 0.17.1.

Notable changes
Changed configuration options
-includeconf=<file> can be used to include additional configuration files. Only works inside the bitcoin.conf file, not inside included files or from command-line. Multiple files may be included. Can be disabled from command- line via -noincludeconf. Note that multi-argument commands like -includeconf will override preceding -noincludeconf, i.e.
noincludeconf=1
includeconf=relative.conf
as bitcoin.conf will still include relative.conf.

GUI changes
Block storage can be limited under Preferences, in the Main tab. Undoing this setting requires downloading the full blockchain again. This mode is incompatible with -txindex and -rescan.
External wallet files
The -wallet=<path> option now accepts full paths instead of requiring wallets to be located in the -walletdir directory.

Newly created wallet format
If -wallet=<path> is specified with a path that does not exist, it will now create a wallet directory at the specified location (containing a wallet.dat data file, a db.log file, and database/log.?????????? files) instead of just creating a data file at the path and storing log files in the parent directory. This should make backing up wallets more straightforward than before because the specified wallet path can just be directly archived without having to look in the parent directory for transaction log files.

For backwards compatibility, wallet paths that are names of existing data files in the -walletdir directory will continue to be accepted and interpreted the same as before.

Dynamic loading and creation of wallets
Previously, wallets could only be loaded or created at startup, by specifying -wallet parameters on the command line or in the bitcoin.conf file. It is now possible to load, create and unload wallets dynamically at runtime:

Existing wallets can be loaded by calling the loadwallet RPC. The wallet can be specified as file/directory basename (which must be located in the walletdir directory), or as an absolute path to a file/directory.
New wallets can be created (and loaded) by calling the createwallet RPC. The provided name must not match a wallet file in the walletdir directory or the name of a wallet that is currently loaded.
Loaded wallets can be unloaded by calling the unloadwallet RPC.
This feature is currently only available through the RPC interface.

Coin selection
Partial spend avoidance
When an address is paid multiple times the coins from those separate payments can be spent separately which hurts privacy due to linking otherwise separate addresses. A new -avoidpartialspends flag has been added (default=false). If enabled, the wallet will always spend existing UTXO to the same address together even if it results in higher fees. If someone were to send coins to an address after it was used, those coins will still be included in future coin selections.

Configuration sections for testnet and regtest
It is now possible for a single configuration file to set different options for different networks. This is done by using sections or by prefixing the option with the network, such as:

main.uacomment=bitcoin
test.uacomment=bitcoin-testnet
regtest.uacomment=regtest
[main]
mempoolsize=300
[test]
mempoolsize=100
[regtest]
mempoolsize=20
If the following options are not in a section, they will only apply to mainnet: addnode=, connect=, port=, bind=, rpcport=, rpcbind= and wallet=. The options to choose a network (regtest= and testnet=) must be specified outside of sections.

‘label’ and ‘account’ APIs for wallet
A new ‘label’ API has been introduced for the wallet. This is intended as a replacement for the deprecated ‘account’ API. The ‘account’ can continue to be used in V0.17 by starting bitcoind with the ‘-deprecatedrpc=accounts’ argument, and will be fully removed in V0.18.

The label RPC methods mirror the account functionality, with the following functional differences:

Labels can be set on any address, not just receiving addresses. This functionality was previously only available through the GUI.
Labels can be deleted by reassigning all addresses using the setlabel RPC method.
There isn’t support for sending transactions from a label, or for determining which label a transaction was sent from.
Labels do not have a balance.
Here are the changes to RPC methods:

Deprecated Method	New Method	Notes
getaccount	getaddressinfo	getaddressinfo returns a json object with address information instead of just the name of the account as a string.
getaccountaddress	n/a	There is no replacement for getaccountaddress since labels do not have an associated receive address.
getaddressesbyaccount	getaddressesbylabel	getaddressesbylabel returns a json object with the addresses as keys, instead of a list of strings.
getreceivedbyaccount	getreceivedbylabel	no change in behavior
listaccounts	listlabels	listlabels does not return a balance or accept minconf and watchonly arguments.
listreceivedbyaccount	listreceivedbylabel	Both methods return new label fields, along with account fields for backward compatibility.
move	n/a	no replacement
sendfrom	n/a	no replacement
setaccount	setlabel	Both methods now: <ul><li>allow assigning labels to any address, instead of raising an error if the address is not receiving address.<li>delete the previous label associated with an address when the final address using that label is reassigned to a different label, instead of making an implicit getaccountaddress call to ensure the previous label still has a receiving address.
Changed Method	Notes
addmultisigaddress	Renamed account named parameter to label. Still accepts account for backward compatibility if running with ‘-deprecatedrpc=accounts’.
getnewaddress	Renamed account named parameter to label. Still accepts account for backward compatibility. if running with ‘-deprecatedrpc=accounts’
listunspent	Returns new label fields. account field will be returned for backward compatibility if running with ‘-deprecatedrpc=accounts’
sendmany	The account named parameter has been renamed to dummy. If provided, the dummy parameter must be set to the empty string, unless running with the -deprecatedrpc=accounts argument (in which case functionality is unchanged).
listtransactions	The account named parameter has been renamed to dummy. If provided, the dummy parameter must be set to the string *, unless running with the -deprecatedrpc=accounts argument (in which case functionality is unchanged).
getbalance	account, minconf and include_watchonly parameters are deprecated, and can only be used if running with ‘-deprecatedrpc=accounts’
BIP 174 Partially Signed Bitcoin Transactions support
BIP 174 PSBT is an interchange format for Bitcoin transactions that are not fully signed yet, together with relevant metadata to help entities work towards signing it. It is intended to simplify workflows where multiple parties need to cooperate to produce a transaction. Examples include hardware wallets, multisig setups, and CoinJoin transactions.

Overall workflow
Overall, the construction of a fully signed Bitcoin transaction goes through the following steps:

A Creator proposes a particular transaction to be created. He constructs a PSBT that contains certain inputs and outputs, but no additional metadata.
For each input, an Updater adds information about the UTXOs being spent by the transaction to the PSBT.
A potentially other Updater adds information about the scripts and public keys involved in each of the inputs (and possibly outputs) of the PSBT.
Signers inspect the transaction and its metadata to decide whether they agree with the transaction. They can use amount information from the UTXOs to assess the values and fees involved. If they agree, they produce a partial signature for the inputs for which they have relevant key(s).
A Finalizer is run for each input to convert the partial signatures and possibly script information into a final scriptSig and/or scriptWitness.
An Extractor produces a valid Bitcoin transaction (in network format) from a PSBT for which all inputs are finalized.
Generally, each of the above (excluding Creator and Extractor) will simply add more and more data to a particular PSBT. In a naive workflow, they all have to operate sequentially, passing the PSBT from one to the next, until the Extractor can convert it to a real transaction. In order to permit parallel operation, Combiners can be employed which merge metadata from different PSBTs for the same unsigned transaction.

The names above in bold are the names of the roles defined in BIP174. They’re useful in understanding the underlying steps, but in practice, software and hardware implementations will typically implement multiple roles simultaneously.

RPCs
converttopsbt (Creator) is a utility RPC that converts an unsigned raw transaction to PSBT format. It ignores existing signatures.
createpsbt (Creator) is a utility RPC that takes a list of inputs and outputs and converts them to a PSBT with no additional information. It is equivalent to calling createrawtransaction followed by converttopsbt.
walletcreatefundedpsbt (Creator, Updater) is a wallet RPC that creates a PSBT with the specified inputs and outputs, adds additional inputs and change to it to balance it out, and adds relevant metadata. In particular, for inputs that the wallet knows about (counting towards its normal or watch-only balance), UTXO information will be added. For outputs and inputs with UTXO information present, key and script information will be added which the wallet knows about. It is equivalent to running createrawtransaction, followed by fundrawtransaction, and converttopsbt.
walletprocesspsbt (Updater, Signer, Finalizer) is a wallet RPC that takes as input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss it, and optionally signs inputs. Where possible it also finalizes the partial signatures.
finalizepsbt (Finalizer, Extractor) is a utility RPC that finalizes any partial signatures, and if all inputs are finalized, converts the result to a fully signed transaction which can be broadcast with sendrawtransaction.
combinepsbt (Combiner) is a utility RPC that implements a Combiner. It can be used at any point in the workflow to merge information added to different versions of the same PSBT. In particular it is useful to combine the output of multiple Updaters or Signers.
decodepsbt is a diagnostic utility RPC which will show all information in a PSBT in human-readable form, as well as compute its eventual fee if known.
Upgrading non-HD wallets to HD wallets
Since Bitcoin Core 0.13.0, creating new BIP 32 Hierarchical Deterministic wallets has been supported by Bitcoin Core but old non-HD wallets could not be upgraded to HD. Now non-HD wallets can be upgraded to HD using the -upgradewallet command line option. This upgrade will result in the all keys in the keypool being marked as used and a new keypool generated. A new backup must be made when this upgrade is performed.

Additionally, -upgradewallet can be used to upgraded from a non-split HD chain (all keys generated with m/0'/0'/i') to a split HD chain (receiving keys generated with 'm/0'/0'/i' and change keys generated with m'/0'/1'/i'). When this upgrade occurs, all keys already in the keypool will remain in the keypool to be used until all keys from before the upgrade are exhausted. This is to avoid issues with backups and downgrades when some keys may come from the change key keypool. Users can begin using the new split HD chain keypools by using the newkeypool RPC to mark all keys in the keypool as used and begin using a new keypool generated from the split HD chain.

HD Master key rotation
A new RPC, sethdseed, has been introduced which allows users to set a new HD seed or set their own HD seed. This allows for a new HD seed to be used. A new backup must be made when a new HD seed is set.

Low-level RPC changes
The new RPC scantxoutset can be used to scan the UTXO set for entries that match certain output descriptors. Refer to the output descriptors reference documentation for more details. This call is similar to listunspent but does not use a wallet, meaning that the wallet can be disabled at compile or run time. This call is experimental, as such, is subject to changes or removal in future releases.

The createrawtransaction RPC will now accept an array or dictionary (kept for compatibility) for the outputs parameter. This means the order of transaction outputs can be specified by the client.
The fundrawtransaction RPC will reject the previously deprecated reserveChangeKey option.
sendmany now shuffles outputs to improve privacy, so any previously expected behavior with regards to output ordering can no longer be relied upon.
The new RPC testmempoolaccept can be used to test acceptance of a transaction to the mempool without adding it.
JSON transaction decomposition now includes a weight field which provides the transaction’s exact weight. This is included in REST /rest/tx/ and /rest/block/ endpoints when in json mode. This is also included in getblock (with verbosity=2), listsinceblock, listtransactions, and getrawtransaction RPC commands.
New fees field introduced in getrawmempool, getmempoolancestors, getmempooldescendants and getmempoolentry when verbosity is set to true with sub-fields ancestor, base, modified and descendant denominated in BTC. This new field deprecates previous fee fields, such as fee, modifiedfee, ancestorfee and descendantfee.
The new RPC getzmqnotifications returns information about active ZMQ notifications.
When bitcoin is not started with any -wallet=<path> options, the name of the default wallet returned by getwalletinfo and listwallets RPCs is now the empty string "" instead of "wallet.dat". If bitcoin is started with any -wallet=<path> options, there is no change in behavior, and the name of any wallet is just its <path> string.
Passing an empty string ("") as the address_type parameter to getnewaddress, getrawchangeaddress, addmultisigaddress, fundrawtransaction RPCs is now an error. Previously, this would fall back to using the default address type. It is still possible to pass null or leave the parameter unset to use the default address type.

Bare multisig outputs to our keys are no longer automatically treated as incoming payments. As this feature was only available for multisig outputs for which you had all private keys in your wallet, there was generally no use for them compared to single-key schemes. Furthermore, no address format for such outputs is defined, and wallet software can’t easily send to it. These outputs will no longer show up in listtransactions, listunspent, or contribute to your balance, unless they are explicitly watched (using importaddress or importmulti with hex script argument). signrawtransaction* also still works for them.

The getwalletinfo RPC method now returns an hdseedid value, which is always the same as the incorrectly-named hdmasterkeyid value. hdmasterkeyid will be removed in V0.18.
The getaddressinfo RPC method now returns an hdseedid value, which is always the same as the incorrectly-named hdmasterkeyid value. hdmasterkeyid will be removed in V0.18.

Parts of the validateaddress RPC method have been deprecated and moved to getaddressinfo. Clients must transition to using getaddressinfo to access this information before upgrading to v0.18. The following deprecated fields have moved to getaddressinfo and will only be shown with -deprecatedrpc=validateaddress: ismine, iswatchonly, script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, hdmasterkeyid.
signrawtransaction is deprecated and will be fully removed in v0.18. To use signrawtransaction in v0.17, restart bitcoind with -deprecatedrpc=signrawtransaction. Projects should transition to using signrawtransactionwithkey and signrawtransactionwithwallet before upgrading to v0.18.
Other API changes
The inactivehdmaster property in the dumpwallet output has been corrected to inactivehdseed
Logging
The log timestamp format is now ISO 8601 (e.g. “2018-02-28T12:34:56Z”).

When running bitcoind with -debug but without -daemon, logging to stdout is now the default behavior. Setting -printtoconsole=1 no longer implicitly disables logging to debug.log. Instead, logging to file can be explicitly disabled by setting -debuglogfile=0.

Transaction index changes
The transaction index is now built separately from the main node procedure, meaning the -txindex flag can be toggled without a full reindex. If bitcoind is run with -txindex on a node that is already partially or fully synced without one, the transaction index will be built in the background and become available once caught up. When switching from running -txindex to running without the flag, the transaction index database will not be deleted automatically, meaning it could be turned back on at a later time without a full resync.

Miner block size removed
The -blockmaxsize option for miners to limit their blocks’ sizes was deprecated in V0.15.1, and has now been removed. Miners should use the -blockmaxweight option if they want to limit the weight of their blocks.

Python Support
Support for Python 2 has been discontinued for all test files and tools.

0.17.0 change log
Consensus
#12204 3fa24bb Fix overly eager BIP30 bypass (morcos)
Policy
#12568 ed6ae80 Allow dustrelayfee to be set to zero (luke-jr)
#13120 ca2a233 Treat segwit as always active (MarcoFalke)
#13096 062738c Fix MAX_STANDARD_TX_WEIGHT check (jl2012)
Mining
#12693 df529dc Remove unused variable in SortForBlock (drewx2)
#12448 84efa9a Interrupt block generation on shutdown request (promag)
Block and transaction handling
#12225 67447ba Mempool cleanups (sdaftuar)
#12356 fd65937 Fix ‘mempool min fee not met’ debug output (Empact)
#12287 bf3353d Optimise lock behaviour for GuessVerificationProgress() (jonasschnelli)
#11889 47a7666 Drop extra script variable in ProduceSignature (ryanofsky)
#11880 d59b8d6 Stop special-casing phashBlock handling in validation for TBV (TheBlueMatt)
#12431 947c25e Only call NotifyBlockTip when chainActive changes (jamesob)
#12653 534b8fa Allow to optional specify the directory for the blocks storage (jonasschnelli)
#12172 3b62a91 Bugfix: RPC: savemempool: Don’t save until LoadMempool() is finished (jtimon)
#12167 88430cb Make segwit failure due to CLEANSTACK violation return a SCRIPT_ERR_CLEANSTACK error code (maaku)
#12561 24133b1 Check for block corruption in ConnectBlock() (sdaftuar)
#11617 1b5723e Avoid lock: Call FlushStateToDisk(…) regardless of fCheckForPruning (practicalswift)
#11739 0a8b7b4 Enforce SCRIPT_VERIFY_P2SH and SCRIPT_VERIFY_WITNESS from genesis (sdaftuar)
#12885 a49381d Reduce implementation code inside CScript (sipa)
#13032 34dd1a6 Output values for “min relay fee not met” error (kristapsk)
#13033 a07e8ca Build txindex in parallel with validation (jimpo)
#13080 66cc47b Add compile time checking for ::mempool.cs runtime locking assertions (practicalswift)
#13185 08c1caf Bugfix: the end of a reorged chain is invalid when connect fails (sipa)
#11689 0264836 Fix missing locking in CTxMemPool::check(…) and CTxMemPool::setSanityCheck(…) (practicalswift)
#13011 3c2a41a Cache witness hash in CTransaction (MarcoFalke)
#13191 0de7cc8 Specialized double-SHA256 with 64 byte inputs with SSE4.1 and AVX2 (sipa)
#13243 ea263e1 Make reusable base class for auxiliary indices (jimpo)
#13393 a607d23 Enable double-SHA256-for-64-byte code on 32-bit x86 (sipa)
#13428 caabdea validation: check the specified number of blocks (off-by-one) (kallewoof)
#13438 450055b Improve coverage of SHA256 SelfTest code (sipa)
#13431 954f4a9 validation: count blocks correctly for check level < 3 (kallewoof)
#13386 3a3eabe SHA256 implementations based on Intel SHA Extensions (sipa)
#11658 9a1ad2c During IBD, when doing pruning, prune 10% extra to avoid pruning again soon after (luke-jr)
#13794 8ce55df chainparams: Update with data from assumed valid chain (MarcoFalke)
#13527 e7ea858 Remove promiscuousmempoolflags (MarcoFalke)
P2P protocol and network code
#12342 eaeaa2d Extend #11583 (“Do not make it trivial for inbound peers to generate log entries”) to include “version handshake timeout” message (clemtaylor)
#12218 9a32114 Move misbehaving logging to net logging category (laanwj)
#10387 5c2aff8 Eventually connect to NODE_NETWORK_LIMITED peers (jonasschnelli)
#9037 a36834f Add test-before-evict discipline to addrman (EthanHeilman)
#12622 e1d6e2a Correct addrman logging (laanwj)
#11962 0a01843 add seed.bitcoin.sprovoost.nl to DNS seeds (Sjors)
#12569 23e7fe8 Increase signal-to-noise ratio in debug.log by adjusting log level when logging failed non-manual connect():s (practicalswift)
#12855 c199869 Minor accumulated cleanups (tjps)
#13153 ef46c99 Add missing newlines to debug logging (laanwj)
#13162 a174702 Don’t incorrectly log that REJECT messages are unknown (jnewbery)
#13151 7f4db9a Serve blocks directly from disk when possible (laanwj)
#13134 70d3541 Add option -enablebip61 to configure sending of BIP61 notifications (laanwj)
#13532 7209fec Log warning when deprecated network name ‘tor’ is used (wodry)
#13615 172f984 Remove unused interrupt from SendMessages (fanquake)
#13417 1e90862 Tighten scope in net_processing (skeees)
#13298 f8d470e Bucketing INV delays (1 bucket) for incoming connections to hide tx time (naumenkogs)
#13672 0d8d6be Modified in_addr6 cast in CConman class to work with msvc (sipsorcery)
#11637 c575260 Remove dead service bits code (MarcoFalke)
#13212 a6f00ce Fixed a race condition when disabling the network (lmanners)
#13656 1211b15 Remove the boost/algorithm/string/predicate.hpp dependency (251Labs)
#13423 f58674a Thread safety annotations in net_processing (skeees)
#13776 7d36237 Add missing verification of IPv6 address in CNetAddr::GetIn6Addr(…) (practicalswift)
#13907 48bf8ff Introduce a maximum size for locators (gmaxwell)
#13951 8a9ffec Hardcoded seeds update pre-0.17 branch (laanwj)
Wallet
#12330 2a30e67 Reduce scope of cs_main and cs_wallet locks in listtransactions (promag)
#12298 a1ffddb Refactor HaveKeys to early return on false result (promag)
#12282 663911e Disallow abandon of conflicted txes (MarcoFalke)
#12333 d405bee Make CWallet::ListCoins atomic (promag)
#12296 8e6f9f4 Only fee-bump non-conflicted/non-confirmed txes (MarcoFalke)
#11866 6bb9c13 Do not un-mark fInMempool on wallet txn if ATMP fails (TheBlueMatt)
#11882 987a809 Disable default fallbackfee on mainnet (jonasschnelli)
#9991 4ca7c1e listreceivedbyaddress Filter Address (NicolasDorier)
#11687 98bc27f External wallet files (ryanofsky)
#12658 af88094 Sanitize some wallet serialization (sipa)
#9680 6acd870 Unify CWalletTx construction (ryanofsky)
#10637 e057589 Coin Selection with Murch’s algorithm (achow101, Xekyo)
#12408 c39dd2e Change output type globals to members (MarcoFalke)
#12694 9552dfb Actually disable BnB when there are preset inputs (achow101)
#11536 cead84b Rename account to label where appropriate (ryanofsky)
#12709 02b7e83 shuffle sendmany recipients ordering (instagibbs)
#12699 c948dc8 Shuffle transaction inputs before signing (instagibbs)
#10762 6d53663 Remove Wallet dependencies from init.cpp (jnewbery)
#12857 821980c Avoid travis lint-include-guards error (ken2812221)
#12702 dab0d68 importprivkey: hint about importmulti (kallewoof)
#12836 9abdb7c Make WalletInitInterface and DummyWalletInit private, fix nullptr deref (promag)
#12785 215158a Initialize m_last_block_processed to nullptr (practicalswift)
#12932 8d651ae Remove redundant lambda function arg in handleTransactionChanged (laanwj)
#12749 a84b056 feebumper: discard change outputs below discard rate (instagibbs)
#12892 9b3370d introduce ‘label’ API for wallet (jnewbery)
#12925 6d3de17 Logprint the start of a rescan (jonasschnelli)
#12888 39439e5 debug log number of unknown wallet records on load (instagibbs)
#12977 434150a Refactor g_wallet_init_interface to const reference (promag)
#13017 65d7083 Add wallets management functions (promag)
#12953 d1d54ae Deprecate accounts (jnewbery)
#12909 476cb35 Make fee settings to be non-static members (MarcoFalke)
#13002 487dcbe Do not treat bare multisig outputs as IsMine unless watched (sipa)
#13028 783bb64 Make vpwallets usage thread safe (promag)
#12507 2afdc29 Interrupt rescan on shutdown request (promag)
#12729 979150b Get rid of ambiguous OutputType::NONE value (ryanofsky)
#13079 5778d44 Fix rescanblockchain rpc to properly report progress (Empact)
#12560 e03c0db Upgrade path for non-HD wallets to HD (achow101)
#13161 7cc1bd3 Reset BerkeleyDB handle after connection fails (real-or-random)
#13081 0dec5b5 Add compile time checking for cs_wallet runtime locking assertions (practicalswift)
#13127 19a3a9e Add Clang thread safety annotations for variables guarded by cs_db (practicalswift)
#10740 4cfe17c loadwallet RPC - load wallet at runtime (jnewbery)
#12924 6738813 Fix hdmaster-key / seed-key confusion (scripted diff) (jnewbery)
#13297 d82c5d1 Fix incorrect comment for DeriveNewSeed (jnewbery)
#13063 6378eef Use shared pointer to retain wallet instance (promag)
#13142 56fe3dc Separate IsMine from solvability (sipa)
#13194 fd96d54 Remove template matching and pseudo opcodes (sipa)
#13252 c4cc8d9 Refactor ReserveKeyFromKeyPool for safety (Empact)
#13058 343d4e4 createwallet RPC - create new wallet at runtime (jnewbery)
#13351 2140f6c Prevent segfault when sending to unspendable witness (MarcoFalke)
#13060 3f0f394 Remove getlabeladdress RPC (jnewbery)
#13111 000abbb Add unloadwallet RPC (promag)
#13160 868cf43 Unlock spent outputs (promag)
#13498 f54f373 Fixups from account API deprecation (jnewbery)
#13491 61a044a Improve handling of INVALID in IsMine (sipa)
#13425 028b0d9 Moving final scriptSig construction from CombineSignatures to ProduceSignature (PSBT signer logic) (achow101)
#13564 88a15eb loadwallet shouldn’t create new wallets (jnewbery)
#12944 619cd29 ScanforWalletTransactions should mark input txns as dirty (instagibbs)
#13630 d6b2235 Drop unused pindexRet arg to CMerkleTx::GetDepthInMainChain (Empact)
#13566 ad552a5 Fix get balance (jnewbery)
#13500 4a3e8c5 Decouple wallet version from client version (achow101)
#13712 aba2e66 Fix non-determinism in ParseHDKeypath(…). Avoid using an uninitialized variable in path calculation (practicalswift)
#9662 6b6e854 Add createwallet “disableprivatekeys” option: a sane mode for watchonly-wallets (jonasschnelli)
#13683 e8c7434 Introduce assertion to document the assumption that cache and cache_used are always set in tandem (practicalswift)
#12257 5f7575e Use destination groups instead of coins in coin select (kallewoof)
#13773 89a116d Fix accidental use of the comma operator (practicalswift)
#13805 c88529a Correctly limit output group size (sdaftuar)
#12992 26f59f5 Add wallet name to log messages (PierreRochard)
#13667 b81a8a5 Fix backupwallet for multiwallets (domob1812)
#13657 51c693d assert to ensure accuracy of CMerkleTx::GetBlocksToMaturity (Empact)
#13812 9d86aad sum ancestors rather than taking max in output groups (kallewoof)
#13876 8eb9870 Catch filesystem_error and raise InitError (MarcoFalke)
#13808 13d51a2 shuffle coins before grouping, where warranted (kallewoof)
#13666 2115cba Always create signatures with Low R values (achow101)
#13917 0333914 Additional safety checks in PSBT signer (sipa)
#13968 65e7a8b couple of walletcreatefundedpsbt fixes (instagibbs)
#14055 2307a6e fix walletcreatefundedpsbt deriv paths, add test (instagibbs)
RPC and other APIs
#12336 3843780 Remove deprecated rpc options (jnewbery)
#12193 5dc00f6 Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d) (MarcoFalke)
#12409 0cc45ed Reject deprecated reserveChangeKey in fundrawtransaction (MarcoFalke)
#10583 8a98dfe Split part of validateaddress into getaddressinfo (achow101)
#10579 ffc6e48 Split signrawtransaction into wallet and non-wallet RPC command (achow101)
#12494 e4ffcac Declare CMutableTransaction a struct in rawtransaction.h (Empact)
#12503 0e26591 createmultisig no longer takes addresses (instagibbs)
#12083 228b086 Improve getchaintxstats test coverage (promag)
#12479 cd5e438 Add child transactions to getrawmempool verbose output (conscott)
#11872 702e8b7 createrawtransaction: Accept sorted outputs (MarcoFalke)
#12700 ebdf84c Document RPC method aliasing (ryanofsky)
#12727 8ee5c7b Remove unreachable help conditions in rpcwallet.cpp (lutangar)
#12778 b648974 Add username and ip logging for RPC method requests (GabrielDav)
#12717 ac898b6 rest: Handle utxo retrieval when ignoring the mempool (romanz)
#12787 cd99e5b Adjust ifdef to avoid unreachable code (practicalswift)
#11742 18815b4 Add testmempoolaccept (MarcoFalke)
#12942 fefb817 Drop redundant testing of signrawtransaction prevtxs args (Empact)
#11200 5f2a399 Allow for aborting rescans in the GUI (achow101)
#12791 3a8a4dc Expose a transaction’s weight via RPC (TheBlueMatt)
#12436 6e67754 Adds a functional test to validate the transaction version number in the RPC output (251Labs)
#12240 6f8b345 Introduced a new fees structure that aggregates all sub-field fee types denominated in BTC (mryandao)
#12321 eac067a p2wsh and p2sh-p2wsh address in decodescript (fivepiece)
#13090 17266a1 Remove Safe mode (achow101, laanwj)
#12639 7eb7076 Reduce cs_main lock in listunspent (promag)
#10267 7b966d9 New -includeconf argument for including external configuration files (kallewoof)
#10757 b9551d3 Introduce getblockstats to plot things (jtimon)
#13288 a589f53 Remove the need to include rpc/blockchain.cpp in order to put GetDifficulty under test (Empact)
#13394 e1f8dce cli: Ignore libevent warnings (theuni)
#13439 3f398d7 Avoid “duplicate” return value for invalid submitblock (TheBlueMatt)
#13570 a247594 Add new “getzmqnotifications” method (domob1812)
#13072 b25a4c2 Update createmultisig RPC to support segwit (ajtowns)
#12196 8fceae0 Add scantxoutset RPC method (jonasschnelli)
#13557 b654723 BIP 174 PSBT Serializations and RPCs (achow101)
#13697 f030410 Support output descriptors in scantxoutset (sipa)
#13927 bced8ea Use pushKV in some new PSBT RPCs (domob1812)
#13918 a9c56b6 Replace median fee rate with feerate percentiles in getblockstats (marcinja)
#13721 9f23c16 Bugfixes for BIP 174 combining and deserialization (achow101)
#13960 517010e Fix PSBT deserialization of 0-input transactions (achow101)
GUI
#12416 c997f88 Fix Windows build errors introduced in #10498 (practicalswift)
#11733 e782099 Remove redundant locks (practicalswift)
#12426 bfa3911 Initialize members in WalletModel (MarcoFalke)
#12489 e117cfe Bugfix: respect user defined configuration file (-conf) in QT settings (jonasschnelli)
#12421 be263fa navigate to transaction history page after send (Sjors)
#12580 ce56fdd Show a transaction’s virtual size in its details dialog (dooglus)
#12501 c8ea91a Improved “custom fee” explanation in tooltip (randolf)
#12616 cff95a6 Set modal overlay hide button as default (promag)
#12620 8a43bdc Remove TransactionTableModel::TxIDRole (promag)
#12080 56cc022 Add support to search the address book (promag)
#12621 2bac3e4 Avoid querying unnecessary model data when filtering transactions (promag)
#12721 e476826 remove “new” button during receive-mode in addressbook (jonasschnelli)
#12723 310dc61 Qt5: Warning users about invalid-BIP21 URI bitcoin:// (krab)
#12610 25cf18f Multiwallet for the GUI (jonasschnelli)
#12779 f4353da Remove unused method setupAmountWidget(…) (practicalswift)
#12795 68484d6 do not truncate .dat extension for wallets in gui (instagibbs)
#12870 1d54004 make clean removes src/qt/moc_ files (Sjors)
#13055 bdda14d Don’t log to console by default (laanwj)
#13141 57c57df fixes broken link on readme (marcoagner)
#12928 ef006d9 Initialize non-static class members that were previously neither initialized where defined nor in constructor (practicalswift)
#13158 81c533c Improve sendcoinsdialog readability (marcoagner)
#11491 40c34a0 Add proxy icon in statusbar (mess110)
#13264 2a7c53b Satoshi unit (GreatSock)
#13097 e545503 Support wallets loaded dynamically (promag)
#13284 f8be434 fix visual “overflow” of amount input (brandonrninefive)
#13275 a315b79 use [default wallet] as name for wallet with no name (jonasschnelli)
#13273 3fd0c23 Qt/Bugfix: fix handling default wallet with no name (jonasschnelli)
#13341 25d2df2 Stop translating command line options (laanwj)
#13043 6e249e4 OptionsDialog: add prune setting (Sjors)
#13506 6579d80 load wallet in UI after possible init aborts (jonasschnelli)
#13458 dc53f7f Drop qt4 support (laanwj)
#13528 b877c39 Move BitcoinGUI initializers to class, fix initializer order warning (laanwj)
#13536 baf3a3a coincontrol: Remove unused qt4 workaround (MarcoFalke)
#13537 10ffca7 Peer table: Visualize inbound/outbound state for every row (wodry)
#13791 2c14c1f Reject dialogs if key escape is pressed (promag)
Build system
#12371 c9ca4f6 Add gitian PGP key: akx20000 (ghost)
#11966 f4f4f51 clientversion: Use full commit hash for commit-based version descriptions (luke-jr)
#12417 ae0fbf0 Upgrade mac_alias to 2.0.7 (droark)
#12444 1f055ef gitian: Bump descriptors for (0.)17 (theuni)
#12402 59e032b expat 2.2.5, ccache 3.4.1, miniupnpc 2.0.20180203 (fanquake)
#12029 daa84b3 Add a makefile target for Doxygen documentation (Ov3rlo4d)
#12466 6645eaf Only use D_DARWIN_C_SOURCE when building miniupnpc on darwin (fanquake)
#11986 765a3eb zeromq 4.2.3 (fanquake)
#12373 f13d756 Add build support for profiling (murrayn)
#12631 a312e20 gitian: Alphabetize signing keys & add kallewoof key (kallewoof)
#12607 29fad97 Remove ccache (fanquake)
#12625 c4219ff biplist 1.0.3 (fanquake)
#12666 05042d3 configure: UniValue 1.0.4 is required for pushKV(, bool) (luke-jr)
#12678 6324c68 Fix a few compilation issues with Clang 7 and -Werror (vasild)
#12692 de6bdfd Add configure options for various -fsanitize flags (eklitzke)
#12901 7e23972 Show enabled sanitizers in configure output (practicalswift)
#12899 3076993 macOS: Prevent Xcode 9.3 build warnings (AkioNak)
#12715 8fd6243 Add ‘make clean’ rule (hkjn)
#13133 a024a18 Remove python2 from configure.ac (ken2812221)
#13005 cb088b1 Make –enable-debug to pick better options (practicalswift)
#13254 092b366 Remove improper qt/moc_* cleaning glob from the general Makefile (Empact)
#13306 f5a7733 split warnings out of CXXFLAGS (theuni)
#13385 7c7508c Guard against accidental introduction of new Boost dependencies (practicalswift)
#13041 5779dc4 Add linter checking for accidental introduction of locale dependence (practicalswift)
#13408 70a03c6 crypto: cleanup sha256 build (theuni)
#13435 cf7ca60 When build fails due to lib missing, indicate which one (Empact)
#13445 8eb76f3 Reset default -g -O2 flags when enable debug (ken2812221)
#13465 81069a7 Avoid concurrency issue when make multiple target (ken2812221)
#13454 45c00f8 Make sure LC_ALL=C is set in all shell scripts (practicalswift)
#13480 31145a3 Avoid copies in range-for loops and add a warning to detect them (theuni)
#13486 66e1a08 Move rpc/util.cpp from libbitcoin-util to libbitcoin-server (ken2812221)
#13580 40334c7 Detect if char equals int8_t (ken2812221)
#12788 287e4ed Tune wildcards for LIBSECP256K1 target (kallewoof)
#13611 b55f0c3 bugfix: Use __cpuid_count for gnu C to avoid gitian build fail (ken2812221)
#12971 a6d14b1 Upgrade Qt to 5.9.6 (TheCharlatan)
#13543 6c6a300 Add RISC-V support (laanwj)
#13177 dcb154e GCC-7 and glibc-2.27 back compat code (ken2812221)
#13659 90b1c7e add missing leveldb defines (theuni)
#13368 c0f1569 Update gitian-build.sh for docker (achow101)
#13171 19d8ca5 Change gitian-descriptors to use bionic instead (ken2812221)
#13604 75bea05 Add depends 32-bit arm support for bitcoin-qt (TheCharlatan)
#13623 9cdb19f Migrate gitian-build.sh to python (ken2812221)
#13689 8c36432 disable Werror when building zmq (greenaddress)
#13617 cf7f9ae release: Require macos 10.10+ (fanquake)
#13750 c883653 use MacOS friendly sed syntax in qt.mk (Sjors)
#13095 415f2bf update ax_boost_chrono/unit_test_framework (fanquake)
#13732 e8ffec6 Fix Qt’s rcc determinism (Fuzzbawls)
#13782 8284f1d Fix osslsigncode compile issue in gitian-build (ken2812221)
#13696 2ab7208 Add aarch64 qt depends support for cross compiling bitcoin-qt (TheCharlatan)
#13705 b413ba0 Add format string linter (practicalswift)
#14000 48c8459 fix qt determinism (theuni)
#14018 3e4829a Bugfix: NSIS: Exclude Makefile* from docs (luke-jr)
#12906 048ac83 Avoid interface keyword to fix windows gitian build (ryanofsky)
#13314 a9b6957 Fix FreeBSD build by including utilstrencodings.h (laanwj)
Tests and QA
#12252 8d57319 Require all tests to follow naming convention (ajtowns)
#12295 935eb8d Enable flake8 warnings for all currently non-violated rules (practicalswift)
#11858 b4d8549 Prepare tests for Windows (MarcoFalke)
#11771 2dbc4a4 Change invalidtxrequest to use BitcoinTestFramework (jnewbery)
#12200 d09968f Bind functional test nodes to 127.0.0.1 (Sjors)
#12425 26dc2da Add some script tests (richardkiss)
#12455 23481fa Fix bip68 sequence test to reflect updated rpc error message (Empact)
#12477 acd1e61 Plug memory leaks and stack-use-after-scope (MarcoFalke)
#12443 07090c5 Move common args to bitcoin.conf (MarcoFalke)
#12570 39dcac2 Add test cases for HexStr (std::reverse_iterator and corner cases) (kostaz)
#12582 6012f1c Fix ListCoins test failure due to unset g_wallet_allow_fallback_fee (ryanofsky)
#12516 7f99964 Avoid unintentional unsigned integer wraparounds in tests (practicalswift)
#12512 955fd23 Don’t test against the mempool min fee information in mempool_limit.py (Empact)
#12600 29088b1 Add a test for large tx output scripts with segwit input (richardkiss)
#12627 791c3ea Fix some tests to work on native windows (MarcoFalke)
#12405 0f58d7f travis: Full clone for git subtree check (MarcoFalke)
#11772 0630974 Change invalidblockrequest to use BitcoinTestFramework (jnewbery)
#12681 1846296 Fix ComputeTimeSmart test failure with -DDEBUG_LOCKORDER (ryanofsky)
#12682 9f04c8e travis: Clone depth 1 unless $check_doc (MarcoFalke)
#12710 00d1680 Append scripts to new test_list array to fix bad assignment (jeffrade)
#12720 872c921 Avoiding ‘file’ function name from python2 (jeffrade)
#12728 4ba3d4f rename TestNode to TestP2PConn in tests (jnewbery)
#12746 2405ce1 Remove unused argument max_invalid from check_estimates(…) (practicalswift)
#12718 185d484 Require exact match in assert_start_raises_init_eror (jnewbery, MarcoFalke)
#12076 6d36f59 Use node.datadir instead of tmpdir in test framework (MarcoFalke)
#12772 b43aba8 ci: Bump travis timeout for make check to 50m (jnewbery)
#12806 18606eb Fix function names in feature_blocksdir (MarcoFalke)
#12811 0d8fc8d Make summary row bold-red if any test failed and show failed tests at end of table (laanwj)
#12790 490644d Use blockmaxweight where tests previously had blockmaxsize (conscott)
#11773 f0f9732 Change feature_block.py to use BitcoinTestFramework (jnewbery)
#12839 40f4baf Remove travis checkout depth (laanwj)
#11817 2a09a78 Change feature_csv_activation.py to use BitcoinTestFramework (jnewbery)
#12284 fa5825d Remove assigned but never used local variables. Enable Travis checking for unused local variables (practicalswift)
#12719 9beded5 Add note about test suite naming convention in developer-notes.md (practicalswift)
#12861 c564424 Stop feature_block.py from blowing up memory (jnewbery)
#12851 648252e travis: Run verify-commits only on cron jobs (MarcoFalke)
#12853 2106c4c Match full plain text by default (MarcoFalke)
#11818 9a2db3b I accidentally (deliberately) killed it (the ComparisonTestFramework) (jnewbery)
#12766 69310a3 Tidy up REST interface functional tests (romanz)
#12849 83c7533 Add logging in loops in p2p_sendhears.py (ccdle12)
#12895 d6f10b2 Add note about test suite name uniqueness requirement to developer notes (practicalswift)
#12856 27278df Add Metaclass for BitcoinTestFramework (WillAyd)
#12918 6fc5a05 Assert on correct variable (kallewoof)
#11878 a04440f Add Travis check for duplicate includes (practicalswift)
#12917 cf8073f Windows fixups for functional tests (MarcoFalke)
#12926 dd1ca9e Run unit tests in parallel (sipa)
#12920 b1fdfc1 Fix sign for expected values (kallewoof)
#12947 979f598 Wallet hd functional test speedup and clarification (instagibbs)
#12993 0d69921 Remove compatibility code not needed now when we’re on Python 3 (practicalswift)
#12996 6a278e0 Remove redundant bytes(…) calls (practicalswift)
#12949 6b46288 Avoid copies of CTransaction (MarcoFalke)
#13007 0d12570 Fix dangling wallet pointer in vpwallets (promag)
#13048 cac6d11 Fix feature_block flakiness (jnewbery)
#12510 d5b2e98 Add rpc_bind test to default-run tests (laanwj)
#13022 896a9d0 Attach node index to test_node AssertionError and print messages (jamesob)
#13024 018c7e5 Add rpcauth pair that generated by rpcauth.py (ken2812221)
#13013 a0079d4 bench: Amend mempool_eviction test for witness txs (MarcoFalke)
#13051 e074097 Normalize executable location (MarcoFalke)
#13056 106d929 Make rpcauth.py testable and add unit tests (nixbox)
#13073 a785bc3 add rpcauth-test to AC_CONFIG_LINKS to fix out-of-tree make check (laanwj)
#12830 25ad2f7 Clarify address book error messages, add tests (jamesob)
#13082 24106a8 don’t test against min relay fee information in mining_prioritisetransaction.py (kristapsk)
#13003 8d045a0 Add test for orphan handling (MarcoFalke)
#13105 9e9b48d Add –failfast option to functional test runner (jamesob)
#13130 3186ad4 Fix race in rpc_deprecated.py (jnewbery)
#13136 baf6b4e Fix flake8 warnings in several wallet functional tests (jnewbery)
#13094 bf9b03d Add test for 64-bit Windows PE, modify 32-bit test results (ken2812221)
#13183 9458b05 travis: New travis job for check_docs steps (glaksmono)
#12265 1834d4d fundrawtransaction: lock watch-only shared address (kallewoof)
#13188 4a50ec0 Remove unused option –srcdir (MarcoFalke)
#12755 612ba35 Better stderr testing (jnewbery)
#13198 196c5a9 Avoid printing to console during cache creation (sdaftuar)
#13075 cb9bbf7 Remove ‘account’ API from wallet functional tests (jnewbery)
#13221 ffa86af travis: Rename the build stage check_doc to lint (practicalswift)
#13205 3cbd25f Remove spurious error log in p2p_segwit.py (jnewbery)
#13291 536120e Don’t include torcontrol.cpp into the test file (Empact)
#13281 2ac6315 Move linters to test/lint, add readme (MarcoFalke)
#13215 f8a29ca travis: Build tests on ubuntu 18.04 with docker (ken2812221)
#13349 24f7011 bench: Don’t return a bool from main (laanwj)
#13347 87a9d03 travis: Skip cache for lint stage (MarcoFalke)
#13355 0b1c0c4 Fix “gmake check” under OpenBSD 6.3 (probably *BSD): Avoid using GNU grep specific regexp handling (practicalswift)
#13353 d4f6dac Fixup setting of PATH env var (MarcoFalke)
#13352 e24bf1c Avoid checking reject code for now (MarcoFalke)
#13383 2722a1f bench: Use non-throwing parsedouble(…) instead of throwing boost::lexical_cast<double>(…) (practicalswift)
#13367 264efdc Increase includeconf test coverage (MarcoFalke)
#13404 3d3d8ae speed up of tx_validationcache_tests by reusing of CTransaction (lucash-dev)
#13421 531a033 Remove portseed_offset from test runner (MarcoFalke)
#13440 5315660 Log as utf-8 (MarcoFalke)
#13066 fa4b906 Migrate verify-commits script to python, run in travis (ken2812221)
#13447 4b1edd3 travis: Increase travis_wait time while verifying commits (ken2812221)
#13350 f532d52 Add logging to provide anchor points when debugging p2p_sendheaders (lmanners)
#13406 4382f19 travis: Change mac goal to all deploy (ken2812221)
#13457 b222138 Drop variadic macro (MarcoFalke)
#13512 3a45493 mininode: Expose connection state through is_connected (MarcoFalke)
#13496 9ab4c2a Harden lint-filenames.sh (wodry)
#13219 08516e0 bench: Add block assemble benchmark (MarcoFalke)
#13530 b1dc39d bench: Add missing pow.h header (laanwj)
#12686 2643fa5 Add -ftrapv to CFLAGS and CXXFLAGS when –enable-debug is used. Enable -ftrapv in Travis (practicalswift)
#12882 d96bdd7 Make test_bitcoin pass under ThreadSanitzer (clang). Fix lock-order-inversion (potential deadlock) (practicalswift)
#13535 2328039 wallet_basic: Specify minimum required amount for listunspent (MarcoFalke)
#13551 c93c360 Fix incorrect documentation for test case cuckoocache_hit_rate_ok (practicalswift)
#13563 b330f3f bench: Simplify coinselection (promag)
#13517 a6ed99a Remove need to handle the network thread in tests (MarcoFalke)
#13522 686e97a Fix p2p_sendheaders race (jnewbery)
#13467 3dc2dcf Make p2p_segwit easier to debug (jnewbery)
#13598 0212187 bench: Fix incorrect behaviour in prevector.cpp (AkioNak)
#13565 b05ded1 Fix AreInputsStandard test to reference the proper scriptPubKey (Empact)
#13145 d3dae3d Use common getPath method to create temp directory in tests (winder)
#13645 2ea7eb6 skip rpc_zmq functional test as necessary (jamesob)
#13626 8f1106d Fix some TODOs in p2p_segwit (MarcoFalke)
#13138 8803c91 Remove accounts from wallet_importprunedfunds.py (jnewbery)
#13663 cbc9b50 Avoid read/write to default datadir (MarcoFalke)
#13682 f8a32a3 bench: Remove unused variable (practicalswift)
#13638 6fcdb5e Use MAX_SCRIPT_ELEMENT_SIZE from script.py (domob1812)
#13687 9d26b69 travis: Check that ~/.bitcoin is never created (MarcoFalke)
#13715 e1260a7 fixes mininode’s P2PConnection sending messages on closing transport (marcoagner)
#13729 aa9429a travis: Avoid unnecessarily setting env variables on the lint build (Empact)
#13747 ab28b5b Skip P2PConnection’s is_closing() check when not available (domob1812)
#13650 7a9bca6 travis: Don’t store debug info if –enable-debug is set (ken2812221)
#13711 f98d1e0 bench: Add benchmark for unserialize prevector (AkioNak)
#13771 365384f travis: Retry to fetch docker image (MarcoFalke)
#13806 4d550ff Fix bench/block_assemble assert failure (jamesob)
#13779 d25079a travis: Improve readability of travis.yml and log outputs (scravy)
#13822 0fb9c87 bench: Make coinselection output groups pass eligibility filter (achow101)
#13247 e83d82a Add tests to SingleThreadedSchedulerClient() and document the memory model (skeees)
#13811 660abc1 travis: Run bench_bitcoin once (MarcoFalke)
#13837 990e182 Extract rpc_timewait as test param (MarcoFalke)
#13851 9c4324d fix locale for lint-shell (scravy)
#13823 489b51b quote path in authproxy for external multiwallets (MarcoFalke)
#13849 2b67354 travis: Use only travis jobs: instead of mix of jobs+matrix (scravy)
#13859 2384323 Add emojis to test_runner path and wallet filename (MarcoFalke)
#13916 8ac7125 wait_for_verack by default (MarcoFalke)
#13669 f66e1c7 Cleanup create_transaction implementations (conscott)
#13924 09ada21 Simplify comparison in rpc_blockchain.py (domob1812)
#13913 a08533c Remove redundant checkmempool/checkblockindex extra_args (MarcoFalke)
#13915 a04888a Add test for max number of entries in locator (MarcoFalke)
#13867 1b04b55 Make extended tests pass on native Windows (MarcoFalke)
#13944 0df7a6c Port usage of deprecated optparse module to argparse module (Kvaciral)
#13928 b8eb0df blocktools enforce named args for amount (MarcoFalke)
#13054 bffb35f Enable automatic detection of undefined names in Python tests scripts. Remove wildcard imports (practicalswift)
#14069 cf3d7f9 Use assert not BOOST_CHECK_* from multithreaded tests (skeees)
#14071 fab0fbe Stop txindex thread before calling destructor (MarcoFalke)
Miscellaneous
#11909 8897135 contrib: Replace developer keys with list of pgp fingerprints (MarcoFalke)
#12394 fe53d5f gitian-builder.sh: fix –setup doc, since lxc is default (Sjors)
#12468 294a766 Add missing newline in init.cpp log message (Aesti)
#12308 dcfe218 contrib: Add support for out-of-tree builds in gen-manpages.sh (laanwj)
#12451 aae64a2 Bump leveldb subtree (MarcoFalke)
#12527 d77b4a7 gitian-build.sh: fix signProg being recognized as two parameters (ken2812221)
#12588 d74b01d utils: Remove deprecated pyzmq call from python zmq example (kosciej)
#10271 bc67982 Use std::thread::hardware_concurrency, instead of Boost, to determine available cores (fanquake)
#12097 14475e2 scripts: Lint-whitespace: use perl instead of grep -p (Sjors)
#12098 17c44b2 scripts: Lint-whitespace: add param to check last n commits (Sjors)
#11900 842f61a script: Simplify checkminimalpush checks, add safety assert (instagibbs)
#12567 bb98aec util: Print timestamp strings in logs using iso 8601 formatting (practicalswift)
#12572 d8d9162 script: Lint-whitespace: find errors more easily (AkioNak)
#10694 ae5bcc7 Remove redundant code in MutateTxSign(CMutableTransaction&, const std::string&) (practicalswift)
#12659 3d16f58 Improve Fatal LevelDB Log Messages (eklitzke)
#12643 0f0229d util: Remove unused sync_chain (MarcoFalke)
#12102 7fb8fb4 Apply hardening measures in bitcoind systemd service file (Flowdalic)
#12652 55f490a bitcoin-cli: Provide a better error message when bitcoind is not running (practicalswift)
#12630 c290508 Provide useful error message if datadir is not writable (murrayn)
#11881 624bee9 Remove Python2 support (jnewbery)
#12821 082e26c contrib: Remove unused import string (MarcoFalke)
#12829 252c1b0 Python3 fixup (jnewbery)
#12822 ff48f62 Revert 7deba93bdc76616011a9f493cbc203d60084416f and fix expired-key-sigs properly (TheBlueMatt)
#12820 5e53b80 contrib: Fix check-doc script regexes (MarcoFalke)
#12713 4490871 Track negated options in the option parser (eklitzke)
#12708 b2e5fe8 Make verify-commits.sh test that merges are clean (sipa)
#12891 3190785 logging: Add lint-logs.sh to check for newline termination (jnewbery)
#12923 a7cbe38 util: Pass pthread_self() to pthread_setschedparam instead of 0 (laanwj)
#12871 fb17fae Add shell script linting: Check for shellcheck warnings in shell scripts (practicalswift)
#12970 5df84de logging: Bypass timestamp formatting when not logging (theuni)
#12987 fe8fa22 tests/tools: Enable additional Python flake8 rules for automatic linting via Travis (practicalswift)
#12972 0782508 Add python3 script shebang lint (ken2812221)
#13004 58bbc55 Print to console by default when not run with -daemon (practicalswift)
#13039 8b4081a Add logging and error handling for file syncing (laanwj)
#13020 4741ca5 Consistently log CValidationState on call failure (Empact)
#13031 826acc9 Fix for utiltime to compile with msvc (sipsorcery)
#13119 81743b5 Remove script to clean up datadirs (MarcoFalke)
#12954 5a66642 util: Refactor logging code into a global object (jimpo)
#12769 35eb9d6 Add systemd service to bitcoind in debian package (ghost)
#13146 0bc980b rpcauth: Make it possible to provide a custom password (laanwj)
#13148 b62b437 logging: Fix potential use-after-free in logprintstr(…) (practicalswift)
#13214 0612d96 Enable Travis checking for two Python linting rules we are currently not violating (practicalswift)
#13197 6826989 util: Warn about ignored recursive -includeconf calls (kallewoof)
#13176 d9ebb63 Improve CRollingBloomFilter performance: replace modulus with FastMod (martinus)
#13228 d792e47 Add script to detect circular dependencies between source modules (sipa)
#13320 e08c130 Ensure gitian-build.sh uses bash (jhfrontz)
#13301 e4082d5 lint: Add linter to error on #include <*.cpp> (Empact)
#13374 56f6936 utils and libraries: checking for bitcoin address in translations (kaplanmaxe)
#13230 7c32b41 Simplify include analysis by enforcing the developer guide’s include syntax (practicalswift)
#13450 32bf4c6 Add linter: Enforce the source code file naming convention described in the developer notes (practicalswift)
#13479 fa2ea37 contrib: Fix cve-2018-12356 by hardening the regex (loganaden)
#13448 a90ca40 Add linter: Make sure we explicitly open all text files using UTF-8 encoding in Python (practicalswift)
#13494 d67eff8 Follow-up to #13454: Fix broken build by exporting LC_ALL=C (practicalswift)
#13510 03f3925 Scripts and tools: Obsolete #!/bin/bash shebang (DesWurstes)
#13577 c9eb8d1 logging: Avoid nstart may be used uninitialized in appinitmain warning (mruddy)
#13603 453ae5e bitcoin-tx: Stricter check for valid integers (domob1812)
#13118 c05c93c RPCAuth Detection in Logs (Linrono)
#13647 4027ec1 Scripts and tools: Fix BIND_NOW check in security-check.py (conradoplg)
#13692 f5d166a contrib: Clone core repo in gitian-build (MarcoFalke)
#13699 4c6d1b9 contrib: Correct version check (kallewoof)
#13695 dcc0cff lint: Add linter for circular dependencies (Empact)
#13733 0d1ebf4 utils: Refactor argsmanager a little (AtsukiTak)
#13714 29b4ee6 contrib: Add lxc network setup for bionic host (ken2812221)
#13764 f8685f4 contrib: Fix test-security-check fail in ubuntu 18.04 (ken2812221)
#13809 77168f7 contrib: Remove debian and rpm subfolder (MarcoFalke)
#13799 230652c Ignore unknown config file options; warn instead of error (sipa)
#13894 df9f712 shutdown: Stop threads before resetting ptrs (MarcoFalke)
#13925 71dec5c Merge leveldb subtree (MarcoFalke)
#13939 ef86f26 lint: Make format string linter understand basic template parameter syntax (practicalswift)
#14105 eb202ea util: Report parse errors in configuration file (laanwj)
#12604 9903537 Add DynamicMemoryUsage() to CDBWrapper to estimate LevelDB memory use (eklitzke)
#12495 047865e Increase LevelDB max_open_files (eklitzke)
#12784 e80716d Fix bug in memory usage calculation (unintended integer division) (practicalswift)
#12618 becd8dd Set SCHED_BATCH priority on the loadblk thread (eklitzke)
#12854 5ca1509 Add P2P, Network, and Qt categories to the desktop icon (luke-jr)
#11862 4366f61 Network specific conf sections (ajtowns)
#13441 4a7e64f Prevent shared conf files from failing with different available options in different binaries (achow101)
#13471 5eca4e8 For AVX2 code, also check for AVX, XSAVE, and OS support (sipa)
#13503 c655b2c Document FreeBSD quirk. Fix FreeBSD build: Use std::min<int>(…) to allow for compilation under certain FreeBSD versions (practicalswift)
#13725 07ce278 Fix bitcoin-cli –version (Empact)
Documentation
#12306 216f9a4 Improvements to UNIX documentation (axvr)
#12309 895fbd7 Explain how to update chainTxData in release process (laanwj)
#12317 85123be Document method for reviewers to verify chainTxData (jnewbery)
#12331 d32528e Properly alphabetize output of CLI –help option (murrayn)
#12322 c345148 Remove step making cloned repository world-writable for Windows build (murrayn)
#12354 b264528 add gpg key for fivepiece (fivepiece)
#11761 89005dd initial QT documentation (Sjors)
#12232 fdc2188 Improve “Turn Windows Features On or Off” step (MCFX2)
#12487 4528f74 init: Remove translation for -blockmaxsize option help (laanwj)
#12546 a4a5fc7 Minor improvements to Compatibility Notes (randolf)
#12434 21e2670 dev-notes: Members should be initialized (MarcoFalke)
#12452 71f56da clarified systemd installation instructions in init.md for Ubuntu users (DaveFromBinary)
#12615 1f93491 allow for SIGNER containing spaces (ken2812221)
#12603 85424d7 PeerLogicValidation interface (jamesob)
#12581 12ac2f0 Mention configure without wallet in FreeBSD instructions (dbolser)
#12619 8a709fb Give hint about gitian not able to download (kallewoof)
#12668 de2fcaa do update before fetching packages in WSL build guide (nvercamm)
#12586 e7721e6 Update osx brew install instruction (fanquake)
#12760 7466a26 Improve documentation on standard communication channels (jimpo)
#12797 0415b1e init: Fix help message for checkblockindex (MarcoFalke)
#12800 2d97611 Add note about our preference for scoped enumerations (“enum class”) (practicalswift)
#12798 174d016 Refer to witness reserved value as spec. in the BIP (MarcoFalke)
#12759 d3908e2 Improve formatting of developer notes (eklitzke)
#12877 2b54155 Use bitcoind in Tor documentation (knoxcard)
#12896 b15485e Fix conflicting statements about initialization in developer notes (practicalswift)
#12850 319991d add qrencode to brew install instructions (buddilla)
#12007 cd8e45b Clarify the meaning of fee delta not being a fee rate in prioritisetransaction RPC (honzik666)
#12927 06ead15 fixed link, replaced QT with Qt (trulex)
#12852 ebd786b devtools: Setup ots git integration (MarcoFalke)
#12933 3cf76c2 Refine header include policy (MarcoFalke)
#12951 6df0c6c Fix comment in FindForkInGlobalIndex (jamesob)
#12982 a63b4e3 Fix inconsistent namespace formatting guidelines (ryanofsky)
#13026 9b3a67e Fix include comment in src/interfaces/wallet.h (promag)
#13012 d1e3c5e Add comments for chainparams.h, validation.cpp (jamesob)
#13064 569e381 List support for BIP173 in bips.md (sipa)
#12997 646b7f6 build-windows: Switch to Artful, since Zesty is EOL (MarcoFalke)
#12384 c5f7efe Add version footnote to tor.md (Willtech)
#13165 627c376 Mention good first issue list in CONTRIBUTING.md (fanquake)
#13295 fb77310 Update OpenBSD build instructions for OpenBSD 6.3 (practicalswift)
#13340 3a8e3f4 remove leftover check-doc documentation (fanquake)
#13346 60f0358 update bitcoin-dot-org links in release-process.md (fanquake)
#13372 f014933 split FreeBSD build instructions out of build-unix.md (steverusso)
#13366 861de3b Rename “OS X” to the newer “macOS” convention (giulio92)
#13369 f8bcef3 update transifex doc link (mess110)
#13312 b22115d Add a note about the source code filename naming convention (practicalswift)
#13460 1939536 Remove note to install all boost dev packages (MarcoFalke)
#13476 9501938 Fix incorrect shell quoting in FreeBSD build instructions (murrayn)
#13402 43fa355 Document validationinterace callback blocking deadlock potential (TheBlueMatt)
#13488 d6cf4bd Improve readability of “Squashing commits” (wodry)
#13531 ee02deb Clarify that mempool txiter is const_iterator (MarcoFalke)
#13418 01f9098 More precise explanation of parameter onlynet (wodry)
#13592 1756cb4 Modify policy to not translate command-line help (ken2812221)
#13588 b77c38e Improve doc of options addnode, connect, seednode (wodry)
#13614 17e9106 Update command line help for -printtoconsole and -debuglogfile (satwo, fanquake)
#13605 8cc048e corrected text to reflect new(er) process of specifying fingerprints (jhfrontz)
#13481 b641f60 Rewrite some validation docs as lock annotations (MarcoFalke)
#13680 30640f8 Remove outdated comment about miner ignoring CPFP (jamesob)
#13625 7146672 Add release notes for -printtoconsole and -debuglogfile changes (satwo)
#13718 f7f574d Specify preferred Python string formatting technique (masonicboom)
#12764 10b9a81 Remove field in getblocktemplate help that has never been used (conscott)
#13742 d2186b3 Adjust bitcoincore.org links (MarcoFalke)
#13706 94dd89e Minor improvements to release-process.md (MitchellCash)
#13775 ef4fac0 Remove newlines from error message (practicalswift)
#13803 feb7dd9 add note to contributor docs about warranted PR’s (kallewoof)
#13814 67af7ef Add BIP174 to list of implemented BIPs (sipa)
#13835 c1cba35 Fix memory consistency model in comment (skeees)
#13824 aa30e4b Remove outdated net comment (MarcoFalke)
#13853 317477a correct versions in dependencies.md (fanquake)
#13872 37ab117 Reformat -help output for help2man (real-or-random)
#13717 8c3c402 Link to python style guidelines from developer notes (masonicboom)
#13895 1cd5f2c fix GetWarnings docs to reflect behavior (Empact)
#13911 3e3a50a Revert translated string change, clarify wallet log messages (PierreRochard)
#13908 d6faea4 upgrade rescan time warning from minutes to >1 hour (masonicboom)
#13905 73a09b4 fixed bitcoin-cli -help output for help2man (hebasto)
#14100 2936dbc Change documentation for =0 for non-boolean options (laanwj)
#14096 465a583 Add reference documentation for descriptors language (sipa)
#12757 0c5f67b Clarify include guard naming convention (practicalswift)
#13844 d3325b0 Correct the help output for -prune (hebasto)
Credits
Thanks to everyone who directly contributed to this release:

251
532479301
Aaron Clauson
Akio Nakamura
Akira Takizawa
Alex Morcos
Alex Vear
Alexey Ivanov
Alin Rus
Andrea Comand
Andrew Chow
Anthony Towns
AtsukiTak
Ben Woosley
Bernhard M. Wiedemann
Brandon Ruggles
buddilla
ccdle12
Chris Moore
Chun Kuan Lee
Clem Taylor
Conor Scott
Conrado Gouvea
Cory Fields
Cristian Mircea Messel
ctp-tsteenholdt
Damian Williamson
Dan Bolser
Daniel Kraft
Darko Janković
DaveFromBinary
David A. Harding
DesWurstes
Dimitris Apostolou
donaloconnor
Douglas Roark
DrahtBot
Drew Rasmussen
e0
Ernest Hemingway
Ethan Heilman
Evan Klitzke
fanquake
Felix Wolfsteller
fivepiece
Florian Schmaus
Fuzzbawls
Gabriel Davidian
Giulio Lombardo
Gleb
Grady Laksmono
GreatSock
Gregory Maxwell
Gregory Sanders
Hennadii Stepanov
Henrik Jonsson
Indospace.io
James O’Beirne
Jan Čapek
Jeff Frontz
Jeff Rade
Jeremy Rubin
JeremyRand
Jesse Cohen
Jim Posen
joemphilips
John Bampton
John Newbery
johnlow95
Johnson Lau
Jonas Nick
Jonas Schnelli
João Barbosa
Jorge Timón
Josh Hartshorn
Julian Fleischer
kallewoof
Karel Bilek
Karl-Johan Alm
Ken Lee
Kevin Pan
Kosta Zertsekel
Kristaps Kaupe
Kvaciral
Lawrence Nahum
Linrono
lmanners
Loganaden Velvindron
Lowell Manners
lucash.dev@gmail.com
Luke Dashjr
lutangar
Marcin Jachymiak
marcoagner
MarcoFalke
Mark Erhardt
Mark Friedenbach
Martin Ankerl
Mason Simon
Matt Corallo
Matteo Sumberaz
Max Kaplan
MeshCollider
Michał Zabielski
Mitchell Cash
mruddy
mryandao
murrayn
Nick Vercammen
Nicolas Dorier
Nikolay Mitev
okayplanet
Pierre Rochard
Pieter Wuille
practicalswift
Qasim Javed
Randolf Richardson
Richard Kiss
Roman Zeyde
Russell Yanofsky
Samuel B. Atwood
Sebastian Kung
Sjors Provoost
Steve Lee
steverusso
Suhas Daftuar
Tamas Blummer
TheCharlatan
Thomas Kerin
Thomas Snider
Tim Ruffing
Varunram
Vasil Dimov
Will Ayd
William Robinson
winder
Wladimir J. van der Laan
wodry
And to those that reported security issues:

awemany (for CVE-2018-17144, previously credited as “anonymous reporter”)
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.17.0.1 released
30 October 2018

Notable changes
0.17.0.1 change log
- {:.}
Build system
- {:.}
Documentation
Credits
Bitcoin Core version 0.17.0.1 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.17.0.1/

or through BitTorrent:

magnet:?xt=urn:btih:70749cf2cf2922a21208b4ae760c9f2f9d1e7f11&dn=bitcoin-core-0.17.0.1&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969&tr=udp%3A%2F%2Fzer0day.ch%3A1337&tr=udp%3A%2F%2Fexplodie.org%3A6969

This is a new major version release, including new features, various bugfixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

Notable changes
An issue was solved with OSX dmg generation, affecting macOS 10.12 to 10.14, which could cause Finder to crash on install.

There are no significant changes for other operating systems.

0.17.0.1 change log
Build system
#14416 eb2cc84 Fix OSX dmg issue (10.12 to 10.14) (jonasschnelli)
Documentation
#14509 1b5af2c [0.17] doc: use SegWit in getblocktemplate example (Sjors)
Credits
Thanks to everyone who directly contributed to this release:

Jonas Schnelli
Pieter Wuille
Sjors Provoost
Wladimir J. van der Laan


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.17.1 released
25 December 2018

How to Upgrade
Compatibility
Notable changes
0.17.1 change log
- {:.}
P2P protocol and network code
- {:.}
Wallet
- {:.}
RPC and other APIs
- {:.}
GUI
- {:.}
Build system
- {:.}
Tests and QA
- {:.}
Documentation
Credits
Bitcoin Core version 0.17.1 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.17.1/

This is a new minor version release, with various bugfixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.

The first time you run version 0.15.0 or newer, your chainstate database will be converted to a new format, which will take anywhere from a few minutes to half an hour, depending on the speed of your machine.

Note that the block database format also changed in version 0.8.0 and there is no automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading directly from 0.7.x and earlier without redownloading the blockchain is not supported. However, as usual, old wallet versions are still supported.

Downgrading warning
The chainstate database for this release is not compatible with previous releases, so if you run 0.15 and then decide to switch back to any older version, you will need to run the old release with the -reindex-chainstate option to rebuild the chainstate data structures in the old format.

If your node has pruning enabled, this will entail re-downloading and processing the entire blockchain.

Compatibility
Bitcoin Core is extensively tested on multiple operating systems using the Linux kernel, macOS 10.10+, and Windows 7 and newer (Windows XP is not supported).

Bitcoin Core should also work on most other Unix-like systems but is not frequently tested on them.

From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn’t support versions of macOS older than 10.10.

Notable changes
listtransactions label support
The listtransactions RPC account parameter which was deprecated in 0.17.0 and renamed to dummy has been un-deprecated and renamed again to label.

When bitcoin is configured with the -deprecatedrpc=accounts setting, specifying a label/account/dummy argument will return both outgoing and incoming transactions. Without the -deprecatedrpc=accounts setting, it will only return incoming transactions (because it used to be possible to create transactions spending from specific accounts, but this is no longer possible with labels).

When -deprecatedrpc=accounts is set, it’s possible to pass the empty string “” to list transactions that don’t have any label. Without -deprecatedrpc=accounts, passing the empty string is an error because returning only non-labeled transactions is not generally useful behavior and can cause confusion.

0.17.1 change log
P2P protocol and network code
#14685 9406502 Fix a deserialization overflow edge case (kazcw)
#14728 b901578 Fix uninitialized read when stringifying an addrLocal (kazcw)
Wallet
#14441 5150acc Restore ability to list incoming transactions by label (jnewbery)
#13546 91fa15a Fix use of uninitialized value bnb_used in CWallet::CreateTransaction(…) (practicalswift)
#14310 bb90695 Ensure wallet is unlocked before signing (gustavonalle)
#14690 5782fdc Throw error if CPubKey is invalid during PSBT keypath serialization (instagibbs)
#14852 2528443 backport: [tests] Add wallet_balance.py (MarcoFalke)
#14196 3362a95 psbt: always drop the unnecessary utxo and convert non-witness utxo to witness when necessary (achow101)
#14588 70ee1f8 Refactor PSBT signing logic to enforce invariant and fix signing bug (gwillen)
#14424 89a9a9d Stop requiring imported pubkey to sign non-PKH schemes (sipa, MeshCollider)
RPC and other APIs
#14417 fb9ad04 Fix listreceivedbyaddress not taking address as a string (etscrivner)
#14596 de5e48a Bugfix: RPC: Add address_type named param for createmultisig (luke-jr)
#14618 9666dba Make HTTP RPC debug logging more informative (practicalswift)
#14197 7bee414 [psbt] Convert non-witness UTXOs to witness if witness sig created (achow101)
#14377 a3fe125 Check that a separator is found for psbt inputs, outputs, and global map (achow101)
#14356 7a590d8 Fix converttopsbt permitsigdata arg, add basic test (instagibbs)
#14453 75b5d8c Fix wallet unload during walletpassphrase timeout (promag)
GUI
#14403 0242b5a Revert “Force TLS1.0+ for SSL connections” (real-or-random)
#14593 df5131b Explicitly disable “Dark Mode” appearance on macOS (fanquake)
Build system
#14647 7edebed Remove illegal spacing in darwin.mk (ch4ot1c)
#14698 ec71f06 Add bitcoin-tx.exe into Windows installer (ken2812221)
Tests and QA
#13965 29899ec Fix extended functional tests fail (ken2812221)
#14011 9461f98 Disable wallet and address book Qt tests on macOS minimal platform (ryanofsky)
#14180 86fadee Run all tests even if wallet is not compiled (MarcoFalke)
#14122 8bc1bad Test rpc_help.py failed: Check whether ZMQ is enabled or not (Kvaciral)
#14101 96dc936 Use named args in validation acceptance tests (MarcoFalke)
#14020 24d796a Add tests for RPC help (promag)
#14052 7ff32a6 Add some actual witness in rpc_rawtransaction (MarcoFalke)
#14215 b72fbab Use correct python index slices in example test (sdaftuar)
#14024 06544fa Add TestNode::assert_debug_log (MarcoFalke)
#14658 60f7a97 Add test to ensure node can generate all rpc help texts at runtime (MarcoFalke)
#14632 96f15e8 Fix a comment (fridokus)
#14700 f9db08e Avoid race in p2p_invalid_block by waiting for the block request (MarcoFalke)
#14845 67225e2 Add wallet_balance.py (jnewbery)
Documentation
#14161 5f51fd6 doc/descriptors.md tweaks (ryanofsky)
#14276 85aacc4 Add autogen.sh in ARM Cross-compilation (walterwhite81)
Credits
Thanks to everyone who directly contributed to this release:

Andrew Chow
Chun Kuan Lee
David A. Harding
Eric Scrivner
fanquake
fridokus
Glenn Willen
Gregory Sanders
gustavonalle
John Newbery
Jon Layton
Jonas Schnelli
João Barbosa
Kaz Wesley
Kvaciral
Luke Dashjr
MarcoFalke
MeshCollider
Pieter Wuille
practicalswift
Russell Yanofsky
Sjors Provoost
Suhas Daftuar
Tim Ruffing
Walter
Wladimir J. van der Laan
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.18.0 released
2 May 2019

How to Upgrade
Compatibility
Known issues
Notable changes
Planned changes
Low-level changes
0.18.0 change log
- {:.}
Consensus
- {:.}
Mining
- {:.}
Block and transaction handling
- {:.}
P2P protocol and network code
- {:.}
Wallet
- {:.}
RPC and other APIs
- {:.}
GUI
- {:.}
Build system
- {:.}
Tests and QA
- {:.}
Platform support
- {:.}
Miscellaneous
- {:.}
Documentation
Credits
Bitcoin Core version 0.18.0 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.18.0/

This is a new major version release, including new features, various bug fixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

The first time you run version 0.15.0 or newer, your chainstate database will be converted to a new format, which will take anywhere from a few minutes to half an hour, depending on the speed of your machine.

Note that the block database format also changed in version 0.8.0 and there is no automatic upgrade code from before version 0.8 to version 0.15.0 or later. Upgrading directly from 0.7.x and earlier without redownloading the blockchain is not supported. However, as usual, old wallet versions are still supported.

Compatibility
Bitcoin Core is supported and extensively tested on operating systems using the Linux kernel, macOS 10.10+, and Windows 7 and newer. It is not recommended to use Bitcoin Core on unsupported systems.

Bitcoin Core should also work on most other Unix-like systems but is not as frequently tested on them.

From 0.17.0 onwards, macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn’t support versions of macOS older than 10.10. Additionally, Bitcoin Core does not yet change appearance when macOS “dark mode” is activated.

In addition to previously-supported CPU platforms, this release’s pre-compiled distribution also provides binaries for the RISC-V platform.

If you are using the systemd unit configuration file located at contrib/init/bitcoind.service, it has been changed to use /var/lib/bitcoind as the data directory instead of ~bitcoin/.bitcoin. When switching over to the new configuration file, please make sure that the filesystem on which /var/lib/bitcoind will exist has enough space (check using df -h /var/lib/bitcoind), and optionally copy over your existing data directory. See the systemd init file section for more details.

Known issues
Wallet GUI
For advanced users who have both (1) enabled coin control features, and (2) are using multiple wallets loaded at the same time: The coin control input selection dialog can erroneously retain wrong-wallet state when switching wallets using the dropdown menu. For now, it is recommended not to use coin control features with multiple wallets loaded.

Notable changes
Mining
Calls to getblocktemplate will fail if the segwit rule is not specified. Calling getblocktemplate without segwit specified is almost certainly a misconfiguration since doing so results in lower rewards for the miner. Failed calls will produce an error message describing how to enable the segwit rule.
Configuration option changes
A warning is printed if an unrecognized section name is used in the configuration file. Recognized sections are [test], [main], and [regtest].

Four new options are available for configuring the maximum number of messages that ZMQ will queue in memory (the “high water mark”) before dropping additional messages. The default value is 1,000, the same as was used for previous releases. See the ZMQ documentation for details.

The rpcallowip option can no longer be used to automatically listen on all network interfaces. Instead, the rpcbind parameter must be used to specify the IP addresses to listen on. Listening for RPC commands over a public network connection is insecure and should be disabled, so a warning is now printed if a user selects such a configuration. If you need to expose RPC in order to use a tool like Docker, ensure you only bind RPC to your localhost, e.g. docker run [...] -p 127.0.0.1:8332:8332 (this is an extra :8332 over the normal Docker port specification).

The rpcpassword option now causes a startup error if the password set in the configuration file contains a hash character (#), as it’s ambiguous whether the hash character is meant for the password or as a comment.

The whitelistforcerelay option is used to relay transactions from whitelisted peers even when not accepted to the mempool. This option now defaults to being off, so that changes in policy and disconnect/ban behavior will not cause a node that is whitelisting another to be dropped by peers. Users can still explicitly enable this behavior with the command line option (and may want to consider contacting the Bitcoin Core project to let us know about their use-case, as this feature could be deprecated in the future).

systemd init file
The systemd init file (contrib/init/bitcoind.service) has been changed to use /var/lib/bitcoind as the data directory instead of ~bitcoin/.bitcoin. This change makes Bitcoin Core more consistent with other services, and makes the systemd init config more consistent with existing Upstart and OpenRC configs.

The configuration, PID, and data directories are now completely managed by systemd, which will take care of their creation, permissions, etc. See systemd.exec(5) for more details.

When using the provided init files under contrib/init, overriding the datadir option in /etc/bitcoin/bitcoin.conf will have no effect. This is because the command line arguments specified in the init files take precedence over the options specified in /etc/bitcoin/bitcoin.conf.

Documentation
A new short document about the JSON-RPC interface describes cases where the results of an RPC might contain inconsistencies between data sourced from different subsystems, such as wallet state and mempool state. A note is added to the REST interface documentation indicating that the same rules apply.

Further information is added to the JSON-RPC documentation about how to secure this interface.

A new document about the bitcoin.conf file describes how to use it to configure Bitcoin Core.

A new document introduces Bitcoin Core’s BIP174 Partially-Signed Bitcoin Transactions (PSBT) interface, which is used to allow multiple programs to collaboratively work to create, sign, and broadcast new transactions. This is useful for offline (cold storage) wallets, multisig wallets, coinjoin implementations, and many other cases where two or more programs need to interact to generate a complete transaction.

The output script descriptor documentation has been updated with information about new features in this still-developing language for describing the output scripts that a wallet or other program wants to receive notifications for, such as which addresses it wants to know received payments. The language is currently used in multiple new and updated RPCs described in these release notes and is expected to be adapted to other RPCs and to the underlying wallet structure.

Build system changes
A new --disable-bip70 option may be passed to ./configure to prevent Bitcoin-Qt from being built with support for the BIP70 payment protocol or from linking libssl. As the payment protocol has exposed Bitcoin Core to libssl vulnerabilities in the past, builders who don’t need BIP70 support are encouraged to use this option to reduce their exposure to future vulnerabilities.

The minimum required version of Qt (when building the GUI) has been increased from 5.2 to 5.5.1 (the depends system provides 5.9.7)

New RPCs
getnodeaddresses returns peer addresses known to this node. It may be used to find nodes to connect to without using a DNS seeder.

listwalletdir returns a list of wallets in the wallet directory (either the default wallet directory or the directory configured by the -walletdir parameter).

getrpcinfo returns runtime details of the RPC server. At the moment, it returns an array of the currently active commands and how long they’ve been running.

deriveaddresses returns one or more addresses corresponding to an output descriptor.

getdescriptorinfo accepts a descriptor and returns information about it, including its computed checksum.

joinpsbts merges multiple distinct PSBTs into a single PSBT. The multiple PSBTs must have different inputs. The resulting PSBT will contain every input and output from all of the PSBTs. Any signatures provided in any of the PSBTs will be dropped.

analyzepsbt examines a PSBT and provides information about what the PSBT contains and the next steps that need to be taken in order to complete the transaction. For each input of a PSBT, analyzepsbt provides information about what information is missing for that input, including whether a UTXO needs to be provided, what pubkeys still need to be provided, which scripts need to be provided, and what signatures are still needed. Every input will also list which role is needed to complete that input, and analyzepsbt will also list the next role in general needed to complete the PSBT. analyzepsbt will also provide the estimated fee rate and estimated virtual size of the completed transaction if it has enough information to do so.

utxoupdatepsbt searches the set of Unspent Transaction Outputs (UTXOs) to find the outputs being spent by the partial transaction. PSBTs need to have the UTXOs being spent to be provided because the signing algorithm requires information from the UTXO being spent. For segwit inputs, only the UTXO itself is necessary. For non-segwit outputs, the entire previous transaction is needed so that signers can be sure that they are signing the correct thing. Unfortunately, because the UTXO set only contains UTXOs and not full transactions, utxoupdatepsbt will only add the UTXO for segwit inputs.

Updated RPCs
Note: some low-level RPC changes mainly useful for testing are described in the Low-level Changes section below.

getpeerinfo now returns an additional minfeefilter field set to the peer’s BIP133 fee filter. You can use this to detect that you have peers that are willing to accept transactions below the default minimum relay fee.

The mempool RPCs, such as getrawmempool with verbose=true, now return an additional “bip125-replaceable” value indicating whether the transaction (or its unconfirmed ancestors) opts-in to asking nodes and miners to replace it with a higher-feerate transaction spending any of the same inputs.

settxfee previously silently ignored attempts to set the fee below the allowed minimums. It now prints a warning. The special value of “0” may still be used to request the minimum value.

getaddressinfo now provides an ischange field indicating whether the wallet used the address in a change output.

importmulti has been updated to support P2WSH, P2WPKH, P2SH-P2WPKH, and P2SH-P2WSH. Requests for P2WSH and P2SH-P2WSH accept an additional witnessscript parameter.

importmulti now returns an additional warnings field for each request with an array of strings explaining when fields are being ignored or are inconsistent, if there are any.

getaddressinfo now returns an additional solvable boolean field when Bitcoin Core knows enough about the address’s scriptPubKey, optional redeemScript, and optional witnessScript in order for the wallet to be able to generate an unsigned input spending funds sent to that address.

The getaddressinfo, listunspent, and scantxoutset RPCs now return an additional desc field that contains an output descriptor containing all key paths and signing information for the address (except for the private key). The desc field is only returned for getaddressinfo and listunspent when the address is solvable.

importprivkey will preserve previously-set labels for addresses or public keys corresponding to the private key being imported. For example, if you imported a watch-only address with the label “cold wallet” in earlier releases of Bitcoin Core, subsequently importing the private key would default to resetting the address’s label to the default empty-string label (“”). In this release, the previous label of “cold wallet” will be retained. If you optionally specify any label besides the default when calling importprivkey, the new label will be applied to the address.

See the Mining section for changes to getblocktemplate.

getmininginfo now omits currentblockweight and currentblocktx when a block was never assembled via RPC on this node.

The getrawtransaction RPC & REST endpoints no longer check the unspent UTXO set for a transaction. The remaining behaviors are as follows: 1. If a blockhash is provided, check the corresponding block.
If no blockhash is provided, check the mempool. 3. If no blockhash is provided but txindex is enabled, also check txindex.
unloadwallet is now synchronous, meaning it will not return until the wallet is fully unloaded.

importmulti now supports importing of addresses from descriptors. A “desc” parameter can be provided instead of the “scriptPubKey” in a request, as well as an optional range for ranged descriptors to specify the start and end of the range to import. Descriptors with key origin information imported through importmulti will have their key origin information stored in the wallet for use with creating PSBTs. More information about descriptors can be found here.

listunspent has been modified so that it also returns witnessScript, the witness script in the case of a P2WSH or P2SH-P2WSH output.

createwallet now has an optional blank argument that can be used to create a blank wallet. Blank wallets do not have any keys or HD seed. They cannot be opened in software older than 0.18. Once a blank wallet has a HD seed set (by using sethdseed) or private keys, scripts, addresses, and other watch only things have been imported, the wallet is no longer blank and can be opened in 0.17.x. Encrypting a blank wallet will also set a HD seed for it.
Deprecated or removed RPCs
signrawtransaction is removed after being deprecated and hidden behind a special configuration option in version 0.17.0.

The ‘account’ API is removed after being deprecated in v0.17. The ‘label’ API was introduced in v0.17 as a replacement for accounts. See the release notes from v0.17 for a full description of the changes from the ‘account’ API to the ‘label’ API.

addwitnessaddress is removed after being deprecated in version 0.16.0.

generate is deprecated and will be fully removed in a subsequent major version. This RPC is only used for testing, but its implementation reached across multiple subsystems (wallet and mining), so it is being deprecated to simplify the wallet-node interface. Projects that are using generate for testing purposes should transition to using the generatetoaddress RPC, which does not require or use the wallet component. Calling generatetoaddress with an address returned by the getnewaddress RPC gives the same functionality as the old generate RPC. To continue using generate in this version, restart bitcoind with the -deprecatedrpc=generate configuration option.

Be reminded that parts of the validateaddress command have been deprecated and moved to getaddressinfo. The following deprecated fields have moved to getaddressinfo: ismine, iswatchonly, script, hex, pubkeys, sigsrequired, pubkey, embedded, iscompressed, label, timestamp, hdkeypath, hdmasterkeyid.

The addresses field has been removed from the validateaddress and getaddressinfo RPC methods. This field was confusing since it referred to public keys using their P2PKH address. Clients should use the embedded.address field for P2SH or P2WSH wrapped addresses, and pubkeys for inspecting multisig participants.

REST changes
A new /rest/blockhashbyheight/ endpoint is added for fetching the hash of the block in the current best blockchain based on its height (how many blocks it is after the Genesis Block).
Graphical User Interface (GUI)
A new Window menu is added alongside the existing File, Settings, and Help menus. Several items from the other menus that opened new windows have been moved to this new Window menu.

In the Send tab, the checkbox for “pay only the required fee” has been removed. Instead, the user can simply decrease the value in the Custom Feerate field all the way down to the node’s configured minimum relay fee.

In the Overview tab, the watch-only balance will be the only balance shown if the wallet was created using the createwallet RPC and the disable_private_keys parameter was set to true.

The launch-on-startup option is no longer available on macOS if compiled with macosx min version greater than 10.11 (use CXXFLAGS=”-mmacosx-version-min=10.11” CFLAGS=”-mmacosx-version-min=10.11” for setting the deployment sdk version)

Tools
A new bitcoin-wallet tool is now distributed alongside Bitcoin Core’s other executables. Without needing to use any RPCs, this tool can currently create a new wallet file or display some basic information about an existing wallet, such as whether the wallet is encrypted, whether it uses an HD seed, how many transactions it contains, and how many address book entries it has.
Planned changes
This section describes planned changes to Bitcoin Core that may affect other Bitcoin software and services.

Since version 0.16.0, Bitcoin Core’s built-in wallet has defaulted to generating P2SH-wrapped segwit addresses when users want to receive payments. These addresses are backwards compatible with all widely-used software. Starting with Bitcoin Core 0.20 (expected about a year after 0.18), Bitcoin Core will default to native segwit addresses (bech32) that provide additional fee savings and other benefits. Currently, many wallets and services already support sending to bech32 addresses, and if the Bitcoin Core project sees enough additional adoption, it will instead default to bech32 receiving addresses in Bitcoin Core 0.19 (approximately November 2019). P2SH-wrapped segwit addresses will continue to be provided if the user requests them in the GUI or by RPC, and anyone who doesn’t want the update will be able to configure their default address type. (Similarly, pioneering users who want to change their default now may set the addresstype=bech32 configuration option in any Bitcoin Core release from 0.16.0 up.)
Deprecated P2P messages
BIP 61 reject messages are now deprecated. Reject messages have no use case on the P2P network and are only logged for debugging by most network nodes. Furthermore, they increase bandwidth and can be harmful for privacy and security. It has been possible to disable BIP 61 messages since v0.17 with the -enablebip61=0 option. BIP 61 messages will be disabled by default in a future version, before being removed entirely.
Low-level changes
This section describes RPC changes mainly useful for testing, mostly not relevant in production. The changes are mentioned for completeness.

RPC
The submitblock RPC previously returned the reason a rejected block was invalid the first time it processed that block, but returned a generic “duplicate” rejection message on subsequent occasions it processed the same block. It now always returns the fundamental reason for rejecting an invalid block and only returns “duplicate” for valid blocks it has already accepted.

A new submitheader RPC allows submitting block headers independently from their block. This is likely only useful for testing.

The signrawtransactionwithkey and signrawtransactionwithwallet RPCs have been modified so that they also optionally accept a witnessScript, the witness script in the case of a P2WSH or P2SH-P2WSH output. This is compatible with the change to listunspent.

For the walletprocesspsbt and walletcreatefundedpsbt RPCs, if the bip32derivs parameter is set to true but the key metadata for a public key has not been updated yet, then that key will have a derivation path as if it were just an independent key (i.e. no derivation path and its master fingerprint is itself).

Configuration
The -usehd configuration option was removed in version 0.16. From that version onwards, all new wallets created are hierarchical deterministic wallets. This release makes specifying -usehd an invalid configuration option.
Network
This release allows peers that your node automatically disconnected for misbehavior (e.g. sending invalid data) to reconnect to your node if you have unused incoming connection slots. If your slots fill up, a misbehaving node will be disconnected to make room for nodes without a history of problems (unless the misbehaving node helps your node in some other way, such as by connecting to a part of the Internet from which you don’t have many other peers). Previously, Bitcoin Core banned the IP addresses of misbehaving peers for a period of time (default of 1 day); this was easily circumvented by attackers with multiple IP addresses. If you manually ban a peer, such as by using the setban RPC, all connections from that peer will still be rejected.
Wallet
The key metadata will need to be upgraded the first time that the HD seed is available. For unencrypted wallets this will occur on wallet loading. For encrypted wallets this will occur the first time the wallet is unlocked.

Newly encrypted wallets will no longer require restarting the software. Instead such wallets will be completely unloaded and reloaded to achieve the same effect.

A sub-project of Bitcoin Core now provides Hardware Wallet Interaction (HWI) scripts that allow command-line users to use several popular hardware key management devices with Bitcoin Core. See their project page for details.

Security
This release changes the Random Number Generator (RNG) used from OpenSSL to Bitcoin Core’s own implementation, although entropy gathered by Bitcoin Core is fed out to OpenSSL and then read back in when the program needs strong randomness. This moves Bitcoin Core a little closer to no longer needing to depend on OpenSSL, a dependency that has caused security issues in the past. The new implementation gathers entropy from multiple sources, including from hardware supporting the rdseed CPU instruction.
Changes for particular platforms
On macOS, Bitcoin Core now opts out of application CPU throttling (“app nap”) during initial blockchain download, when catching up from over 100 blocks behind the current chain tip, or when reindexing chain data. This helps prevent these operations from taking an excessively long time because the operating system is attempting to conserve power.
0.18.0 change log
Consensus
#14247 Fix crash bug with duplicate inputs within a transaction (TheBlueMatt)
Mining
#14811 Mining: Enforce that segwit option must be set in GBT (jnewbery)
Block and transaction handling
#13310 Report progress in ReplayBlocks while rolling forward (promag)
#13783 validation: Pass tx pool reference into CheckSequenceLocks (MarcoFalke)
#14834 validation: Assert that pindexPrev is non-null when required (kallewoof)
#14085 index: Fix for indexers skipping genesis block (jimpo)
#14963 mempool, validation: Explain cs_main locking semantics (MarcoFalke)
#15193 Default -whitelistforcerelay to off (sdaftuar)
#15429 Update assumevalid, minimumchainwork, and getchaintxstats to height 563378 (gmaxwell)
#15552 Granular invalidateblock and RewindBlockIndex (MarcoFalke)
#14841 Move CheckBlock() call to critical section (hebasto)
P2P protocol and network code
#14025 Remove dead code for nVersion=10300 (MarcoFalke)
#12254 BIP 158: Compact Block Filters for Light Clients (jimpo)
#14073 blockfilter: Avoid out-of-bounds script access (jimpo)
#14140 Switch nPrevNodeCount to vNodesSize (pstratem)
#14027 Skip stale tip checking if outbound connections are off or if reindexing (gmaxwell)
#14532 Never bind INADDR_ANY by default, and warn when doing so explicitly (luke-jr)
#14733 Make peer timeout configurable, speed up very slow test and ensure correct code path tested (zallarak)
#14336 Implement poll (pstratem)
#15051 IsReachable is the inverse of IsLimited (DRY). Includes unit tests (mmachicao)
#15138 Drop IsLimited in favor of IsReachable (Empact)
#14605 Return of the Banman (dongcarl)
#14970 Add dnsseed.emzy.de to DNS seeds (Emzy)
#14929 Allow connections from misbehavior banned peers (gmaxwell)
#15345 Correct comparison of addr count (dongcarl)
#15201 Add missing locking annotation for vNodes. vNodes is guarded by cs_vNodes (practicalswift)
#14626 Select orphan transaction uniformly for eviction (sipa)
#15486 Ensure tried collisions resolve, and allow feeler connections to existing outbound netgroups (sdaftuar)
Wallet
#13962 Remove unused dummy_tx variable from FillPSBT (dongcarl)
#13967 Don’t report minversion wallet entry as unknown (instagibbs)
#13988 Add checks for settxfee reasonableness (ajtowns)
#12559 Avoid locking cs_main in some wallet RPC (promag)
#13631 Add CMerkleTx::IsImmatureCoinBase method (Empact)
#14023 Remove accounts RPCs (jnewbery)
#13825 Kill accounts (jnewbery)
#10605 Add AssertLockHeld assertions in CWallet::ListCoins (ryanofsky)
#12490 Remove deprecated wallet rpc features from bitcoin_server (jnewbery)
#14138 Set encrypted_batch to nullptr after delete. Avoid double free in the case of NDEBUG (practicalswift)
#14168 Remove ENABLE_WALLET from libbitcoin_server.a (jnewbery)
#12493 Reopen CDBEnv after encryption instead of shutting down (achow101)
#14282 Remove -usehd option (jnewbery)
#14146 Remove trailing separators from -walletdir arg (PierreRochard)
#14291 Add ListWalletDir utility function (promag)
#14468 Deprecate generate RPC method (jnewbery)
#11634 Add missing cs_wallet/cs_KeyStore locks to wallet (practicalswift)
#14296 Remove addwitnessaddress (jnewbery)
#14451 Add BIP70 deprecation warning and allow building GUI without BIP70 support (jameshilliard)
#14320 Fix duplicate fileid detection (ken2812221)
#14561 Remove fs::relative call and fix listwalletdir tests (promag)
#14454 Add SegWit support to importmulti (MeshCollider)
#14410 rpcwallet: ischange field for getaddressinfo RPC (mrwhythat)
#14350 Add WalletLocation class (promag)
#14689 Require a public key to be retrieved when signing a P2PKH input (achow101)
#14478 Show error to user when corrupt wallet unlock fails (MeshCollider)
#14411 Restore ability to list incoming transactions by label (ryanofsky)
#14552 Detect duplicate wallet by comparing the db filename (ken2812221)
#14678 Remove redundant KeyOriginInfo access, already done in CreateSig (instagibbs)
#14477 Add ability to convert solvability info to descriptor (sipa)
#14380 Fix assert crash when specified change output spend size is unknown (instagibbs)
#14760 Log env path in BerkeleyEnvironment::Flush (promag)
#14646 Add expansion cache functions to descriptors (unused for now) (sipa)
#13076 Fix ScanForWalletTransactions to return an enum indicating scan result: success / failure / user_abort (Empact)
#14821 Replace CAffectedKeysVisitor with descriptor based logic (sipa)
#14957 Initialize stop_block in CWallet::ScanForWalletTransactions (Empact)
#14565 Overhaul importmulti logic (sipa)
#15039 Avoid leaking nLockTime fingerprint when anti-fee-sniping (MarcoFalke)
#14268 Introduce SafeDbt to handle Dbt with free or memory_cleanse raii-style (Empact)
#14711 Remove uses of chainActive and mapBlockIndex in wallet code (ryanofsky)
#15279 Clarify rescanblockchain doc (MarcoFalke)
#15292 Remove boost::optional-related false positive -Wmaybe-uninitialized warnings on GCC compiler (hebasto)
#13926 [Tools] bitcoin-wallet - a tool for creating and managing wallets offline (jnewbery)
#11911 Free BerkeleyEnvironment instances when not in use (ryanofsky)
#15235 Do not import private keys to wallets with private keys disabled (achow101)
#15263 Descriptor expansions only need pubkey entries for PKH/WPKH (sipa)
#15322 Add missing cs_db lock (promag)
#15297 Releases dangling files on BerkeleyEnvironment::Close (promag)
#14491 Allow descriptor imports with importmulti (MeshCollider)
#15365 Add lock annotation for mapAddressBook (MarcoFalke)
#15226 Allow creating blank (empty) wallets (alternative) (achow101)
#15390 [wallet-tool] Close bdb when flushing wallet (jnewbery)
#15334 Log absolute paths for the wallets (hebasto)
#14978 Factor out PSBT utilities from RPCs for use in GUI code; related refactoring (gwillen)
#14481 Add P2SH-P2WSH support to listunspent RPC (MeshCollider)
#14021 Import key origin data through descriptors in importmulti (achow101)
#14075 Import watch only pubkeys to the keypool if private keys are disabled (achow101)
#15368 Descriptor checksums (sipa)
#15433 Use a single wallet batch for UpgradeKeyMetadata (jonasschnelli)
#15408 Remove unused TransactionError constants (MarcoFalke)
#15583 Log and ignore errors in ListWalletDir and IsBerkeleyBtree (promag)
#14195 Pass privkey export DER compression flag correctly (fingera)
#15299 Fix assertion in CKey::SignCompact (promag)
#14437 Start to separate wallet from node (ryanofsky)
#15749 Fix: importmulti only imports origin info for PKH outputs (sipa)
RPC and other APIs
#12842 Prevent concurrent savemempool (promag)
#13987 Report minfeefilter value in getpeerinfo RPC (ajtowns)
#13891 Remove getinfo deprecation warning (jnewbery)
#13399 Add submitheader (MarcoFalke)
#12676 Show bip125-replaceable flag, when retrieving mempool entries (dexX7)
#13723 PSBT key path cleanups (sipa)
#14008 Preserve a format of RPC command definitions (kostyantyn)
#9332 Let wallet importmulti RPC accept labels for standard scriptPubKeys (ryanofsky)
#13983 Return more specific reject reason for submitblock (MarcoFalke)
#13152 Add getnodeaddresses RPC command (chris-belcher)
#14298 rest: Improve performance for JSON calls (alecalve)
#14297 Remove warning for removed estimatefee RPC (jnewbery)
#14373 Consistency fixes for RPC descriptions (ch4ot1c)
#14150 Add key origin support to descriptors (sipa)
#14518 Always throw in getblockstats if -txindex is required (promag)
#14060 ZMQ: add options to configure outbound message high water mark, aka SNDHWM (mruddy)
#13381 Add possibility to preserve labels on importprivkey (marcoagner)
#14530 Use RPCHelpMan to generate RPC doc strings (MarcoFalke)
#14720 Correctly name RPC arguments (MarcoFalke)
#14726 Use RPCHelpMan for all RPCs (MarcoFalke)
#14796 Pass argument descriptions to RPCHelpMan (MarcoFalke)
#14670 http: Fix HTTP server shutdown (promag)
#14885 Assert that named arguments are unique in RPCHelpMan (promag)
#14877 Document default values for optional arguments (MarcoFalke)
#14875 RPCHelpMan: Support required arguments after optional ones (MarcoFalke)
#14993 Fix data race (UB) in InterruptRPC() (practicalswift)
#14653 rpcwallet: Add missing transaction categories to RPC helptexts (andrewtoth)
#14981 Clarify RPC getrawtransaction’s time help text (benthecarman)
#12151 Remove cs_main lock from blockToJSON and blockheaderToJSON (promag)
#15078 Document bytessent_per_msg and bytesrecv_per_msg (MarcoFalke)
#15057 Correct reconsiderblock help text, add test (MarcoFalke)
#12153 Avoid permanent cs_main lock in getblockheader (promag)
#14982 Add getrpcinfo command (promag)
#15122 Expand help text for importmulti changes (jnewbery)
#15186 remove duplicate solvable field from getaddressinfo (fanquake)
#15209 zmq: log outbound message high water mark when reusing socket (fanquake)
#15177 rest: Improve tests and documention of /headers and /block (promag)
#14353 rest: Add blockhash call, fetch blockhash by height (jonasschnelli)
#15248 Compile on GCC4.8 (MarcoFalke)
#14987 RPCHelpMan: Pass through Result and Examples (MarcoFalke)
#15159 Remove lookup to UTXO set from GetTransaction (amitiuttarwar)
#15245 remove deprecated mentions of signrawtransaction from fundraw help (instagibbs)
#14667 Add deriveaddresses RPC util method (Sjors)
#15357 Don’t ignore -maxtxfee when wallet is disabled (JBaczuk)
#15337 Fix for segfault if combinepsbt called with empty inputs (benthecarman)
#14918 RPCHelpMan: Check default values are given at compile-time (MarcoFalke)
#15383 mining: Omit uninitialized currentblockweight, currentblocktx (MarcoFalke)
#13932 Additional utility RPCs for PSBT (achow101)
#15401 Actually throw help when passed invalid number of params (MarcoFalke)
#15471 rpc/gui: Remove ‘Unknown block versions being mined’ warning (laanwj)
#15497 Consistent range arguments in scantxoutset/importmulti/deriveaddresses (sipa)
#15510 deriveaddresses: add range to CRPCConvertParam (Sjors)
#15582 Fix overflow bug in analyzepsbt fee: CAmount instead of int (sipa)
#13424 Consistently validate txid / blockhash length and encoding in rpc calls (Empact)
#15750 Remove the addresses field from the getaddressinfo return object (jnewbery)
GUI
#13634 Compile boost::signals2 only once (MarcoFalke)
#13248 Make proxy icon from statusbar clickable (mess110)
#12818 TransactionView: highlight replacement tx after fee bump (Sjors)
#13529 Use new Qt5 connect syntax (promag)
#14162 Also log and print messages or questions like bitcoind (MarcoFalke)
#14385 Avoid system harfbuzz and bz2 (theuni)
#14450 Fix QCompleter popup regression (hebasto)
#14177 Set C locale for amountWidget (hebasto)
#14374 Add Blocksdir to Debug window (hebasto)
#14554 Remove unused adjustedTime parameter (hebasto)
#14228 Enable system tray icon by default if available (hebasto)
#14608 Remove the “Pay only required fee…” checkbox (hebasto)
#14521 qt, docs: Fix bitcoin-qt -version output formatting (hebasto)
#13966 When private key is disabled, only show watch-only balance (ken2812221)
#14828 Remove hidden columns in coin control dialog (promag)
#14783 Fix boost::signals2::no_slots_error in early calls to InitWarning (promag)
#14854 Cleanup SplashScreen class (hebasto)
#14801 Use window() instead of obsolete topLevelWidget() (hebasto)
#14573 Add Window menu (promag)
#14979 Restore < Qt5.6 compatibility for addAction (jonasschnelli)
#14975 Refactoring with QString::toNSString() (hebasto)
#15000 Fix broken notificator on GNOME (hebasto)
#14375 Correct misleading “overridden options” label (hebasto)
#15007 Notificator class refactoring (hebasto)
#14784 Use WalletModel* instead of the wallet name as map key (promag)
#11625 Add BitcoinApplication & RPCConsole tests (ryanofsky)
#14517 Fix start with the -min option (hebasto)
#13216 implements concept for different disk sizes on intro (marcoagner)
#15114 Replace remaining 0 with nullptr (Empact)
#14594 Fix minimized window bug on Linux (hebasto)
#14556 Fix confirmed transaction labeled “open” (#13299) (hebasto)
#15149 Show current wallet name in window title (promag)
#15136 “Peers” tab overhaul (hebasto)
#14250 Remove redundant stopThread() and stopExecutor() signals (hebasto)
#15040 Add workaround for QProgressDialog bug on macOS (hebasto)
#15101 Add WalletController (promag)
#15178 Improve “help-console” message (hebasto)
#15210 Fix window title update (promag)
#15167 Fix wallet selector size adjustment (hebasto)
#15208 Remove macOS launch-at-startup when compiled with > macOS 10.11, fix memory mismanagement (jonasschnelli)
#15163 Correct units for “-dbcache” and “-prune” (hebasto)
#15225 Change the receive button to respond to keypool state changing (achow101)
#15280 Fix shutdown order (promag)
#15203 Fix issue #9683 “gui, wallet: random abort (segmentation fault) (dooglus)
#15091 Fix model overlay header sync (jonasschnelli)
#15153 Add Open Wallet menu (promag)
#15183 Fix m_assumed_blockchain_size variable value (marcoagner)
#15063 If BIP70 is disabled, attempt to fall back to BIP21 parsing (luke-jr)
#15195 Add Close Wallet action (promag)
#15462 Fix async open wallet call order (promag)
#15801 Bugfix: GUI: Options: Initialise prune setting range before loading current value, and remove upper bound limit (luke-jr)
Build system
#13955 gitian: Bump descriptors for (0.)18 (fanquake)
#13899 Enable -Wredundant-decls where available. Remove redundant redeclarations (practicalswift)
#13665 Add RISC-V support to gitian (ken2812221)
#14062 Generate MSVC project files via python script (ken2812221)
#14037 Add README.md to linux release tarballs (hebasto)
#14183 Remove unused Qt 4 dependencies (ken2812221)
#14127 Avoid getifaddrs when unavailable (greenaddress)
#14184 Scripts and tools: increased timeout downloading (cisba)
#14204 Move interfaces/* to libbitcoin_server (laanwj)
#14208 Actually remove ENABLE_WALLET (jnewbery)
#14212 Remove libssl from LDADD unless GUI (MarcoFalke)
#13578 Upgrade zeromq to 4.2.5 and avoid deprecated zeromq API functions (mruddy)
#14281 lcov: filter /usr/lib/ from coverage reports (MarcoFalke)
#14325 gitian: Use versioned unsigned tarballs instead of generically named ones (achow101)
#14253 During ‘make clean’, remove some files that are currently missed (murrayn)
#14455 Unbreak make clean (jamesob)
#14495 Warn (don’t fail!) on spelling errors (practicalswift)
#14496 Pin to specific versions of Python packages we install from PyPI in Travis (practicalswift)
#14568 Fix Qt link order for Windows build (ken2812221)
#14252 Run functional tests and benchmarks under the undefined behaviour sanitizer (UBSan) (practicalswift)
#14612 Include full version number in released file names (achow101)
#14840 Remove duplicate libconsensus linking in test make (AmirAbrams)
#14564 Adjust configure so that only BIP70 is disabled when protobuf is missing instead of the GUI (jameshilliard)
#14883 Add --retry 5 to curl opts in install_db4.sh (qubenix)
#14701 Add CLIENT_VERSION_BUILD to CFBundleGetInfoString (fanquake)
#14849 Qt 5.9.7 (fanquake)
#15020 Add names to Travis jobs (gkrizek)
#15047 Allow to configure –with-sanitizers=fuzzer (MarcoFalke)
#15154 Configure: bitcoin-tx doesn’t need libevent, so don’t pull it in (luke-jr)
#15175 Drop macports support (Empact)
#15308 Restore compatibility with older boost (Empact)
#15407 msvc: Fix silent merge conflict between #13926 and #14372 part II (ken2812221)
#15388 Makefile.am: add rule for src/bitcoin-wallet (Sjors)
#15393 Bump minimum Qt version to 5.5.1 (Sjors)
#15285 Prefer Python 3.4 even if newer versions are present on the system (Sjors)
#15398 msvc: Add rapidcheck property tests (ken2812221)
#15431 msvc: scripted-diff: Remove NDEBUG pre-define in project file (ken2812221)
#15549 gitian: Improve error handling (laanwj)
#15548 use full version string in setup.exe (MarcoFalke)
#11526 Visual Studio build configuration for Bitcoin Core (sipsorcery)
#15110 build_msvc: Fix the build problem in libbitcoin_server (Mr-Leshiy)
#14372 msvc: build secp256k1 and leveldb locally (ken2812221)
#15325 msvc: Fix silent merge conflict between #13926 and #14372 (ken2812221)
#15391 Add compile time verification of assumptions we’re currently making implicitly/tacitly (practicalswift)
#15503 msvc: Use a single file to specify the include path (ken2812221)
#13765 contrib: Add gitian build support for github pull request (ken2812221)
#15809 gitignore: plist and dat (jamesob)
Tests and QA
#15405 appveyor: Clean cache when build configuration changes (Sjors)
#13953 Fix deprecation in bitcoin-util-test.py (isghe)
#13963 Replace usage of tostring() with tobytes() (dongcarl)
#13964 ci: Add appveyor ci (ken2812221)
#13997 appveyor: fetch the latest port data (ken2812221)
#13707 Add usage note to check-rpc-mappings.py (masonicboom)
#14036 travis: Run unit tests –with-sanitizers=undefined (MarcoFalke)
#13861 Add testing of value_ret for SelectCoinsBnB (Empact)
#13863 travis: Move script sections to files in .travis/ subject to shellcheck (scravy)
#14081 travis: Fix missing differentiation between unit and functional tests (scravy)
#14042 travis: Add cxxflags=-wno-psabi at arm job (ken2812221)
#14051 Make combine_logs.py handle multi-line logs (jnewbery)
#14093 Fix accidental trunction from int to bool (practicalswift)
#14108 Add missing locking annotations and locks (g_cs_orphans) (practicalswift)
#14088 Don’t assert(…) with side effects (practicalswift)
#14086 appveyor: Use clcache to speed up build (ken2812221)
#13954 Warn (don’t fail!) on spelling errors. Fix typos reported by codespell (practicalswift)
#12775 Integration of property based testing into Bitcoin Core (Christewart)
#14119 Read reject reasons from debug log, not P2P messages (MarcoFalke)
#14189 Fix silent merge conflict in wallet_importmulti (MarcoFalke)
#13419 Speed up knapsack_solver_test by not recreating wallet 100 times (lucash-dev)
#14199 Remove redundant BIP174 test from rpc_psbt.json (araspitzu)
#14179 Fixups to “Run all tests even if wallet is not compiled” (MarcoFalke)
#14225 Reorder tests and move most of extended tests up to normal tests (ken2812221)
#14236 generate –> generatetoaddress change to allow tests run without wallet (sanket1729)
#14287 Use MakeUnique to construct objects owned by unique_ptrs (practicalswift)
#14007 Run functional test on Windows and enable it on Appveyor (ken2812221)
#14275 Write the notification message to different files to avoid race condition in feature_notifications.py (ken2812221)
#14306 appveyor: Move AppVeyor YAML to dot-file-style YAML (MitchellCash)
#14305 Enforce critical class instance attributes in functional tests, fix segwit test specificity (JustinTArthur)
#12246 Bugfix: Only run bitcoin-tx tests when bitcoin-tx is enabled (luke-jr)
#14316 Exclude all tests with difference parameters in --exclude list (ken2812221)
#14381 Add missing call to skip_if_no_cli() (practicalswift)
#14389 travis: Set codespell version to avoid breakage (MarcoFalke)
#14398 Don’t access out of bounds array index: array[sizeof(array)] (Empact)
#14419 Remove rpc_zmq.py (jnewbery)
#14241 appveyor: Script improvement (ken2812221)
#14413 Allow closed RPC handler in assert_start_raises_init_error (ken2812221)
#14324 Run more tests with wallet disabled (MarcoFalke)
#13649 Allow arguments to be forwarded to flake8 in lint-python.sh (jamesob)
#14465 Stop node before removing the notification file (ken2812221)
#14460 Improve ‘CAmount’ tests (hebasto)
#14456 forward timeouts properly in send_blocks_and_test (jamesob)
#14527 Revert “Make qt wallet test compatible with qt4” (MarcoFalke)
#14504 Show the progress of functional tests (isghe)
#14559 appveyor: Enable multiwallet tests (ken2812221)
#13515 travis: Enable qt for all jobs (ken2812221)
#14571 Test that nodes respond to getdata with notfound (MarcoFalke)
#14569 Print dots by default in functional tests (ken2812221)
#14631 Move deterministic address import to setup_nodes (jnewbery)
#14630 test: Remove travis specific code (MarcoFalke)
#14528 travis: Compile once on xenial (MarcoFalke)
#14092 Dry run bench_bitcoin as part make check to allow for quick identification of assertion/sanitizer failures in benchmarking code (practicalswift)
#14664 example_test.py: fixup coinbase height argument, derive number clearly (instagibbs)
#14522 Add invalid P2P message tests (jamesob)
#14619 Fix value display name in test_runner help text (merland)
#14672 Send fewer spam messages in p2p_invalid_messages (jamesob)
#14673 travis: Fail the ubsan travis build in case of newly introduced ubsan errors (practicalswift)
#14665 appveyor: Script improvement part II (ken2812221)
#14365 Add Python dead code linter (vulture) to Travis (practicalswift)
#14693 test_node: get_mem_rss fixups (MarcoFalke)
#14714 util.h: explicitly include required QString header (1Il1)
#14705 travis: Avoid timeout on verify-commits check (MarcoFalke)
#14770 travis: Do not specify sudo in .travis (scravy)
#14719 Check specific reject reasons in feature_block (MarcoFalke)
#14771 Add BOOST_REQUIRE to getters returning optional (MarcoFalke)
#14777 Add regtest for JSON-RPC batch calls (domob1812)
#14764 travis: Run thread sanitizer on unit tests (MarcoFalke)
#14400 Add Benchmark to test input de-duplication worst case (JeremyRubin)
#14812 Fix p2p_invalid_messages on macOS (jamesob)
#14813 Add wallet_encryption error tests (MarcoFalke)
#14820 Fix descriptor_tests not checking ToString output of public descriptors (ryanofsky)
#14794 Add AddressSanitizer (ASan) Travis build (practicalswift)
#14819 Bugfix: test/functional/mempool_accept: Ensure oversize transaction is actually oversize (luke-jr)
#14822 bench: Destroy wallet txs instead of leaking their memory (MarcoFalke)
#14683 Better combine_logs.py behavior (jamesob)
#14231 travis: Save cache even when build or test fail (ken2812221)
#14816 Add CScriptNum decode python implementation in functional suite (instagibbs)
#14861 Modify rpc_bind to conform to #14532 behaviour (dongcarl)
#14864 Run scripted-diff in subshell (dongcarl)
#14795 Allow test_runner command line to receive parameters for each test (marcoagner)
#14788 Possible fix the permission error when the tests open the cookie file (ken2812221)
#14857 wallet_keypool_topup.py: Test for all keypool address types (instagibbs)
#14886 Refactor importmulti tests (jnewbery)
#14908 Removed implicit CTransaction constructor calls from tests and benchmarks (lucash-dev)
#14903 Handle ImportError explicitly, improve comparisons against None (daniel-s-ingram)
#14884 travis: Enforce python 3.4 support through linter (Sjors)
#14940 Add test for truncated pushdata script (MarcoFalke)
#14926 consensus: Check that final transactions are valid (MarcoFalke)
#14937 travis: Fix travis would always be green even if it fail (ken2812221)
#14953 Make g_insecure_rand_ctx thread_local (MarcoFalke)
#14931 mempool: Verify prioritization is dumped correctly (MarcoFalke)
#14935 Test for expected return values when calling functions returning a success code (practicalswift)
#14969 Fix cuckoocache_tests TSAN failure introduced in 14935 (practicalswift)
#14964 Fix race in mempool_accept (MarcoFalke)
#14829 travis: Enable functional tests in the threadsanitizer (tsan) build job (practicalswift)
#14985 Remove thread_local from test_bitcoin (MarcoFalke)
#15005 Bump timeout to run tests in travis thread sanitizer (MarcoFalke)
#15013 Avoid race in p2p_timeouts (MarcoFalke)
#14960 lint/format-strings: Correctly exclude escaped percent symbols (luke-jr)
#14930 pruning: Check that verifychain can be called when pruned (MarcoFalke)
#15022 Upgrade Travis OS to Xenial (gkrizek)
#14738 Fix running wallet_listtransactions.py individually through test_runner.py (kristapsk)
#15026 Rename rpc_timewait to rpc_timeout (MarcoFalke)
#15069 Fix rpc_net.py pong race condition (Empact)
#14790 Allow running rpc_bind.py –nonloopback test without IPv6 (kristapsk)
#14457 add invalid tx templates for use in functional tests (jamesob)
#14855 Correct ineffectual WithOrVersion from transactions_tests (Empact)
#15099 Use std::vector API for construction of test data (domob1812)
#15102 Run invalid_txs.InputMissing test in feature_block (MarcoFalke)
#15059 Add basic test for BIP34 (MarcoFalke)
#15108 Tidy up wallet_importmulti.py (amitiuttarwar)
#15164 Ignore shellcheck warning SC2236 (promag)
#15170 refactor/lint: Add ignored shellcheck suggestions to an array (koalaman)
#14958 Remove race between connecting and shutdown on separate connections (promag)
#15166 Pin shellcheck version (practicalswift)
#15196 Update all subprocess.check_output functions to be Python 3.4 compatible (gkrizek)
#15043 Build fuzz targets into seperate executables (MarcoFalke)
#15276 travis: Compile once on trusty (MarcoFalke)
#15246 Add tests for invalid message headers (MarcoFalke)
#15301 When testing with –usecli, unify RPC arg to cli arg conversion and handle dicts and lists (achow101)
#15247 Use wallet to retrieve raw transactions (MarcoFalke)
#15303 travis: Remove unused functional_tests_config (MarcoFalke)
#15330 Fix race in p2p_invalid_messages (MarcoFalke)
#15324 Make bloom tests deterministic (MarcoFalke)
#15328 travis: Revert “run extended tests once daily” (MarcoFalke)
#15327 Make test updatecoins_simulation_test deterministic (practicalswift)
#14519 add utility to easily profile node performance with perf (jamesob)
#15349 travis: Only exit early if compilation took longer than 30 min (MarcoFalke)
#15350 Drop RPC connection if –usecli (promag)
#15370 test: Remove unused –force option (MarcoFalke)
#14543 minor p2p_sendheaders fix of height in coinbase (instagibbs)
#13787 Test for Windows encoding issue (ken2812221)
#15378 Added missing tests for RPC wallet errors (benthecarman)
#15238 remove some magic mining constants in functional tests (instagibbs)
#15411 travis: Combine –disable-bip70 into existing job (MarcoFalke)
#15295 fuzz: Add test/fuzz/test_runner.py and run it in travis (MarcoFalke)
#15413 Add missing cs_main locks required when accessing pcoinsdbview, pcoinsTip or pblocktree (practicalswift)
#15399 fuzz: Script validation flags (MarcoFalke)
#15410 txindex: interrupt threadGroup before calling destructor (MarcoFalke)
#15397 Remove manual byte editing in wallet_tx_clone func test (instagibbs)
#15415 functional: allow custom cwd, use tmpdir as default (Sjors)
#15404 Remove -txindex to start nodes (amitiuttarwar)
#15439 remove byte.hex() to keep compatibility (AkioNak)
#15419 Always refresh cache to be out of ibd (MarcoFalke)
#15507 Bump timeout on tests that timeout on windows (MarcoFalke)
#15506 appveyor: fix cache issue and reduce dependencies build time (ken2812221)
#15485 add rpc_misc.py, mv test getmemoryinfo, add test mallocinfo (adamjonas)
#15321 Add cs_main lock annotations for mapBlockIndex (MarcoFalke)
#14128 lint: Make sure we read the command line inputs using UTF-8 decoding in python (ken2812221)
#14115 lint: Make all linters work under the default macos dev environment (build-osx.md) (practicalswift)
#15219 lint: Enable python linters via an array (Empact)
Platform support
#13866 utils: Use _wfopen and _wfreopen on windows (ken2812221)
#13886 utils: Run commands using UTF-8 string on windows (ken2812221)
#14192 utils: Convert fs::filesystem_error messages from local multibyte to UTF-8 on windows (ken2812221)
#13877 utils: Make fs::path::string() always return UTF-8 string on windows (ken2812221)
#13883 utils: Convert windows args to UTF-8 string (ken2812221)
#13878 utils: Add fstream wrapper to allow to pass unicode filename on windows (ken2812221)
#14426 utils: Fix broken windows filelock (ken2812221)
#14686 Fix windows build error if --disable-bip70 (ken2812221)
#14922 windows: Set _WIN32_WINNT to 0x0601 (Windows 7) (ken2812221)
#13888 Call unicode API on Windows (ken2812221)
#15468 Use fsbridge::ifstream to fix Windows path issue (ken2812221)
#13734 Drop boost::scoped_array and use wchar_t API explicitly on Windows (ken2812221)
#13884 Enable bdb unicode support for Windows (ken2812221)
Miscellaneous
#13935 contrib: Adjust output to current test format (AkioNak)
#14097 validation: Log FormatStateMessage on ConnectBlock error in ConnectTip (MarcoFalke)
#13724 contrib: Support ARM and RISC-V symbol check (ken2812221)
#13159 Don’t close old debug log file handle prematurely when trying to re-open (on SIGHUP) (practicalswift)
#14186 bitcoin-cli: don’t translate command line options (HashUnlimited)
#14057 logging: Only log using config file path_to_bitcoin.conf message on startup if conf file exists (leishman)
#14164 Update univalue subtree (MarcoFalke)
#14272 init: Remove deprecated args from hidden args (MarcoFalke)
#14494 Error if # is used in rpcpassword in conf (MeshCollider)
#14742 Properly generate salt in rpcauth.py (dongcarl)
#14708 Warn unrecognised sections in the config file (AkioNak)
#14756 Improve rpcauth.py by using argparse and getpass modules (promag)
#14785 scripts: Fix detection of copyright holders (cornelius)
#14831 scripts: Use #!/usr/bin/env bash instead of #!/bin/bash (vim88)
#14869 Scripts: Add trusted key for samuel dobson (laanwj)
#14809 Tools: improve verify-commits.py script (jlopp)
#14624 Some simple improvements to the RNG code (sipa)
#14947 scripts: Remove python 2 import workarounds (practicalswift)
#15087 Error if rpcpassword contains hash in conf sections (MeshCollider)
#14433 Add checksum in gitian build scripts for ossl (TheCharlatan)
#15165 contrib: Allow use of github api authentication in github-merge (laanwj)
#14409 utils and libraries: Make ‘blocksdir’ always net specific (hebasto)
#14839 threads: Fix unitialized members in sched_param (fanquake)
#14955 Switch all RNG code to the built-in PRNG (sipa)
#15258 Scripts and tools: Fix devtools/copyright_header.py to always honor exclusions (Empact)
#12255 Update bitcoin.service to conform to init.md (dongcarl)
#15266 memory: Construct globals on first use (MarcoFalke)
#15347 Fix build after pr 15266 merged (hebasto)
#15351 Update linearize-hashes.py (OverlordQ)
#15358 util: Add setuphelpoptions() (MarcoFalke)
#15216 Scripts and tools: Replace script name with a special parameter (hebasto)
#15250 Use RdSeed when available, and reduce RdRand load (sipa)
#15278 Improve PID file error handling (hebasto)
#15270 Pull leveldb subtree (MarcoFalke)
#15456 Enable PID file creation on WIN (riordant)
#12783 macOS: disable AppNap during sync (krab)
#13910 Log progress while verifying blocks at level 4 (domob1812)
#15124 Fail AppInitMain if either disk space check fails (Empact)
#15117 Fix invalid memory write in case of failing mmap(…) in PosixLockedPageAllocator::AllocateLocked (practicalswift)
#14357 streams: Fix broken streams_vector_reader test. Remove unused seek(size_t)
#11640 Make LOCK, LOCK2, TRY_LOCK work with CWaitableCriticalSection (ryanofsky)
#14074 Use std::unordered_set instead of set in blockfilter interface (jimpo)
#15275 Add gitian PGP key for hebasto (hebasto)
Documentation
#14120 Notes about control port and read access to cookie (JBaczuk)
#14135 correct GetDifficulty doc after #13288 (fanquake)
#14013 Add new regtest ports in man following #10825 ports reattributions (ariard)
#14149 Remove misleading checkpoints comment in CMainParams (MarcoFalke)
#14153 Add disable-wallet section to OSX build instructions, update line in Unix instructions (bitstein)
#13662 Explain when reindex-chainstate can be used instead of reindex (Sjors)
#14207 -help-debug implies -help (laanwj)
#14213 Fix reference to lint-locale-dependence.sh (hebasto)
#14206 Document -checklevel levels (laanwj)
#14217 Add GitHub PR template (MarcoFalke)
#14331 doxygen: Fix member comments (MarcoFalke)
#14264 Split depends installation instructions per arch (MarcoFalke)
#14393 Add missing apt-get install (poiuty)
#14428 Fix macOS files description in qt/README.md (hebasto)
#14390 release process: RPC documentation (karel-3d)
#14472 getblocktemplate: use SegWit in example (Sjors)
#14497 Add doc/bitcoin-conf.md (hebasto)
#14526 Document lint tests (fanquake)
#14511 Remove explicit storage requirement from README.md (merland)
#14600 Clarify commit message guidelines (merland)
#14617 FreeBSD: Document Python 3 requirement for ‘gmake check’ (murrayn)
#14592 Add external interface consistency guarantees (MarcoFalke)
#14625 Make clear function argument case in dev notes (dongcarl)
#14515 Update OpenBSD build guide for 6.4 (fanquake)
#14436 Add comment explaining recentRejects-DoS behavior (jamesob)
#14684 conf: Remove deprecated options from docs, Other cleanup (MarcoFalke)
#14731 Improve scripted-diff developer docs (dongcarl)
#14778 A few minor formatting fixes and clarifications to descriptors.md (jnewbery)
#14448 Clarify rpcwallet flag url change (JBaczuk)
#14808 Clarify RPC rawtransaction documentation (jlopp)
#14804 Less confusing documentation for torpassword (fanquake)
#14848 Fix broken Gmane URL in security-check.py (cyounkins-bot)
#14882 developer-notes.md: Point out that UniValue deviates from upstream (Sjors)
#14909 Update minimum required Qt (fanquake)
#14914 Add nice table to files.md (emilengler)
#14741 Indicate -rpcauth option password hashing alg (dongcarl)
#14950 Add NSIS setup/install steps to windows docs (fanquake)
#13930 Better explain GetAncestor check for m_failed_blocks in AcceptBlockHeader (Sjors)
#14973 Improve Windows native build instructions (murrayn)
#15073 Botbot.me (IRC logs) not available anymore (anduck)
#15038 Get more info about GUI-related issue on Linux (hebasto)
#14832 Add more Doxygen information to Developer Notes (ch4ot1c)
#15128 Fix download link in doc/README.md (merland)
#15127 Clarifying testing instructions (benthecarman)
#15132 Add FreeBSD build notes link to doc/README.md (fanquake)
#15173 Explain what .python-version does (Sjors)
#15223 Add information about security to the JSON-RPC doc (harding)
#15249 Update python docs to reflect that wildcard imports are disallowed (Empact)
#15176 Get rid of badly named doc/README_osx.md (merland)
#15272 Correct logging return type and RPC example (fanquake)
#15244 Gdb attaching to process during tests has non-sudo solution (instagibbs)
#15332 Small updates to getrawtransaction description (amitiuttarwar)
#15354 Add missing bitcoin-wallet tool manpages (MarcoFalke)
#15343 netaddress: Make IPv4 loopback comment more descriptive (dongcarl)
#15353 Minor textual improvements in translation_strings_policy.md (merland)
#15426 importmulti: add missing description of keypool option (harding)
#15425 Add missing newline to listunspent help for witnessScript (harding)
#15348 Add separate productivity notes document (dongcarl)
#15416 Update FreeBSD build guide for 12.0 (fanquake)
#15222 Add info about factors that affect dependency list (merland)
#13676 Explain that mempool memory is added to -dbcache (Sjors)
#15273 Slight tweak to the verify-commits script directions (droark)
#15477 Remove misleading hint in getrawtransaction (MarcoFalke)
#15489 Update release process for snap package (MarcoFalke)
#15524 doc: Remove berkeleydb PPA from linux build instructions (MarcoFalke)
#15559 Correct analyzepsbt rpc doc (fanquake)
#15194 Add comment describing fDisconnect behavior (dongcarl)
#15754 getrpcinfo docs (benthecarman)
#15763 Update bips.md for 0.18.0 (sipa)
#15757 List new RPCs in psbt.md and descriptors.md (sipa)
#15765 correct bitcoinconsensus_version in shared-libraries.md (fanquake)
#15792 describe onlynet option in doc/tor.md (jonatack)
#15802 mention creating application support bitcoin folder on OSX (JimmyMow)
#15799 Clarify RPC versioning (MarcoFalke)
Credits
Thanks to everyone who directly contributed to this release:

1Il1
251
Aaron Clauson
Adam Jonas
Akio Nakamura
Alexander Leishman
Alexey Ivanov
Alexey Poghilenkov
Amir Abrams
Amiti Uttarwar
Andrew Chow
andrewtoth
Anthony Towns
Antoine Le Calvez
Antoine Riard
Antti Majakivi
araspitzu
Arvid Norberg
Ben Carman
Ben Woosley
benthecarman
bitcoinhodler
Carl Dong
Chakib Benziane
Chris Moore
Chris Stewart
chris-belcher
Chun Kuan Lee
Cornelius Schumacher
Cory Fields
Craig Younkins
Cristian Mircea Messel
Damian Mee
Daniel Ingram
Daniel Kraft
David A. Harding
DesWurstes
dexX7
Dimitri Deijs
Dimitris Apostolou
Douglas Roark
DrahtBot
Emanuele Cisbani
Emil Engler
Eric Scrivner
fridokus
Gal Buki
Gleb Naumenko
Glenn Willen
Graham Krizek
Gregory Maxwell
Gregory Sanders
gustavonalle
Harry Moreno
Hennadii Stepanov
Isidoro Ghezzi
Jack Mallers
James Hilliard
James O’Beirne
Jameson Lopp
Jeremy Rubin
Jesse Cohen
Jim Posen
John Newbery
Jon Layton
Jonas Schnelli
João Barbosa
Jordan Baczuk
Jorge Timón
Julian Fleischer
Justin Turner Arthur
Karel Bílek
Karl-Johan Alm
Kaz Wesley
ken2812221
Kostiantyn Stepaniuk
Kristaps Kaupe
Lawrence Nahum
Lenny Maiorani
liuyujun
lucash-dev
luciana
Luke Dashjr
marcaiaf
marcoagner
MarcoFalke
Martin Erlandsson
Marty Jones
Mason Simon
Michael Ford
Michael Goldstein
Michael Polzer
Mitchell Cash
mruddy
Murray Nesbitt
OverlordQ
Patrick Strateman
Pierre Rochard
Pieter Wuille
poiuty
practicalswift
priscoan
qubenix
riordant
Russell Yanofsky
Samuel Dobson
sanket1729
Sjors Provoost
Stephan Oeste
Steven Roose
Suhas Daftuar
TheCharlatan
Tim Ruffing
Vidar Holen
vim88
Walter
whythat
Wladimir J. van der Laan
Zain Iqbal Allarakhia
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.18.1 released
9 August 2019

How to Upgrade
Compatibility
Known issues
0.18.1 change log
- {:.}
P2P protocol and network code
- {:.}
Wallet
- {:.}
RPC and other APIs
- {:.}
GUI
- {:.}
Build system
- {:.}
Tests and QA
- {:.}
Documentation
- {:.}
Miscellaneous
Credits
Bitcoin Core version 0.18.1 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.18.1/

This is a new minor version release, including new features, various bug fixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

The first time you run version 0.15.0 or newer, your chainstate database will be converted to a new format, which will take anywhere from a few minutes to half an hour, depending on the speed of your machine.

Note that the block database format also changed in version 0.8.0 and there is no automatic upgrade code from before version 0.8 to version 0.15.0 or later. Upgrading directly from 0.7.x and earlier without redownloading the blockchain is not supported. However, as usual, old wallet versions are still supported.

Compatibility
Bitcoin Core is supported and extensively tested on operating systems using the Linux kernel, macOS 10.10+, and Windows 7 and newer. It is not recommended to use Bitcoin Core on unsupported systems.

Bitcoin Core should also work on most other Unix-like systems but is not as frequently tested on them.

From 0.17.0 onwards, macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn’t support versions of macOS older than 10.10. Additionally, Bitcoin Core does not yet change appearance when macOS “dark mode” is activated.

Known issues
Wallet GUI
For advanced users who have both (1) enabled coin control features, and (2) are using multiple wallets loaded at the same time: The coin control input selection dialog can erroneously retain wrong-wallet state when switching wallets using the dropdown menu. For now, it is recommended not to use coin control features with multiple wallets loaded.

0.18.1 change log
P2P protocol and network code
#15990 Add tests and documentation for blocksonly (MarcoFalke)
#16021 Avoid logging transaction decode errors to stderr (MarcoFalke)
#16405 fix: tor: Call event_base_loopbreak from the event’s callback (promag)
#16412 Make poll in InterruptibleRecv only filter for POLLIN events (tecnovert)
Wallet
#15913 Add -ignorepartialspends to list of ignored wallet options (luke-jr)
RPC and other APIs
#15991 Bugfix: fix pruneblockchain returned prune height (jonasschnelli)
#15899 Document iswitness flag and fix bug in converttopsbt (MarcoFalke)
#16026 Ensure that uncompressed public keys in a multisig always returns a legacy address (achow101)
#14039 Disallow extended encoding for non-witness transactions (sipa)
#16210 add 2nd arg to signrawtransactionwithkey examples (dooglus)
#16250 signrawtransactionwithkey: report error when missing redeemScript/witnessScript (ajtowns)
GUI
#16044 fix the bug of OPEN CONFIGURATION FILE on Mac (shannon1916)
#15957 Show “No wallets available” in open menu instead of nothing (meshcollider)
#16118 Enable open wallet menu on setWalletController (promag)
#16135 Set progressDialog to nullptr (promag)
#16231 Fix open wallet menu initialization order (promag)
#16254 Set AA_EnableHighDpiScaling attribute early (hebasto)
#16122 Enable console line edit on setClientModel (promag)
#16348 Assert QMetaObject::invokeMethod result (promag)
Build system
#15985 Add test for GCC bug 90348 (sipa)
#15947 Install bitcoin-wallet manpage (domob1812)
#15983 build with -fstack-reuse=none (MarcoFalke)
Tests and QA
#15826 Pure python EC (sipa)
#15893 Add test for superfluous witness record in deserialization (instagibbs)
#14818 Bugfix: test/functional/rpc_psbt: Remove check for specific error message that depends on uncertain assumptions (luke-jr)
#15831 Add test that addmultisigaddress fails for watchonly addresses (MarcoFalke)
Documentation
#15890 Remove text about txes always relayed from -whitelist (harding)
Miscellaneous
#16095 Catch by reference not value in wallettool (kristapsk)
#16205 Replace fprintf with tfm::format (MarcoFalke)
Credits
Thanks to everyone who directly contributed to this release:

Andrew Chow
Anthony Towns
Chris Moore
Daniel Kraft
David A. Harding
fanquake
Gregory Sanders
Hennadii Stepanov
John Newbery
Jonas Schnelli
João Barbosa
Kristaps Kaupe
Luke Dashjr
MarcoFalke
MeshCollider
Pieter Wuille
shannon1916
tecnovert
Wladimir J. van der Laan
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.19.0.1 released
24 November 2019

How to Upgrade
Compatibility
Notable changes
Low-level changes
0.19.0 change log
- {:.}
Consensus
- {:.}
Policy
- {:.}
Block and transaction handling
- {:.}
P2P protocol and network code
- {:.}
Wallet
- {:.}
RPC and other APIs
- {:.}
GUI
- {:.}
Build system
- {:.}
Tests and QA
- {:.}
Miscellaneous
- {:.}
Documentation
Credits
Bitcoin Core version 0.19.0.1 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.19.0.1/

This release includes new features, various bug fixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

Upgrading directly from a version of Bitcoin Core that has reached its EOL is possible, but might take some time if the datadir needs to be migrated. Old wallet versions of Bitcoin Core are generally supported.

Compatibility
Bitcoin Core is supported and extensively tested on operating systems using the Linux kernel, macOS 10.10+, and Windows 7 and newer. It is not recommended to use Bitcoin Core on unsupported systems.

Bitcoin Core should also work on most other Unix-like systems but is not as frequently tested on them.

From 0.17.0 onwards, macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn’t support versions of macOS older than 10.10. Additionally, Bitcoin Core does not yet change appearance when macOS “dark mode” is activated.

Users running macOS Catalina may need to “right-click” and then choose “Open” to open the Bitcoin Core .dmg. This is due to new signing requirements imposed by Apple, which the Bitcoin Core project does not yet adhere too.

Notable changes
New user documentation
Reduce memory suggests configuration tweaks for running Bitcoin Core on systems with limited memory. (#16339)
New RPCs
getbalances returns an object with all balances (mine, untrusted_pending and immature). Please refer to the RPC help of getbalances for details. The new RPC is intended to replace getbalance, getunconfirmedbalance, and the balance fields in getwalletinfo. These old calls and fields may be removed in a future version. (#15930, #16239)

setwalletflag sets and unsets wallet flags that enable or disable features specific to that existing wallet, such as the new avoid_reuse feature documented elsewhere in these release notes. (#13756)

getblockfilter gets the BIP158 filter for the specified block. This RPC is only enabled if block filters have been created using the -blockfilterindex configuration option. (#14121)

New settings
-blockfilterindex enables the creation of BIP158 block filters for the entire blockchain. Filters will be created in the background and currently use about 4 GiB of space. Note: this version of Bitcoin Core does not serve block filters over the P2P network, although the local user may obtain block filters using the getblockfilter RPC. (#14121)
Updated settings
whitebind and whitelist now accept a list of permissions to provide peers connecting using the indicated interfaces or IP addresses. If no permissions are specified with an address or CIDR network, the implicit default permissions are the same as previous releases. See the bitcoind -help output for these two options for details about the available permissions. (#16248)

Users setting custom dbcache values can increase their setting slightly without using any more real memory. Recent changes reduced the memory use by about 9% and made chainstate accounting more accurate (it was underestimating the use of memory before). For example, if you set a value of “450” before, you may now set a value of “500” to use about the same real amount of memory. (#16957)

Updated RPCs
Note: some low-level RPC changes mainly useful for testing are described in the Low-level Changes section below.

sendmany no longer has a minconf argument. This argument was not well-specified and would lead to RPC errors even when the wallet’s coin selection succeeded. Users who want to influence coin selection can use the existing -spendzeroconfchange, -limitancestorcount, -limitdescendantcount and -walletrejectlongchains configuration arguments. (#15596)

getbalance and sendtoaddress, plus the new RPCs getbalances and createwallet, now accept an “avoid_reuse” parameter that controls whether already used addresses should be included in the operation. Additionally, sendtoaddress will avoid partial spends when avoid_reuse is enabled even if this feature is not already enabled via the -avoidpartialspends command line flag because not doing so would risk using up the “wrong” UTXO for an address reuse case. (#13756)

RPCs which have an include_watchonly argument or includeWatching option now default to true for watch-only wallets. Affected RPCs are: getbalance, listreceivedbyaddress, listreceivedbylabel, listtransactions, listsinceblock, gettransaction, walletcreatefundedpsbt, and fundrawtransaction. (#16383)

listunspent now returns a “reused” bool for each output if the wallet flag “avoid_reuse” is enabled. (#13756)

getblockstats now uses BlockUndo data instead of the transaction index, making it much faster, no longer dependent on the -txindex configuration option, and functional for all non-pruned blocks. (#14802)

utxoupdatepsbt now accepts a descriptors parameter that will fill out input and output scripts and keys when known. P2SH-witness inputs will be filled in from the UTXO set when a descriptor is provided that shows they’re spending segwit outputs. See the RPC help text for full details. (#15427)

sendrawtransaction and testmempoolaccept no longer accept a allowhighfees parameter to fail mempool acceptance if the transaction fee exceeds the value of the configuration option -maxtxfee. Now there is a hardcoded default maximum feerate that can be changed when calling either RPC using a maxfeerate parameter. (#15620)

getmempoolancestors, getmempooldescendants, getmempoolentry, and getrawmempool no longer return a size field unless the configuration option -deprecatedrpc=size is used. Instead a new vsize field is returned with the transaction’s virtual size (consistent with other RPCs such as getrawtransaction). (#15637)

getwalletinfo now includes a scanning field that is either false (no scanning) or an object with information about the duration and progress of the wallet’s scanning historical blocks for transactions affecting its balances. (#15730)

gettransaction now accepts a third (boolean) argument verbose. If set to true, a new decoded field will be added to the response containing the decoded transaction. This field is equivalent to RPC decoderawtransaction, or RPC getrawtransaction when verbose is passed. (#16185, #16866, #16873)

createwallet accepts a new passphrase parameter. If set, this will create the new wallet encrypted with the given passphrase. If unset (the default) or set to an empty string, no encryption will be used. (#16394)

getchaintxstats RPC now returns the additional key of window_final_block_height. (#16695)

getmempoolentry now provides a weight field containing the transaction weight as defined in BIP141. (#16647)

The getnetworkinfo and getpeerinfo commands now contain a new field with decoded network service flags. (#16786)

getdescriptorinfo now returns an additional checksum field containing the checksum for the unmodified descriptor provided by the user (that is, before the descriptor is normalized for the descriptor field). (#15986)

joinpsbts now shuffles the order of the inputs and outputs of the resulting joined PSBT. Previously, inputs and outputs were added in the order PSBTs were provided. This made it easy to correlate inputs to outputs, representing a privacy leak. (#16512)

walletcreatefundedpsbt now signals BIP125 Replace-by-Fee if the -walletrbf configuration option is set to true. (#15911)

GUI changes
The GUI wallet now provides bech32 addresses by default. The user may change the address type during invoice generation using a GUI toggle, or the default address type may be changed with the -addresstype configuration option. (#15711, #16497)

In 0.18.0, a ./configure flag was introduced to allow disabling BIP70 support in the GUI (support was enabled by default). In 0.19.0, this flag is now disabled by default. If you want to compile Bitcoin Core with BIP70 support in the GUI, you can pass --enable-bip70 to ./configure. (#15584)

Deprecated or removed configuration options
-mempoolreplacement is removed, although default node behavior remains the same. This option previously allowed the user to prevent the node from accepting or relaying BIP125 transaction replacements. This is different from the remaining configuration option -walletrbf. (#16171)
Deprecated or removed RPCs
bumpfee no longer accepts a totalFee option unless the configuration parameter deprecatedrpc=totalFee is specified. This parameter will be fully removed in a subsequent release. (#15996)

bumpfee has a new fee_rate option as a replacement for the deprecated totalFee. (#16727)

generate is now removed after being deprecated in Bitcoin Core 0.18. Use the generatetoaddress RPC instead. (#15492)

P2P changes
BIP 61 reject messages were deprecated in v0.18. They are now disabled by default, but can be enabled by setting the -enablebip61 command line option. BIP 61 reject messages will be removed entirely in a future version of Bitcoin Core. (#14054)

To eliminate well-known denial-of-service vectors in Bitcoin Core, especially for nodes with spinning disks, the default value for the -peerbloomfilters configuration option has been changed to false. This prevents Bitcoin Core from sending the BIP111 NODE_BLOOM service flag, accepting BIP37 bloom filters, or serving merkle blocks or transactions matching a bloom filter. Users who still want to provide bloom filter support may either set the configuration option to true to re-enable both BIP111 and BIP37 support or enable just BIP37 support for specific peers using the updated -whitelist and -whitebind configuration options described elsewhere in these release notes. For the near future, lightweight clients using public BIP111/BIP37 nodes should still be able to connect to older versions of Bitcoin Core and nodes that have manually enabled BIP37 support, but developers of such software should consider migrating to either using specific BIP37 nodes or an alternative transaction filtering system. (#16152)

By default, Bitcoin Core will now make two additional outbound connections that are exclusively used for block-relay. No transactions or addr messages will be processed on these connections. These connections are designed to add little additional memory or bandwidth resource requirements but should make some partitioning attacks more difficult to carry out. (#15759)

Miscellaneous CLI Changes
The testnet field in bitcoin-cli -getinfo has been renamed to chain and now returns the current network name as defined in BIP70 (main, test, regtest). (#15566)
Low-level changes
RPC
getblockchaininfo no longer returns a bip9_softforks object. Instead, information has been moved into the softforks object and an additional type field describes how Bitcoin Core determines whether that soft fork is active (e.g. BIP9 or BIP90). See the RPC help for details. (#16060)

getblocktemplate no longer returns a rules array containing CSV and segwit (the BIP9 deployments that are currently in active state). (#16060)

getrpcinfo now returns a logpath field with the path to debug.log. (#15483)

Tests
The regression test chain enabled by the -regtest command line flag now requires transactions to not violate standard policy by default. This is the same default used for mainnet and makes it easier to test mainnet behavior on regtest. Note that the testnet still allows non-standard txs by default and that the policy can be locally adjusted with the -acceptnonstdtxn command line flag for both test chains. (#15891)
Configuration
A setting specified in the default section but not also specified in a network-specific section (e.g. testnet) will now produce an error preventing startup instead of just a warning unless the network is mainnet. This prevents settings intended for mainnet from being applied to testnet or regtest. (#15629)

On platforms supporting thread_local, log lines can be prefixed with the name of the thread that caused the log. To enable this behavior, use -logthreadnames=1. (#15849)

Network
When fetching a transaction announced by multiple peers, previous versions of Bitcoin Core would sequentially attempt to download the transaction from each announcing peer until the transaction is received, in the order that those peers’ announcements were received. In this release, the download logic has changed to randomize the fetch order across peers and to prefer sending download requests to outbound peers over inbound peers. This fixes an issue where inbound peers could prevent a node from getting a transaction. (#14897, #15834)

If a Tor hidden service is being used, Bitcoin Core will be bound to the standard port 8333 even if a different port is configured for clearnet connections. This prevents leaking node identity through use of identical non-default port numbers. (#15651)

Mempool and transaction relay
Allows one extra single-ancestor transaction per package. Previously, if a transaction in the mempool had 25 descendants, or it and all of its descendants were over 101,000 vbytes, any newly-received transaction that was also a descendant would be ignored. Now, one extra descendant will be allowed provided it is an immediate descendant (child) and the child’s size is 10,000 vbytes or less. This makes it possible for two-party contract protocols such as Lightning Network to give each participant an output they can spend immediately for Child-Pays-For-Parent (CPFP) fee bumping without allowing one malicious participant to fill the entire package and thus prevent the other participant from spending their output. (#15681)

Transactions with outputs paying v1 to v16 witness versions (future segwit versions) are now accepted into the mempool, relayed, and mined. Attempting to spend those outputs remains forbidden by policy (“non-standard”). When this change has been widely deployed, wallets and services can accept any valid bech32 Bitcoin address without concern that transactions paying future segwit versions will become stuck in an unconfirmed state. (#15846)

Legacy transactions (transactions with no segwit inputs) must now be sent using the legacy encoding format, enforcing the rule specified in BIP144. (#14039)

Wallet
When in pruned mode, a rescan that was triggered by an importwallet, importpubkey, importaddress, or importprivkey RPC will only fail when blocks have been pruned. Previously it would fail when -prune has been set. This change allows setting -prune to a high value (e.g. the disk size) without the calls to any of the import RPCs failing until the first block is pruned. (#15870)

When creating a transaction with a fee above -maxtxfee (default 0.1 BTC), the RPC commands walletcreatefundedpsbt and fundrawtransaction will now fail instead of rounding down the fee. Be aware that the feeRate argument is specified in BTC per 1,000 vbytes, not satoshi per vbyte. (#16257)

A new wallet flag avoid_reuse has been added (default off). When enabled, a wallet will distinguish between used and unused addresses, and default to not use the former in coin selection. When setting this flag on an existing wallet, rescanning the blockchain is required to correctly mark previously used destinations. Together with “avoid partial spends” (added in Bitcoin Core v0.17.0), this can eliminate a serious privacy issue where a malicious user can track spends by sending small payments to a previously-paid address that would then be included with unrelated inputs in future payments. (#13756)

Build system changes
Python >=3.5 is now required by all aspects of the project. This includes the build systems, test framework and linters. The previously supported minimum (3.4), was EOL in March 2019. (#14954)

The minimum supported miniUPnPc API version is set to 10. This keeps compatibility with Ubuntu 16.04 LTS and Debian 8 libminiupnpc-dev packages. Please note, on Debian this package is still vulnerable to CVE-2017-8798 (in jessie only) and CVE-2017-1000494 (both in jessie and in stretch). (#15993)

0.19.0 change log
Consensus
#16128 Delete error-prone CScript constructor only used with FindAndDelete (instagibbs)
#16060 Bury bip9 deployments (jnewbery)
Policy
#15557 Enhance bumpfee to include inputs when targeting a feerate (instagibbs)
#15846 Make sending to future native witness outputs standard (sipa)
Block and transaction handling
#15632 Remove ResendWalletTransactions from the Validation Interface (jnewbery)
#14121 Index for BIP 157 block filters (jimpo)
#15141 Rewrite DoS interface between validation and net_processing (sdaftuar)
#15880 utils and libraries: Replace deprecated Boost Filesystem functions (hebasto)
#15971 validation: Add compile-time checking for negative locking requirement in LimitValidationInterfaceQueue (practicalswift)
#15999 init: Remove dead code in LoadChainTip (MarcoFalke)
#16015 validation: Hold cs_main when reading chainActive in RewindBlockIndex (practicalswift)
#16056 remove unused magic number from consistency check (instagibbs)
#16171 Remove -mempoolreplacement to prevent needless block prop slowness (TheBlueMatt)
#15894 Remove duplicated “Error: “ prefix in logs (hebasto)
#14193 validation: Add missing mempool locks (MarcoFalke)
#15681 Allow one extra single-ancestor transaction per package (TheBlueMatt)
#15305 [validation] Crash if disconnecting a block fails (sdaftuar)
#16471 log correct messages when CPFP fails (jnewbery)
#16433 txmempool: Remove unused default value MemPoolRemovalReason::UNKNOWN (MarcoFalke)
#13868 Remove unused fScriptChecks parameter from CheckInputs (Empact)
#16421 Conservatively accept RBF bumps bumping one tx at the package limits (TheBlueMatt)
#16854 Prevent UpdateTip log message from being broken up (stevenroose)
#16956 validation: Make GetWitnessCommitmentIndex public (MarcoFalke)
#16713 Ignore old versionbit activations to avoid ‘unknown softforks’ warning (jnewbery)
#17002 chainparams: Bump assumed chain params (MarcoFalke)
#16849 Fix block index inconsistency in InvalidateBlock() (sdaftuar)
P2P protocol and network code
#15597 Generate log entry when blocks messages are received unexpectedly (pstratem)
#15654 Remove unused unsanitized user agent string CNode::strSubVer (MarcoFalke)
#15689 netaddress: Update CNetAddr for ORCHIDv2 (dongcarl)
#15834 Fix transaction relay bugs introduced in #14897 and expire transactions from peer in-flight map (sdaftuar)
#15651 torcontrol: Use the default/standard network port for Tor hidden services, even if the internal port is set differently (luke-jr)
#16188 Document what happens to getdata of unknown type (MarcoFalke)
#15649 Add ChaCha20Poly1305@Bitcoin AEAD (jonasschnelli)
#16152 Disable bloom filtering by default (TheBlueMatt)
#15993 Drop support of the insecure miniUPnPc versions (hebasto)
#16197 Use mockable time for tx download (MarcoFalke)
#16248 Make whitebind/whitelist permissions more flexible (NicolasDorier)
#16618 [Fix] Allow connection of a noban banned peer (NicolasDorier)
#16631 Restore default whitelistrelay to true (NicolasDorier)
#15759 Add 2 outbound block-relay-only connections (sdaftuar)
#15558 Don’t query all DNS seeds at once (sipa)
#16999 0.19 seeds update (laanwj)
Wallet
#15288 Remove wallet -> node global function calls (ryanofsky)
#15491 Improve log output for errors during load (gwillen)
#13541 wallet/rpc: sendrawtransaction maxfeerate (kallewoof)
#15680 Remove resendwallettransactions RPC method (jnewbery)
#15508 Refactor analyzepsbt for use outside RPC code (gwillen)
#15747 Remove plethora of Get*Balance (MarcoFalke)
#15728 Refactor relay transactions (jnewbery)
#15639 bitcoin-wallet tool: Drop libbitcoin_server.a dependency (ryanofsky)
#15853 Remove unused import checkpoints.h (MarcoFalke)
#15780 add cachable amounts for caching credit/debit values (kallewoof)
#15778 Move maxtxfee from node to wallet (jnewbery)
#15901 log on rescan completion (andrewtoth)
#15917 Avoid logging no_such_file_or_directory error (promag)
#15452 Replace CScriptID and CKeyID in CTxDestination with dedicated types (instagibbs)
#15870 Only fail rescan when blocks have actually been pruned (MarcoFalke)
#15006 Add option to create an encrypted wallet (achow101)
#16001 Give WalletModel::UnlockContext move semantics (sipa)
#15741 Batch write imported stuff in importmulti (achow101)
#16144 do not encrypt wallets with disabled private keys (mrwhythat)
#15024 Allow specific private keys to be derived from descriptor (meshcollider)
#13756 “avoid_reuse” wallet flag for improved privacy (kallewoof)
#16226 Move ismine to the wallet module (achow101)
#16239 wallet/rpc: follow-up clean-up/fixes to avoid_reuse (kallewoof)
#16286 refactoring: wallet: Fix GCC 7.4.0 warning (hebasto)
#16257 abort when attempting to fund a transaction above -maxtxfee (Sjors)
#16237 Have the wallet give out destinations instead of keys (achow101)
#16322 Fix -maxtxfee check by moving it to CWallet::CreateTransaction (promag)
#16361 Remove redundant pre-TopUpKeypool check (instagibbs)
#16244 Move wallet creation out of the createwallet rpc into its own function (achow101)
#16227 Refactor CWallet’s inheritance chain (achow101)
#16208 Consume ReserveDestination on successful CreateTransaction (instagibbs)
#16301 Use CWallet::Import* functions in all import* RPCs (achow101)
#16402 Remove wallet settings from chainparams (MarcoFalke)
#16415 Get rid of PendingWalletTx class (ryanofsky)
#15588 Log the actual wallet file version and no longer publicly expose the “version” record (achow101)
#16399 Improve wallet creation (fjahr)
#16475 Enumerate walletdb keys (MarcoFalke)
#15709 Do not add “setting” key as unknown (Bushstar)
#16451 Remove CMerkleTx (jnewbery)
#15906 Move min_depth and max_depth to coin control (amitiuttarwar)
#16502 Drop unused OldKey (promag)
#16394 Allow createwallet to take empty passwords to make unencrypted wallets (achow101)
#15911 Use wallet RBF default for walletcreatefundedpsbt (Sjors)
#16503 Remove p2pEnabled from Chain interface (ariard)
#16557 restore coinbase and confirmed/conflicted checks in SubmitMemoryPoolAndRelay() (jnewbery)
#14934 Descriptor expansion cache clarifications (Sjors)
#16383 rpcwallet: default include_watchonly to true for watchonly wallets (jb55)
#16542 Return more specific errors about invalid descriptors (achow101)
#16572 Fix Char as Bool in Wallet (JeremyRubin)
#16753 extract PubKey from P2PK script with Solver (theStack)
#16716 Use wallet name instead of pointer on unload/release (promag)
#16185 gettransaction: add an argument to decode the transaction (darosior)
#16745 Translate all initErrors in CreateWalletFromFile (MarcoFalke)
#16792 Assert that the HRP is lowercase in Bech32::Encode (meshcollider)
#16624 encapsulate transactions state (ariard)
#16830 Cleanup walletinitinterface.h (hebasto)
#16796 Fix segfault in CreateWalletFromFile (MarcoFalke)
#16866 Rename ‘decode’ argument in gettransaction method to ‘verbose’ (jnewbery)
#16727 Explicit feerate for bumpfee (instagibbs)
#16609 descriptor: fix missed m_script_arg arg renaming in #14934 (fanquake)
RPC and other APIs
#15492 remove deprecated generate method (Sjors)
#15566 cli: Replace testnet with chain and return network name as per bip70 (fanquake)
#15564 cli: Remove duplicate wallet fields from -getinfo (fanquake)
#15642 Remove deprecated rpc warnings (jnewbery)
#15637 Rename size to vsize in mempool related calls (fanquake)
#15620 Uncouple non-wallet rpcs from maxTxFee global (MarcoFalke)
#15616 Clarify decodescript RPCResult doc (MarcoFalke)
#15669 Fix help text for signtransactionwithXXX (torkelrogstad)
#15596 Ignore sendmany::minconf as dummy value (MarcoFalke)
#15755 remove unused var in rawtransaction.cpp (Bushstar)
#15746 RPCHelpMan: Always name dictionary keys (MarcoFalke)
#15748 remove dead mining code (jnewbery)
#15751 Speed up deriveaddresses for large ranges (sipa)
#15770 Validate maxfeerate with AmountFromValue (promag)
#15474 rest/rpc: Make mempoolinfo atomic (promag)
#15463 Speedup getaddressesbylabel (promag)
#15784 Remove dependency on interfaces::Chain in SignTransaction (ariard)
#15323 Expose g_is_mempool_loaded via getmempoolinfo (Empact)
#15932 Serialize in getblock without cs_main (MarcoFalke)
#15930 Add balances RPC (MarcoFalke)
#15730 Show scanning details in getwalletinfo (promag)
#14802 faster getblockstats using BlockUndo data (FelixWeis)
#14984 Speedup getrawmempool when verbose=true (promag)
#16071 Hint for importmulti in help output of importpubkey and importaddress (kristapsk)
#16063 Mention getwalletinfo where a rescan is triggered (promag)
#16024 deriveaddresses: Correction of descriptor checksum in RPC example (ccapo)
#16217 getrawtransaction: inform about blockhash argument when lookup fails (darosior)
#15427 Add support for descriptors to utxoupdatepsbt (sipa)
#16262 Allow shutdown while in generateblocks (pstratem)
#15483 Adding a ‘logpath’ entry to getrpcinfo (darosior)
#16325 Clarify that block count means height excl genesis (MarcoFalke)
#16326 add new utxoupdatepsbt arguments to the CRPCCommand and CPRCCvertParam tables (jnewbery)
#16332 Add logpath description for getrpcinfo (instagibbs)
#16240 JSONRPCRequest-aware RPCHelpMan (kallewoof)
#15996 Deprecate totalfee argument in bumpfee (instagibbs)
#16467 sendrawtransaction help privacy note (jonatack)
#16596 Fix getblocktemplate CLI example (emilengler)
#15986 Add checksum to getdescriptorinfo (sipa)
#16647 add weight to getmempoolentry output (fanquake)
#16695 Add window final block height to getchaintxstats (leto)
#16798 Refactor rawtransaction_util’s SignTransaction to separate prevtx parsing (achow101)
#16285 Improve scantxoutset response and help message (promag)
#16725 Don’t show addresses or P2PK in decoderawtransaction (NicolasDorier)
#16787 Human readable network services (darosior)
#16251 Improve signrawtransaction error reporting (ajtowns)
#16873 fix regression in gettransaction (jonatack)
#16512 Shuffle inputs and outputs after joining psbts (achow101)
#16521 Use the default maxfeerate value as BTC/kB (Remagpie)
#16817 Fix casing in getblockchaininfo to be inline with other fields (dangershony)
#17131 fix -rpcclienttimeout 0 option (fjahr)
#17249 Add missing deque include to fix build (jbeich)
#17368 cli: fix -getinfo output when compiled with no wallet (fanquake)
GUI
#15464 Drop unused return values in WalletFrame (promag)
#15614 Defer removeAndDeleteWallet when no modal widget is active (promag)
#15711 Generate bech32 addresses by default (MarcoFalke)
#15829 update request payment button text and tab description (fanquake)
#15874 Resolve the qt/guiutil <-> qt/optionsmodel CD (251Labs)
#15371 Uppercase bech32 addresses in qr codes (benthecarman)
#15928 Move QRImageWidget to its own file-pair (luke-jr)
#16113 move coin control “OK” to the right hand side of the dialog (fanquake)
#16090 Add vertical spacer to peer detail widget (JosuGZ)
#15886 qt, wallet: Revamp SendConfirmationDialog (hebasto)
#16263 Use qInfo() if no error occurs (hebasto)
#16153 Add antialiasing to traffic graph widget (JosuGZ)
#16350 Remove unused guard (hebasto)
#16106 Sort wallets in open wallet menu (promag)
#16291 Stop translating PACKAGE_NAME (MarcoFalke)
#16380 Remove unused bits from the service flags enum (MarcoFalke)
#16379 Fix autostart filenames on Linux for testnet/regtest (hebasto)
#16366 init: Use InitError for all errors in bitcoind/qt (MarcoFalke)
#16436 Do not create payment server if -disablewallet option provided (hebasto)
#16514 Remove unused RPCConsole::tabFocus (promag)
#16497 Generate bech32 addresses by default (take 2, fixup) (MarcoFalke)
#16349 Remove redundant WalletController::addWallet slot (hebasto)
#16578 Do not pass in command line arguments to QApplication (achow101)
#16612 Remove menu icons (laanwj)
#16677 remove unused PlatformStyle::TextColorIcon (fanquake)
#16694 Ensure transaction send error is always visible (fanquake)
#14879 Add warning messages to the debug window (hebasto)
#16708 Replace obsolete functions of QSslSocket (hebasto)
#16701 Replace functions deprecated in Qt 5.13 (hebasto)
#16706 Replace deprecated QSignalMapper by lambda expressions (hebasto)
#16707 Remove obsolete QModelIndex::child() (hebasto)
#16758 Replace QFontMetrics::width() with TextWidth() (hebasto)
#16760 Change uninstall icon on Windows (GChuf)
#16720 Replace objc_msgSend() function calls with the native Objective-C syntax (hebasto)
#16788 Update transifex slug for 0.19 (laanwj)
#15450 Create wallet menu option (achow101)
#16735 Remove unused menu items for Windows and Linux (GChuf)
#16826 Do additional character escaping for wallet names and address labels (achow101)
#15529 Add Qt programs to msvc build (updated, no code changes) (sipsorcery)
#16714 add prune to intro screen with smart default (Sjors)
#16858 advise users not to switch wallets when opening a BIP70 URI (jameshilliard)
#16822 Create wallet menu option follow-ups (jonatack)
#16882 Re-generate translations before 0.19.0 (MarcoFalke)
#16928 Rename address checkbox back to bech32 (MarcoFalke)
#16837 Fix {C{,XX},LD}FLAGS pickup (dongcarl)
#16971 Change default size of intro frame (emilengler)
#16988 Periodic translations update (laanwj)
#16852 When BIP70 is disabled, get PaymentRequest merchant using string search (achow101)
#16952 make sure to update the UI when deleting a transaction (jonasschnelli)
#17031 Prevent processing duplicate payment requests (promag)
#17135 Make polling in ClientModel asynchronous (promag)
#17120 Fix start timer from non QThread (promag)
#17257 disable font antialiasing for QR image address (fanquake)
Build system
#14954 Require python 3.5 (MarcoFalke)
#15580 native_protobuf: avoid system zlib (dongcarl)
#15601 Switch to python3 (take 3) (MarcoFalke)
#15581 Make less assumptions about build env (dongcarl)
#14853 latest RapidCheck (fanquake)
#15446 Improve depends debuggability (dongcarl)
#13788 Fix –disable-asm for newer assembly checks/code (luke-jr)
#12051 add missing debian contrib file to tarball (puchu)
#15919 Remove unused OpenSSL includes to make it more clear where OpenSSL is used (practicalswift)
#15978 .gitignore: Don’t ignore depends patches (dongcarl)
#15939 gitian: Remove windows 32 bit build (MarcoFalke)
#15239 scripts and tools: Move non-linux build source tarballs to “bitcoin-binaries/version” directory (hebasto)
#14047 Add HKDF_HMAC256_L32 and method to negate a private key (jonasschnelli)
#16051 add patch to common dependencies (fanquake)
#16049 switch to secure download of all dependencies (Kemu)
#16059 configure: Fix thread_local detection (dongcarl)
#16089 add ability to skip building zeromq (fanquake)
#15844 Purge libtool archives (dongcarl)
#15461 update to Boost 1.70 (Sjors)
#16141 remove GZIP export from gitian descriptors (fanquake)
#16235 Cleaned up and consolidated msbuild files (no code changes) (sipsorcery)
#16246 MSVC: Fix error in debug mode (Fix #16245) (NicolasDorier)
#16183 xtrans: Configure flags cleanup (dongcarl)
#16258 [MSVC]: Create the config.ini as part of bitcoind build (NicolasDorier)
#16271 remove -Wall from rapidcheck build flags (fanquake)
#16309 [MSVC] allow user level project customization (NicolasDorier)
#16308 [MSVC] Copy build output to src/ automatically after build (NicolasDorier)
#15457 Check std::system for -[alert	block	wallet]notify (Sjors)
#16344 use #if HAVE_SYSTEM instead of defined(HAVE_SYSTEM) (Sjors)
#16352 prune dbus from depends (fanquake)
#16270 expat 2.2.7 (fanquake)
#16408 Prune X packages (dongcarl)
#16386 disable unused Qt features (fanquake)
#16424 Treat -Wswitch as error when –enable-werror (MarcoFalke)
#16441 remove qt libjpeg check from bitcoin_qt.m4 (fanquake)
#16434 Specify AM_CPPFLAGS for ZMQ (domob1812)
#16534 add Qt Creator Makefile.am.user to .gitignore (Bushstar)
#16573 disable building libsecp256k1 benchmarks (fanquake)
#16533 disable libxcb extensions (fanquake)
#16589 Remove unused src/obj-test folder (MarcoFalke)
#16435 autoconf: Sane --enable-debug defaults (dongcarl)
#16622 echo property tests status during build (jonatack)
#16611 Remove src/obj directory from repository (laanwj)
#16371 ignore macOS make deploy artefacts & add them to clean-local (fanquake)
#16654 build: update RapidCheck Makefile (jonatack)
#16370 cleanup package configure flags (fanquake)
#16746 msbuild: Ignore linker warning (sipsorcery)
#16750 msbuild: adds bench_bitcoin to auto generated project files (sipsorcery)
#16810 guix: Remove ssp spec file hack (dongcarl)
#16477 skip deploying plugins we dont use in macdeployqtplus (fanquake)
#16413 Bump QT to LTS release 5.9.8 (THETCR)
#15584 disable BIP70 support by default (fanquake)
#16871 make building protobuf optional in depends (fanquake)
#16879 remove redundant sed patching (fanquake)
#16809 zlib: Move toolchain options to configure (dongcarl)
#15146 Solve SmartOS FD_ZERO build issue (Empact)
#16870 update boost macros to latest upstream for improved error reporting (fanquake)
#16982 Factor out qt translations from build system (laanwj)
#16926 Add OpenSSL termios fix for musl libc (nmarley)
#16927 Refresh ZeroMQ 4.3.1 patch (nmarley)
#17005 Qt version appears only if GUI is being built (ch4ot1c)
#16468 Exclude depends/Makefile in .gitignore (promag)
Tests and QA
#15296 Add script checking for deterministic line coverage in unit tests (practicalswift)
#15338 ci: Build and run tests once on freebsd (MarcoFalke)
#15479 Add .style.yapf (MarcoFalke)
#15534 lint-format-strings: open files sequentially (fix for OS X) (gwillen)
#15504 fuzz: Link BasicTestingSetup (shared with unit tests) (MarcoFalke)
#15473 bench: Benchmark mempooltojson (MarcoFalke)
#15466 Print remaining jobs in test_runner.py (stevenroose)
#15631 mininode: Clearer error message on invalid magic bytes (MarcoFalke)
#15255 Remove travis_wait from lint script (gkrizek)
#15686 make pruning test faster (jnewbery)
#15533 .style.yapf: Set column_limit=160 (MarcoFalke)
#15660 Overhaul p2p_compactblocks.py (sdaftuar)
#15495 Add regtests for HTTP status codes (domob1812)
#15772 Properly log named args in authproxy (MarcoFalke)
#15771 Prevent concurrency issues reading .cookie file (promag)
#15693 travis: Switch to ubuntu keyserver to avoid timeouts (MarcoFalke)
#15629 init: Throw error when network specific config is ignored (MarcoFalke)
#15773 Add BitcoinTestFramework::sync_* methods (MarcoFalke)
#15797 travis: Bump second timeout to 33 minutes, add rationale (MarcoFalke)
#15788 Unify testing setups for fuzz, bench, and unit tests (MarcoFalke)
#15352 Reduce noise level in test_bitcoin output (practicalswift)
#15779 Add wallet_balance benchmark (MarcoFalke)
#15843 fix outdated include in blockfilter_index_tests (jamesob)
#15866 Add missing syncwithvalidationinterfacequeue to wallet_import_rescan (MarcoFalke)
#15697 Make swap_magic_bytes in p2p_invalid_messages atomic (MarcoFalke)
#15895 Avoid re-reading config.ini unnecessarily (luke-jr)
#15896 feature_filelock, interface_bitcoin_cli: Use PACKAGE_NAME in messages rather than hardcoding Bitcoin Core (luke-jr)
#15897 QA/mininode: Send all headers upfront in send_blocks_and_test to avoid sending an unconnected one (luke-jr)
#15696 test_runner: Move feature_pruning to base tests (MarcoFalke)
#15869 Add settings merge test to prevent regresssions (ryanofsky)
#15758 Add further tests to wallet_balance (MarcoFalke)
#15841 combine_logs: append node stderr and stdout if it exists (MarcoFalke)
#15949 test_runner: Move pruning back to extended (MarcoFalke)
#15927 log thread names by default in functional tests (jnewbery)
#15664 change default Python block serialization to witness (instagibbs)
#15988 Add test for ArgsManager::GetChainName (ryanofsky)
#15963 Make random seed logged and settable (jnewbery)
#15943 Fail if RPC has been added without tests (MarcoFalke)
#16036 travis: Run all lint scripts even if one fails (scravy)
#13555 parameterize adjustment period in versionbits_computeblockversion (JBaczuk)
#16079 wallet_balance.py: Prevent edge cases (stevenroose)
#16078 replace tx hash with txid in rawtransaction test (LongShao007)
#16042 Bump MAX_NODES to 12 (MarcoFalke)
#16124 Limit Python linting to files in the repo (practicalswift)
#16143 Mark unit test blockfilter_index_initial_sync as non-deterministic (practicalswift)
#16214 travis: Fix caching issues (MarcoFalke)
#15982 Make msg_block a witness block (MarcoFalke)
#16225 Make coins_tests/updatecoins_simulation_test deterministic (practicalswift)
#16236 fuzz: Log output even if fuzzer failed (MarcoFalke)
#15520 cirrus: Run extended test feature_pruning (MarcoFalke)
#16234 Add test for unknown args (MarcoFalke)
#16207 stop generating lcov coverage when functional tests fail (asood123)
#16252 Log to debug.log in all unit tests (MarcoFalke)
#16289 Add missing ECC_Stop() in GUI rpcnestedtests.cpp (jonasschnelli)
#16278 Remove unused includes (practicalswift)
#16302 Add missing syncwithvalidationinterfacequeue to wallet_balance test (MarcoFalke)
#15538 wallet_bumpfee.py: Make sure coin selection produces change (instagibbs)
#16294 Create at most one testing setup (MarcoFalke)
#16299 bench: Move generated data to a dedicated translation unit (promag)
#16329 Add tests for getblockchaininfo.softforks (MarcoFalke)
#15687 tool wallet test coverage for unexpected writes to wallet (jonatack)
#16267 bench: Benchmark blocktojson (fanatid)
#14505 Add linter to make sure single parameter constructors are marked explicit (practicalswift)
#16338 Disable other targets when enable-fuzz is set (qmma70)
#16334 rpc_users: Also test rpcauth.py with password (dongcarl)
#15282 Replace hard-coded hex tx with class in test framework (stevenroose)
#16390 Add –filter option to test_runner.py (promag)
#15891 Require standard txs in regtest by default (MarcoFalke)
#16374 Enable passing wildcard test names to test runner from root (jonatack)
#16420 Fix race condition in wallet_encryption test (jonasschnelli)
#16422 remove redundant setup in addrman_tests (zenosage)
#16438 travis: Print memory and number of cpus (MarcoFalke)
#16445 Skip flaky p2p_invalid_messages test on macOS (fjahr)
#16459 Fix race condition in example_test.py (sdaftuar)
#16464 Ensure we don’t generate a too-big block in p2sh sigops test (sdaftuar)
#16491 fix deprecated log.warn in feature_dbcrash test (jonatack)
#15134 Switch one of the Travis jobs to an unsigned char environment (-funsigned-char) (practicalswift)
#16505 Changes verbosity of msbuild from quiet to normal in the appveyor script (sipsorcery)
#16293 Make test cases separate functions (MarcoFalke)
#16470 Fail early on disconnect in mininode.wait_for_* (MarcoFalke)
#16277 Suppress output in test_bitcoin for expected errors (gertjaap)
#16493 Fix test failures (MarcoFalke)
#16538 Add missing sync_blocks to feature_pruning (MarcoFalke)
#16509 Adapt test framework for chains other than “regtest” (MarcoFalke)
#16363 Add test for BIP30 duplicate tx (MarcoFalke)
#16535 Explain why -whitelist is used in feature_fee_estimation (MarcoFalke)
#16554 only include and use OpenSSL where it’s actually needed (BIP70) (fanquake)
#16598 Remove confusing hash256 function in util (elichai)
#16595 travis: Use extended 90 minute timeout when available (MarcoFalke)
#16563 Add unit test for AddTimeData (mzumsande)
#16561 Use colors and dots in test_runner.py output only if standard output is a terminal (practicalswift)
#16465 Test p2sh-witness and bech32 in wallet_import_rescan (MarcoFalke)
#16582 Rework ci (Use travis only as fallback env) (MarcoFalke)
#16633 travis: Fix test_runner.py timeouts (MarcoFalke)
#16646 Run tests with UPnP disabled (fanquake)
#16623 ci: Add environment files for all settings (MarcoFalke)
#16656 fix rpc_setban.py race (jonasschnelli)
#16570 Make descriptor tests deterministic (davereikher)
#16404 Test ZMQ notification after chain reorg (promag)
#16726 Avoid common Python default parameter gotcha when mutable dict/list:s are used as default parameter values (practicalswift)
#16739 ci: Pass down $makejobs to test_runner.py, other improvements (MarcoFalke)
#16767 Check for codespell in lint-spelling.sh (kristapsk)
#16768 Make lint-includes.sh work from any directory (kristapsk)
#15257 Scripts and tools: Bump flake8 to 3.7.8 (Empact)
#16804 Remove unused try-block in assert_debug_log (MarcoFalke)
#16850 servicesnames field in getpeerinfo and getnetworkinfo (darosior)
#16551 Test that low difficulty chain fork is rejected (MarcoFalke)
#16737 Establish only one connection between nodes in rpc_invalidateblock (MarcoFalke)
#16845 Add notes on how to generate data/wallets/high_minversion (MarcoFalke)
#16888 Bump timeouts in slow running tests (MarcoFalke)
#16864 Add python bech32 impl round-trip test (instagibbs)
#16865 add some unit tests for merkle.cpp (soroosh-sdi)
#14696 Add explicit references to related CVE’s in p2p_invalid_block test (lucash-dev)
#16907 lint: Add DisabledOpcodeTemplates to whitelist (MarcoFalke)
#16898 Remove connect_nodes_bi (MarcoFalke)
#16917 Move common function assert_approx() into util.py (fridokus)
#16921 Add information on how to add Vulture suppressions (practicalswift)
#16920 Fix extra_args in wallet_import_rescan.py (MarcoFalke)
#16918 Make PORT_MIN in test runner configurable (MarcoFalke)
#16941 travis: Disable feature_block in tsan run due to oom (MarcoFalke)
#16929 follow-up to rpc: default maxfeerate value as BTC/kB (jonatack)
#16959 ci: Set $host before setting fallback values (MarcoFalke)
#16961 Remove python dead code linter (laanwj)
#16931 add unittests for CheckProofOfWork (soroosh-sdi)
#16991 Fix service flag comparison check in rpc_net test (luke-jr) (laanwj)
#16987 Correct docstring param name (jbampton)
#17015 Explain QT_QPA_PLATFORM for gui tests (MarcoFalke)
#17006 Enable UBSan for Travis fuzzing job (practicalswift)
#17086 Fix fs_tests for unknown locales (carnhofdaki)
#15903 appveyor: Write @PACKAGE_NAME@ to config (MarcoFalke)
#16742 test: add executable flag for wallet_watchonly.py (theStack)
#16740 qa: Relax so that the subscriber is ready before publishing zmq messages (#16740)
Miscellaneous
#15335 Fix lack of warning of unrecognized section names (AkioNak)
#15528 contrib: Bump gitian descriptors for 0.19 (MarcoFalke)
#15609 scripts and tools: Set ‘distro’ explicitly (hebasto)
#15519 Add Poly1305 implementation (jonasschnelli)
#15643 contrib: Gh-merge: include acks in merge commit (MarcoFalke)
#15838 scripts and tools: Fetch missing review comments in github-merge.py (nkostoulas)
#15920 lint: Check that all wallet args are hidden (MarcoFalke)
#15849 Thread names in logs and deadlock debug tools (jamesob)
#15650 Handle the result of posix_fallocate system call (lucayepa)
#15766 scripts and tools: Upgrade gitian image before signing (hebasto)
#15512 Add ChaCha20 encryption option (XOR) (jonasschnelli)
#15968 Fix portability issue with pthreads (grim-trigger)
#15970 Utils and libraries: fix static_assert for macro HAVE_THREAD_LOCAL (orientye)
#15863 scripts and tools: Ensure repos are up-to-date in gitian-build.py (hebasto)
#15224 Add RNG strengthening (10ms once every minute) (sipa)
#15840 Contrib scripts: Filter IPv6 by ASN (abitfan)
#13998 Scripts and tools: gitian-build.py improvements and corrections (hebasto)
#15236 scripts and tools: Make –setup command independent (hebasto)
#16114 contrib: Add curl as a required program in gitian-build.py (fanquake)
#16046 util: Add type safe gettime (MarcoFalke)
#15703 Update secp256k1 subtree to latest upstream (sipa)
#16086 contrib: Use newer config.guess & config.sub in install_db4.sh (fanquake)
#16130 Don’t GPG sign intermediate commits with github-merge tool (stevenroose)
#16162 scripts: Add key for michael ford (fanquake) to trusted keys list (fanquake)
#16201 devtools: Always use unabbreviated commit IDs in github-merge.py (laanwj)
#16112 util: Log early messages (MarcoFalke)
#16223 devtools: Fetch and display ACKs at sign-off time in github-merge (laanwj)
#16300 util: Explain why the path is cached (MarcoFalke)
#16314 scripts and tools: Update copyright_header.py script (hebasto)
#16158 Fix logic of memory_cleanse() on MSVC and clean up docs (real-or-random)
#14734 fix an undefined behavior in uint::SetHex (kazcw)
#16327 scripts and tools: Update ShellCheck linter (hebasto)
#15277 contrib: Enable building in guix containers (dongcarl)
#16362 Add bilingual_str type (hebasto)
#16481 logs: add missing space (harding)
#16581 sipsorcery gitian key (sipsorcery)
#16566 util: Refactor upper/lowercase functions (kallewoof)
#16620 util: Move resolveerrmsg to util/error (MarcoFalke)
#16625 scripts: Remove github-merge.py (fanquake)
#15864 Fix datadir handling (hebasto)
#16670 util: Add join helper to join a list of strings (MarcoFalke)
#16665 scripts: Move update-translations.py to maintainer-tools repo (fanquake)
#16730 Support serialization of std::vector<bool> (sipa)
#16556 Fix systemd service file configuration directory setup (setpill)
#15615 Add log output during initial header sync (jonasschnelli)
#16774 Avoid unnecessary “Synchronizing blockheaders” log messages (jonasschnelli)
#16489 log: harmonize bitcoind logging (jonatack)
#16577 util: Cbufferedfile fixes and unit test (LarryRuane)
#16984 util: Make thread names shorter (hebasto)
#17038 Don’t rename main thread at process level (laanwj)
#17184 util: Filter out macos process serial number (hebasto)
#17095 util: Filter control characters out of log messages (laanwj)
#17085 init: Change fallback locale to C.UTF-8 (laanwj)
#16957 9% less memory: make SaltedOutpointHasher noexcept (martinus)
#17449 fix uninitialized variable nMinerConfirmationWindow (bitcoinVBR)
Documentation
#15514 Update Transifex links (fanquake)
#15513 add “sections” info to example bitcoin.conf (fanquake)
#15530 Move wallet lock annotations to header (MarcoFalke)
#15562 remove duplicate clone step in build-windows.md (fanquake)
#15565 remove release note fragments (fanquake)
#15444 Additional productivity tips (Sjors)
#15577 Enable TLS in link to chris.beams.io (JeremyRand)
#15604 release note for disabling reject messages by default (jnewbery)
#15611 Add Gitian key for droark (droark)
#15626 Update ACK description in CONTRIBUTING.md (jonatack)
#15603 Add more tips to productivity.md (gwillen)
#15683 Comment for seemingly duplicate LIBBITCOIN_SERVER (Bushstar)
#15685 rpc-mining: Clarify error messages (MarcoFalke)
#15760 Clarify sendrawtransaction::maxfeerate==0 help (MarcoFalke)
#15659 fix findFork comment (r8921039)
#15718 Improve netaddress comments (dongcarl)
#15833 remove out-of-date comment on pay-to-witness support (r8921039)
#15821 Remove upgrade note in release notes from EOL versions (MarcoFalke)
#15267 explain AcceptToMemoryPoolWorker’s coins_to_uncache (jamesob)
#15887 Align code example style with clang-format (hebasto)
#15877 Fix -dustrelayfee= argument docs grammar (keepkeyjon)
#15908 Align MSVC build options with Linux build ones (hebasto)
#15941 Add historical release notes for 0.18.0 (laanwj)
#15794 Clarify PR guidelines w/re documentation (dongcarl)
#15607 Release process updates (jonatack)
#14364 Clarify -blocksdir usage (sangaman)
#15777 Add doxygen comments for keypool classes (jnewbery)
#15820 Add productivity notes for dummy rebases (dongcarl)
#15922 Explain how to pass in non-fundamental types into functions (MarcoFalke)
#16080 build/doc: update bitcoin_config.h packages, release process (jonatack)
#16047 analyzepsbt description in doc/psbt.md (jonatack)
#16039 add release note for 14954 (fanquake)
#16139 Add riscv64 to outputs list in release-process.md (JeremyRand)
#16140 create security policy (narula)
#16164 update release process for SECURITY.md (jonatack)
#16213 Remove explicit mention of versions from SECURITY.md (MarcoFalke)
#16186 doc/lint: Fix spelling errors identified by codespell 1.15.0 (Empact)
#16149 Rework section on ACK in CONTRIBUTING.md (MarcoFalke)
#16196 Add release notes for 14897 & 15834 (MarcoFalke)
#16241 add rapidcheck to vcpkg install list (fanquake)
#16243 Remove travis badge from readme (MarcoFalke)
#16256 remove orphaned header in developer notes (jonatack)
#15964 Improve build-osx document formatting (giulio92)
#16313 Fix broken link in doc/build-osx.md (jonatack)
#16330 Use placeholder instead of key expiration date (hebasto)
#16339 add reduce-memory.md (fanquake)
#16347 Include static members in Doxygen (dongcarl)
#15824 Improve netbase comments (dongcarl)
#16430 Update bips 35, 37 and 111 status (MarcoFalke)
#16455 Remove downgrading warning in release notes, per 0.18 branch (MarcoFalke)
#16484 update labels in CONTRIBUTING.md (MarcoFalke)
#16483 update Python command in msvc readme (sipsorcery)
#16504 Add release note for the deprecated totalFee option of bumpfee (promag)
#16448 add note on precedence of options in bitcoin.conf (fanquake)
#16536 Update and extend benchmarking.md (ariard)
#16530 Fix grammar and punctuation in developer notes (Tech1k)
#16574 Add historical release notes for 0.18.1 (laanwj)
#16585 Update Markdown syntax for bdb packages (emilengler)
#16586 Mention other ways to conserve memory on compilation (MarcoFalke)
#16605 Add missing contributor to 0.18.1 release notes (meshcollider)
#16615 Fix typos in COPYRIGHT (gapeman)
#16626 Fix spelling error chache -> cache (nilswloewen)
#16587 Improve versionbits.h documentation (ariard)
#16643 Add ZMQ dependencies to the Fedora build instructions (hebasto)
#16634 Refer in rpcbind doc to the manpage (MarcoFalke)
#16555 mention whitelist is inbound, and applies to blocksonly (Sjors)
#16645 initial RapidCheck property-based testing documentation (jonatack)
#16691 improve depends prefix documentation (fanquake)
#16629 Add documentation for the new whitelist permissions (NicolasDorier)
#16723 Update labels in CONTRIBUTING.md (hebasto)
#16461 Tidy up shadowing section (promag)
#16621 add default bitcoin.conf locations (GChuf)
#16752 Delete stale URL in test README (michaelfolkson)
#14862 Declare BLOCK_VALID_HEADER reserved (MarcoFalke)
#16806 Add issue templates for bug and feature request (MarcoFalke)
#16857 Elaborate need to re-login on Debian-based after usermod for Tor group (clashicly)
#16863 Add a missing closing parenthesis in the bitcoin-wallet’s help (darosior)
#16757 CChainState return values (MarcoFalke)
#16847 add comments clarifying how local services are advertised (jamesob)
#16812 Fix whitespace errs in .md files, bitcoin.conf, and Info.plist.in (ch4ot1c)
#16885 Update tx-size-small comment with relevant CVE disclosure (instagibbs)
#16900 Fix doxygen comment for SignTransaction in rpc/rawtransaction_util (MarcoFalke)
#16914 Update homebrew instruction for doxygen (Sjors)
#16912 Remove Doxygen intro from src/bitcoind.cpp (ch4ot1c)
#16960 replace outdated OpenSSL comment in test README (fanquake)
#16968 Remove MSVC update step from translation process (laanwj)
#16953 Improve test READMEs (fjahr)
#16962 Put PR template in comments (laanwj)
#16397 Clarify includeWatching for fundrawtransaction (stevenroose)
#15459 add how to calculate blockchain and chainstate size variables to release process (marcoagner)
#16997 Update bips.md for 0.19 (laanwj)
#17001 Remove mention of renamed mapBlocksUnlinked (MarcoFalke)
#17014 Consolidate release notes before 0.19.0 (move-only) (MarcoFalke)
#17111 update bips.md with buried BIP9 deployments (MarcoFalke)
Credits
Thanks to everyone who directly contributed to this release:

251
Aaron Clauson
Akio Nakamura
Alistair Mann
Amiti Uttarwar
Andrew Chow
andrewtoth
Anthony Towns
Antoine Riard
Aseem Sood
Ben Carman
Ben Woosley
bpay
Carl Dong
Carnhof Daki
Chris Capobianco
Chris Moore
Chuf
clashic
clashicly
Cory Fields
Daki Carnhof
Dan Gershony
Daniel Edgecumbe
Daniel Kraft
Daniel McNally
darosior
David A. Harding
David Reikher
Douglas Roark
Elichai Turkel
Emil
Emil Engler
ezegom
Fabian Jahr
fanquake
Felix Weis
Ferdinando M. Ametrano
fridokus
gapeman
GChuf
Gert-Jaap Glasbergen
Giulio Lombardo
Glenn Willen
Graham Krizek
Gregory Sanders
grim-trigger
gwillen
Hennadii Stepanov
Jack Mallers
James Hilliard
James O’Beirne
Jan Beich
Jeremy Rubin
JeremyRand
Jim Posen
John Bampton
John Newbery
Jon Atack
Jon Layton
Jonas Schnelli
Jonathan “Duke” Leto
João Barbosa
Joonmo Yang
Jordan Baczuk
Jorge Timón
Josu Goñi
Julian Fleischer
Karl-Johan Alm
Kaz Wesley
keepkeyjon
Kirill Fomichev
Kristaps Kaupe
Kristian Kramer
Larry Ruane
Lenny Maiorani
LongShao007
Luca Venturini
lucash-dev
Luke Dashjr
marcoagner
MarcoFalke
marcuswin
Martin Ankerl
Martin Zumsande
Matt Corallo
MeshCollider
Michael Folkson
Miguel Herranz
Nathan Marley
Neha Narula
nicolas.dorier
Nils Loewen
nkostoulas
NullFunctor
orient
Patrick Strateman
Peter Bushnell
Peter Wagner
Pieter Wuille
practicalswift
qmma
r8921039
RJ Rybarczyk
Russell Yanofsky
Samuel Dobson
Sebastian Falbesoner
setpill
shannon1916
Sjors Provoost
soroosh-sdi
Steven Roose
Suhas Daftuar
tecnovert
THETCR
Tim Ruffing
Tobias Kaderle
Torkel Rogstad
Ulrich Kempken
whythat
William Casarin
Wladimir J. van der Laan
zenosage
As well as everyone that helped translating on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.19.1 released
9 March 2020

0.19.1 Release Notes
How to Upgrade
Compatibility
0.19.1 change log
- {:.}
Wallet
- {:.}
RPC and other APIs
- {:.}
GUI
- {:.}
Tests and QA
- {:.}
Platform support
- {:.}
Miscellaneous
Credits
0.19.1 Release Notes
Bitcoin Core version 0.19.1 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.19.1/

This minor release includes various bug fixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes for older versions), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

Upgrading directly from a version of Bitcoin Core that has reached its EOL is possible, but it might take some time if the datadir needs to be migrated. Old wallet versions of Bitcoin Core are generally supported.

Compatibility
Bitcoin Core is supported and extensively tested on operating systems using the Linux kernel, macOS 10.10+, and Windows 7 and newer. It is not recommended to use Bitcoin Core on unsupported systems.

Bitcoin Core should also work on most other Unix-like systems but is not as frequently tested on them.

From Bitcoin Core 0.17.0 onwards, macOS versions earlier than 10.10 are no longer supported, as Bitcoin Core is now built using Qt 5.9.x which requires macOS 10.10+. Additionally, Bitcoin Core does not yet change appearance when macOS “dark mode” is activated.

In addition to previously supported CPU platforms, this release’s pre-compiled distribution provides binaries for the RISC-V platform.

0.19.1 change log
Wallet
#17643 Fix origfee return for bumpfee with feerate arg (instagibbs)
#16963 Fix unique_ptr usage in boost::signals2 (promag)
#17258 Fix issue with conflicted mempool tx in listsinceblock (adamjonas, mchrostowski)
#17924 Bug: IsUsedDestination shouldn’t use key id as script id for ScriptHash (instagibbs)
#17621 IsUsedDestination should count any known single-key address (instagibbs)
#17843 Reset reused transactions cache (fjahr)
RPC and other APIs
#17687 cli: Fix fatal leveldb error when specifying -blockfilterindex=basic twice (brakmic)
#17728 require second argument only for scantxoutset start action (achow101)
#17445 zmq: Fix due to invalid argument and multiple notifiers (promag)
#17524 psbt: handle unspendable psbts (achow101)
#17156 psbt: check that various indexes and amounts are within bounds (achow101)
GUI
#17427 Fix missing qRegisterMetaType for size_t (hebasto)
#17695 disable File->CreateWallet during startup (fanquake)
#17634 Fix comparison function signature (hebasto)
#18062 Fix unintialized WalletView::progressDialog (promag)
Tests and QA
#17416 Appveyor improvement - text file for vcpkg package list (sipsorcery)
#17488 fix “bitcoind already running” warnings on macOS (fanquake)
#17980 add missing #include to fix compiler errors (kallewoof)
Platform support
#17736 Update msvc build for Visual Studio 2019 v16.4 (sipsorcery)
#17364 Updates to appveyor config for VS2019 and Qt5.9.8 + msvc project fixes (sipsorcery)
#17887 bug-fix macos: give free bytes to F_PREALLOCATE (kallewoof)
Miscellaneous
#17897 init: Stop indexes on shutdown after ChainStateFlushed callback (jimpo)
#17450 util: Add missing headers to util/fees.cpp (hebasto)
#17654 Unbreak build with Boost 1.72.0 (jbeich)
#17857 scripts: Fix symbol-check & security-check argument passing (fanquake)
#17762 Log to net category for exceptions in ProcessMessages (laanwj)
#18100 Update univalue subtree (MarcoFalke)
Credits
Thanks to everyone who directly contributed to this release:

Aaron Clauson
Adam Jonas
Andrew Chow
Fabian Jahr
fanquake
Gregory Sanders
Harris
Hennadii Stepanov
Jan Beich
Jim Posen
João Barbosa
Karl-Johan Alm
Luke Dashjr
MarcoFalke
Michael Chrostowski
Russell Yanofsky
Wladimir J. van der Laan
As well as to everyone that helped with translations on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.20.0 released
3 June 2020

0.20.0 Release Notes
How to Upgrade
Compatibility
Known Bugs
Notable changes
Low-level changes
0.20.0 change log
- {:.}
Mining
- {:.}
Block and transaction handling
- {:.}
P2P protocol and network code
- {:.}
Wallet
- {:.}
RPC and other APIs
- {:.}
GUI
- {:.}
Build system
- {:.}
Platform support
- {:.}
Tests and QA
- {:.}
Documentation
- {:.}
Miscellaneous
Credits
0.20.0 Release Notes
Bitcoin Core version 0.20.0 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.20.0/

This release includes new features, various bug fixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes in some cases), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

Upgrading directly from a version of Bitcoin Core that has reached its EOL is possible, but it might take some time if the data directory needs to be migrated. Old wallet versions of Bitcoin Core are generally supported.

Compatibility
Bitcoin Core is supported and extensively tested on operating systems using the Linux kernel, macOS 10.12+, and Windows 7 and newer. Bitcoin Core should also work on most other Unix-like systems but is not as frequently tested on them. It is not recommended to use Bitcoin Core on unsupported systems.

From Bitcoin Core 0.20.0 onwards, macOS versions earlier than 10.12 are no longer supported. Additionally, Bitcoin Core does not yet change appearance when macOS “dark mode” is activated.

Known Bugs
The process for generating the source code release (“tarball”) has changed in an effort to make it more complete, however, there are a few regressions in this release:

The generated configure script is currently missing, and you will need to install autotools and run ./autogen.sh before you can run ./configure. This is the same as when checking out from git.

Instead of running make simply, you should instead run BITCOIN_GENBUILD_NO_GIT=1 make.

Notable changes
P2P and network changes
Removal of BIP61 reject network messages from Bitcoin Core
The -enablebip61 command line option to enable BIP61 has been removed. (#17004)

This feature has been disabled by default since Bitcoin Core version 0.18.0. Nodes on the network can not generally be trusted to send valid messages (including reject messages), so this should only ever be used when connected to a trusted node. Please use the alternatives recommended below if you rely on this removed feature:

Testing or debugging of implementations of the Bitcoin P2P network protocol should be done by inspecting the log messages that are produced by a recent version of Bitcoin Core. Bitcoin Core logs debug messages (-debug=<category>) to a stream (-printtoconsole) or to a file (-debuglogfile=<debug.log>).

Testing the validity of a block can be achieved by specific RPCs:

submitblock

getblocktemplate with 'mode' set to 'proposal' for blocks with potentially invalid POW

Testing the validity of a transaction can be achieved by specific RPCs:

sendrawtransaction

testmempoolaccept

Wallets should not assume a transaction has propagated to the network just because there are no reject messages. Instead, listen for the transaction to be announced by other peers on the network. Wallets should not assume a lack of reject messages means a transaction pays an appropriate fee. Instead, set fees using fee estimation and use replace-by-fee to increase a transaction’s fee if it hasn’t confirmed within the desired amount of time.

The removal of BIP61 reject message support also has the following minor RPC and logging implications:

testmempoolaccept and sendrawtransaction no longer return the P2P reject code when a transaction is not accepted to the mempool. They still return the verbal reject reason.

Log messages that previously reported the reject code when a transaction was not accepted to the mempool now no longer report the reject code. The reason for rejection is still reported.

Updated RPCs
The RPCs which accept descriptors now accept the new sortedmulti(...) descriptor type which supports multisig scripts where the public keys are sorted lexicographically in the resulting script. (#17056)

The walletprocesspsbt and walletcreatefundedpsbt RPCs now include BIP32 derivation paths by default for public keys if we know them. This can be disabled by setting the bip32derivs parameter to false. (#17264)

The bumpfee RPC’s parameter totalFee, which was deprecated in 0.19, has been removed. (#18312)

The bumpfee RPC will return a PSBT when used with wallets that have private keys disabled. (#16373)

The getpeerinfo RPC now includes a mapped_as field to indicate the mapped Autonomous System used for diversifying peer selection. See the -asmap configuration option described below in New Settings. (#16702)

The createmultisig and addmultisigaddress RPCs now return an output script descriptor for the newly created address. (#18032)

Build System
OpenSSL is no longer used by Bitcoin Core. (#17265)

BIP70 support has been fully removed from Bitcoin Core. The --enable-bip70 option remains, but it will throw an error during configure. (#17165)

glibc 2.17 or greater is now required to run the release binaries. This retains compatibility with RHEL 7, CentOS 7, Debian 8 and Ubuntu 14.04 LTS. (#17538)

The source code archives that are provided with gitian builds no longer contain any autotools artifacts. Therefore, to build from such source, a user should run the ./autogen.sh script from the root of the unpacked archive. This implies that autotools and other required packages are installed on the user’s system. (#18331)

New settings
New rpcwhitelist and rpcwhitelistdefault configuration parameters allow giving certain RPC users permissions to only some RPC calls. (#12763)

A new -asmap configuration option has been added to diversify the node’s network connections by mapping IP addresses Autonomous System Numbers (ASNs) and then limiting the number of connections made to any single ASN. See issue #16599, PR #16702, and the bitcoind help for more information. This option is experimental and subject to removal or breaking changes in future releases, so the legacy /16 prefix mapping of IP addresses remains the default. (#16702)

Updated settings
All custom settings configured when Bitcoin Core starts are now written to the debug.log file to assist troubleshooting. (#16115)

Importing blocks upon startup via the bootstrap.dat file no longer occurs by default. The file must now be specified with -loadblock=<file>. (#17044)

The -debug=db logging category has been renamed to -debug=walletdb to distinguish it from coindb. The -debug=db option has been deprecated and will be removed in the next major release. (#17410)

The -walletnotify configuration parameter will now replace any %w in its argument with the name of the wallet generating the notification. This is not supported on Windows. (#13339)

Removed settings
The -whitelistforcerelay configuration parameter has been removed after it was discovered that it was rendered ineffective in version 0.13 and hasn’t actually been supported for almost four years. (#17985)
GUI changes
The “Start Bitcoin Core on system login” option has been removed on macOS. (#17567)

In the Peers window, the details for a peer now displays a Mapped AS field to indicate the mapped Autonomous System used for diversifying peer selection. See the -asmap configuration option in New Settings, above. (#18402)

A “known bug” announced in the release notes of version 0.18 has been fixed. The issue affected anyone who simultaneously used multiple Bitcoin Core wallets and the GUI coin control feature. (#18894)

For watch-only wallets, creating a new transaction in the Send screen or fee bumping an existing transaction in the Transactions screen will automatically copy a Partially-Signed Bitcoin Transaction (PSBT) to the system clipboard. This can then be pasted into an external program such as HWI for signing. Future versions of Bitcoin Core should support a GUI option for finalizing and broadcasting PSBTs, but for now the debug console may be used with the finalizepsbt and sendrawtransaction RPCs. (#16944, #17492)

Wallet
The wallet now by default uses bech32 addresses when using RPC, and creates native segwit change outputs. (#16884)

The way that output trust was computed has been fixed, which affects confirmed/unconfirmed balance status and coin selection. (#16766)

The gettransaction, listtransactions and listsinceblock RPC responses now also include the height of the block that contains the wallet transaction, if any. (#17437)

The getaddressinfo RPC has had its label field deprecated (re-enable for this release using the configuration parameter -deprecatedrpc=label). The labels field is altered from returning JSON objects to returning a JSON array of label names (re-enable previous behavior for this release using the configuration parameter -deprecatedrpc=labelspurpose). Backwards compatibility using the deprecated configuration parameters is expected to be dropped in the 0.21 release. (#17585, #17578)

Documentation changes
Bitcoin Core’s automatically-generated source code documentation is now available at https://doxygen.bitcoincore.org. (#17596)
Low-level changes
Utilities
The bitcoin-cli utility used with the -getinfo parameter now returns a headers field with the number of downloaded block headers on the best headers chain (similar to the blocks field that is also returned) and a verificationprogress field that estimates how much of the best block chain has been synced by the local node. The information returned no longer includes the protocolversion, walletversion, and keypoololdest fields. (#17302, #17650)

The bitcoin-cli utility now accepts a -stdinwalletpassphrase parameter that can be used when calling the walletpassphrase and walletpassphrasechange RPCs to read the passphrase from standard input without echoing it to the terminal, improving security against anyone who can look at your screen. The existing -stdinrpcpass parameter is also updated to not echo the passphrase. (#13716)

Command line
Command line options prefixed with main/test/regtest network names like -main.port=8333 -test.server=1 previously were allowed but ignored. Now they trigger “Invalid parameter” errors on startup. (#17482)
New RPCs
The dumptxoutset RPC outputs a serialized snapshot of the current UTXO set. A script is provided in the contrib/devtools directory for generating a snapshot of the UTXO set at a particular block height. (#16899)

The generatetodescriptor RPC allows testers using regtest mode to generate blocks that pay an arbitrary output script descriptor. (#16943)

Updated RPCs
The verifychain RPC default values are now static instead of depending on the command line options or configuration file (-checklevel, and -checkblocks). Users can pass in the RPC arguments explicitly when they don’t want to rely on the default values. (#18541)

The getblockchaininfo RPC’s verificationprogress field will no longer report values higher than 1. Previously it would occasionally report the chain was more than 100% verified. (#17328)

Tests
It is now an error to use an unqualified walletdir=path setting in the config file if running on testnet or regtest networks. The setting now needs to be qualified as chain.walletdir=path or placed in the appropriate [chain] section. (#17447)

-fallbackfee was 0 (disabled) by default for the main chain, but 0.0002 by default for the test chains. Now it is 0 by default for all chains. Testnet and regtest users will have to add fallbackfee=0.0002 to their configuration if they weren’t setting it and they want it to keep working like before. (#16524)

Build system
Support is provided for building with the Android Native Development Kit (NDK). (#16110)
0.20.0 change log
Mining
#18742 miner: Avoid stack-use-after-return in validationinterface (MarcoFalke)
Block and transaction handling
#15283 log: Fix UB with bench on genesis block (instagibbs)
#16507 feefilter: Compute the absolute fee rather than stored rate (instagibbs)
#16688 log: Add validation interface logging (jkczyz)
#16805 log: Add timing information to FlushStateToDisk() (jamesob)
#16902 O(1) OP_IF/NOTIF/ELSE/ENDIF script implementation (sipa)
#16945 introduce CChainState::GetCoinsCacheSizeState (jamesob)
#16974 Walk pindexBestHeader back to ChainActive().Tip() if it is invalid (TheBlueMatt)
#17004 Remove REJECT code from CValidationState (jnewbery)
#17080 Explain why fCheckDuplicateInputs can not be skipped and remove it (MarcoFalke)
#17328 GuessVerificationProgress: cap the ratio to 1 (darosior)
#17399 Templatize ValidationState instead of subclassing (jkczyz)
#17407 node: Add reference to mempool in NodeContext (MarcoFalke)
#17708 prevector: Avoid misaligned member accesses (ajtowns)
#17850,#17896,#17957,#18021,#18021,#18112 Serialization improvements (sipa)
#17925 Improve UpdateTransactionsFromBlock with Epochs (JeremyRubin)
#18002 Abstract out script execution out of VerifyWitnessProgram() (sipa)
#18388 Make VerifyWitnessProgram use a Span stack (sipa)
#18433 serialization: prevent int overflow for big Coin::nHeight (pierreN)
#18500 chainparams: Bump assumed valid hash (MarcoFalke)
#18551 Do not clear validationinterface entries being executed (sipa)
P2P protocol and network code
#15437 Remove BIP61 reject messages (MarcoFalke)
#16702 Supply and use asmap to improve IP bucketing in addrman (naumenkogs)
#16851 Continue relaying transactions after they expire from mapRelay (ajtowns)
#17164 Avoid allocating memory for addrKnown where we don’t need it (naumenkogs)
#17243 tools: add PoissonNextSend method that returns mockable time (amitiuttarwar)
#17251 SocketHandler logs peer id for close and disconnect (Sjors)
#17573 Seed RNG with precision timestamps on receipt of net messages (TheBlueMatt)
#17624 Fix an uninitialized read in ProcessMessage(…, “tx”, …) when receiving a transaction we already have (practicalswift)
#17754 Don’t allow resolving of std::string with embedded NUL characters. Add tests (practicalswift)
#17758 Fix CNetAddr::IsRFC2544 comment + tests (tynes)
#17812 config, net, test: Asmap feature refinements and functional tests (jonatack)
#17951 Use rolling bloom filter of recent block txs for AlreadyHave() check (sdaftuar)
#17985 Remove forcerelay of rejected txs (MarcoFalke)
#18023 Fix some asmap issues (sipa)
#18054 Reference instead of copy in BlockConnected range loop (jonatack)
#18376 Fix use-after-free in tests (vasild)
#18454 Make addr relay mockable, add test (MarcoFalke)
#18458 Add missing cs_vNodes lock (MarcoFalke)
#18506 Hardcoded seeds update for 0.20 (laanwj)
#18808 Drop unknown types in getdata (jnewbery)
#18962 Only send a getheaders for one block in an INV (jnewbery)
Wallet
#13339 Replace %w by wallet name in -walletnotify script (promag)
#15931 Remove GetDepthInMainChain dependency on locked chain interface (ariard)
#16373 bumpfee: Return PSBT when wallet has privkeys disabled (instagibbs)
#16524 Disable -fallbackfee by default (jtimon)
#16766 Make IsTrusted scan parents recursively (JeremyRubin)
#16884 Change default address type to bech32 (instagibbs)
#16911 Only check the hash of transactions loaded from disk (achow101)
#16923 Handle duplicate fileid exception (promag)
#17056 descriptors: Introduce sortedmulti descriptor (achow101)
#17070 Avoid showing GUI popups on RPC errors (MarcoFalke)
#17138 Remove wallet access to some node arguments (jnewbery)
#17237 LearnRelatedScripts only if KeepDestination (promag)
#17260 Split some CWallet functions into new LegacyScriptPubKeyMan (achow101)
#17261 Make ScriptPubKeyMan an actual interface and the wallet to have multiple (achow101)
#17290 Enable BnB coin selection for preset inputs and subtract fee from outputs (achow101)
#17373 Various fixes and cleanup to keypool handling in LegacyScriptPubKeyMan and CWallet (achow101)
#17410 Rename db log category to walletdb (like coindb) (laanwj)
#17444 Avoid showing GUI popups on RPC errors (take 2) (MarcoFalke)
#17447 Make -walletdir network only (promag)
#17537 Cleanup and move opportunistic and superfluous TopUp()s (achow101)
#17553 Remove out of date comments for CalculateMaximumSignedTxSize (instagibbs)
#17568 Fix when sufficient preset inputs and subtractFeeFromOutputs (achow101)
#17677 Activate watchonly wallet behavior for LegacySPKM only (instagibbs)
#17719 Document better -keypool as a look-ahead safety mechanism (ariard)
#17843 Reset reused transactions cache (fjahr)
#17889 Improve CWallet:MarkDestinationsDirty (promag)
#18034 Get the OutputType for a descriptor (achow101)
#18067 Improve LegacyScriptPubKeyMan::CanProvide script recognition (ryanofsky)
#18115 Pass in transactions and messages for signing instead of exporting the private keys (achow101)
#18192,#18546 Bugfix: Wallet: Safely deal with change in the address book (luke-jr)
#18204 descriptors: Improve descriptor cache and cache xpubs (achow101)
#18274 rpc/wallet: Initialize nFeeRequired to avoid using garbage value on failure (kallewoof)
#18312 Remove deprecated fee bumping by totalFee (jonatack)
#18338 Fix wallet unload race condition (promag)
RPC and other APIs
#12763 Add RPC Whitelist Feature from #12248 (JeremyRubin)
#13716 cli: -stdinwalletpassphrase and non-echo stdin passwords (kallewoof)
#16689 Add missing fields to wallet rpc help output (ariard)
#16821 Fix bug where duplicate PSBT keys are accepted (erasmospunk)
#16899 UTXO snapshot creation (dumptxoutset)
#17156 psbt: Check that various indexes and amounts are within bounds (achow101)
#17264 Set default bip32derivs to true for psbt methods (Sjors)
#17283 improve getaddressinfo test coverage, help, code docs (jonatack)
#17302 cli: Add “headers” and “verificationprogress” to -getinfo (laanwj)
#17318 replace asserts in RPC code with CHECK_NONFATAL and add linter (adamjonas)
#17437 Expose block height of wallet transactions (promag)
#17519 Remove unused COINBASE_FLAGS (narula)
#17578 Simplify getaddressinfo labels, deprecate previous behavior (jonatack)
#17585 deprecate getaddressinfo label (jonatack)
#17746 Remove vector copy from listtransactions (promag)
#17809 Auto-format RPCResult (MarcoFalke)
#18032 Output a descriptor in createmultisig and addmultisigaddress (achow101)
#18122 Update validateaddress RPCExamples to bech32 (theStack)
#18208 Change RPCExamples to bech32 (yusufsahinhamza)
#18268 Remove redundant types from descriptions (docallag)
#18346 Document an RPCResult for all calls; Enforce at compile time (MarcoFalke)
#18396 Add missing HelpExampleRpc for getblockfilter (theStack)
#18398 Fix broken RPCExamples for waitforblock(height) (theStack)
#18444 Remove final comma for last entry of fixed-size arrays/objects in RPCResult (luke-jr)
#18459 Remove unused getbalances() code (jonatack)
#18484 Correctly compute redeemScript from witnessScript for signrawtransaction (achow101)
#18487 Fix rpcRunLater race in walletpassphrase (promag)
#18499 Make rpc documentation not depend on call-time rpc args (MarcoFalke)
#18532 Avoid initialization-order-fiasco on static CRPCCommand tables (MarcoFalke)
#18541 Make verifychain default values static, not depend on global args (MarcoFalke)
#18809 Do not advertise dumptxoutset as a way to flush the chainstate (MarcoFalke)
#18814 Relock wallet only if most recent callback (promag)
GUI
#15023 Restore RPC Console to non-wallet tray icon menu (luke-jr)
#15084 Don’t disable the sync overlay when wallet is disabled (benthecarman)
#15098 Show addresses for “SendToSelf” transactions (hebasto)
#15756 Add shortcuts for tab tools (promag)
#16944 create PSBT with watch-only wallet (Sjors)
#16964 Change sendcoins dialogue Yes to Send (instagibbs)
#17068 Always generate bitcoinstrings.cpp on make translate (D4nte)
#17096 Rename debug window (Zero-1729)
#17105 Make RPCConsole::TabTypes an enum class (promag)
#17125 Add toolTip and placeholderText to sign message fields (dannmat)
#17165 Remove BIP70 support (fanquake)
#17180 Improved tooltip for send amount field (JeremyCrookshank)
#17186 Add placeholder text to the sign message field (Danny-Scott)
#17195 Send amount placeholder value (JeremyCrookshank)
#17226 Fix payAmount tooltip in SendCoinsEntry (promag)
#17360 Cleaning up hide button tool tip (Danny-Scott)
#17446 Changed tooltip for ‘Label’ & ‘Message’ text fields to be more clear (dannmat)
#17453 Fix intro dialog labels when the prune button is toggled (hebasto)
#17474 Bugfix: GUI: Recognise NETWORK_LIMITED in formatServicesStr (luke-jr)
#17492 Bump fee returns PSBT on clipboard for watchonly-only wallets (instagibbs)
#17567 Remove macOS start on login code (fanquake)
#17587 Show watch-only balance in send screen (Sjors)
#17694 Disable 3rd-party tx-urls when wallet disabled (brakmic)
#17696 Force set nPruneSize in QSettings after the intro dialog (hebasto)
#17702 Move static placeholder texts to forms (laanwj)
#17826 Log Qt related info (hebasto)
#17886 Restore English translation option (achow101)
#17906 Set CConnman byte counters earlier to avoid uninitialized reads (ryanofsky)
#17935 Hide HD & encryption icons when no wallet loaded (brakmic)
#17998 Shortcut to close ModalOverlay (emilengler)
#18007 Bugfix: GUI: Hide the HD/encrypt icons earlier so they get re-shown if another wallet is open (luke-jr)
#18060 Drop PeerTableModel dependency to ClientModel (promag)
#18062 Fix unintialized WalletView::progressDialog (promag)
#18091 Pass clientmodel changes from walletframe to walletviews (jonasschnelli)
#18101 Fix deprecated QCharRef usage (hebasto)
#18121 Throttle GUI update pace when -reindex (hebasto)
#18123 Fix race in WalletModel::pollBalanceChanged (ryanofsky)
#18160 Avoid Wallet::GetBalance in WalletModel::pollBalanceChanged (promag)
#18360 Bump transifex slug and update English translations for 0.20 (laanwj)
#18402 Display mapped AS in peers info window (jonatack)
#18492 Translations update pre-branch (laanwj)
#18549 Fix Window -> Minimize menu item (hebasto)
#18578 Fix leak in CoinControlDialog::updateView (promag)
#18894 Fix manual coin control with multiple wallets loaded (promag)
Build system
#16667 Remove mingw linker workaround from win gitian descriptor (fanquake)
#16669 Use new fork of osslsigncode for windows gitian signing (fanquake)
#16949 Only pass –disable-dependency-tracking to packages that understand it (fanquake)
#17008 Bump libevent to 2.1.11 in depends (stefanwouldgo)
#17029 gitian: Various improvements for windows descriptor (dongcarl)
#17033 Disable _FORTIFY_SOURCE when enable-debug (achow101)
#17057 Switch to upstream libdmg-hfsplus (fanquake)
#17066 Remove workaround for ancient libtool (hebasto)
#17074 Added double quotes (mztriz)
#17087 Add variable printing target to Makefiles (dongcarl)
#17118 depends macOS: point –sysroot to SDK (Sjors)
#17231 Fix boost mac cross build with clang 9+ (theuni)
#17265 Remove OpenSSL (fanquake)
#17284 Update retry to current version (RandyMcMillan)
#17308 nsis: Write to correct filename in first place (dongcarl)
#17324,#18099 Update univalue subtree (MarcoFalke)
#17398 Update leveldb to 1.22+ (laanwj)
#17409 Avoid hardcoded libfaketime dir in gitian (MarcoFalke)
#17466 Fix C{,XX} pickup (dongcarl)
#17483 Set gitian arch back to amd64 (MarcoFalke)
#17486 Make Travis catch unused variables (Sjors)
#17538 Bump minimum libc to 2.17 for release binaries (fanquake)
#17542 Create test utility library from src/test/util/ (brakmic)
#17545 Remove libanl.so.1 from ALLOWED_LIBRARIES (fanquake)
#17547 Fix configure report about qr (hebasto)
#17569 Allow export of environ symbols and work around rv64 toolchain issue (laanwj)
#17647 lcov: filter depends from coverage reports (nijynot)
#17658 Add ability to skip building qrencode (fanquake)
#17678 Support for S390X and POWER targets (MarcoFalke)
#17682 util: Update tinyformat to upstream (laanwj)
#17698 Don’t configure xcb_proto (fanquake)
#17730 Remove Qt networking features (fanquake)
#17738 Remove linking librt for backwards compatibility (fanquake)
#17740 Remove configure checks for win libraries we don’t link against (fanquake)
#17741 Included test_bitcoin-qt in msvc build (sipsorcery)
#17756 Remove WINDOWS_BITS from build system (fanquake)
#17769 Set AC_PREREQ to 2.69 (fanquake)
#17880 Add -Wdate-time to Werror flags (fanquake)
#17910 Remove double LIBBITCOIN_SERVER linking (fanquake)
#17928 Consistent use of package variable (Bushstar)
#17933 guix: Pin Guix using guix time-machine (dongcarl)
#17948 pass -fno-ident in Windows gitian descriptor (fanquake)
#18003 Remove –large-address-aware linker flag (fanquake)
#18004 Don’t embed a build-id when building libdmg-hfsplus (fanquake)
#18051 Fix behavior when ALLOW_HOST_PACKAGES unset (hebasto)
#18059 Add missing attributes to Win installer (fanquake)
#18104 Skip i686 build by default in guix and gitian (MarcoFalke)
#18107 Add cov_fuzz target (MarcoFalke)
#18135 Add –enable-determinism configure flag (fanquake)
#18145 Add Wreturn-type to Werror flags, check on more Travis machines (Sjors)
#18264 Remove Boost Chrono (fanquake)
#18290 Set minimum Automake version to 1.13 (hebasto)
#18320 guix: Remove now-unnecessary gcc make flag (dongcarl)
#18331 Use git archive as source tarball (hebasto)
#18397 Fix libevent linking for bench_bitcoin binary (hebasto)
#18426 scripts: Previous_release: improve behaviour on failed download (theStack)
#18429 Remove double LIBBITCOIN_SERVER from bench-Makefile (brakmic)
#18528 Create test_fuzz library from src/test/fuzz/fuzz.cpp (brakmic)
#18558 Fix boost detection for arch armv7l (hebasto)
#18598 gitian: Add missing automake package to gitian-win-signer.yml (achow101)
#18676 Check libevent minimum version in configure script (hebasto)
#18945 Ensure source tarball has leading directory name (laanwj)
Platform support
#16110 Add Android NDK support (icota)
#16392 macOS toolchain update (fanquake)
#16569 Increase init file stop timeout (setpill)
#17151 Remove OpenSSL PRNG seeding (Windows, Qt only) (fanquake)
#17365 Update README.md with working Android targets and API levels (icota)
#17521 Only use D-Bus with Qt on linux (fanquake)
#17550 Set minimum supported macOS to 10.12 (fanquake)
#17592 Appveyor install libevent[thread] vcpkg (sipsorcery)
#17660 Remove deprecated key from macOS Info.plist (fanquake)
#17663 Pass -dead_strip_dylibs to ld on macOS (fanquake)
#17676 Don’t use OpenGL in Qt on macOS (fanquake)
#17686 Add -bind_at_load to macOS hardened LDFLAGS (fanquake)
#17787 scripts: Add macho pie check to security-check.py (fanquake)
#17800 random: don’t special case clock usage on macOS (fanquake)
#17863 scripts: Add macho dylib checks to symbol-check.py (fanquake)
#17899 msvc: Ignore msvc linker warning and update to msvc build instructions (sipsorcery)
#17916 windows: Enable heap terminate-on-corruption (fanquake)
#18082 logging: Enable thread_local usage on macos (fanquake)
#18108 Fix .gitignore policy in build_msvc directory (hebasto)
#18295 scripts: Add macho lazy bindings check to security-check.py (fanquake)
#18358 util: Fix compilation with mingw-w64 7.0.0 (fanquake)
#18359 Fix sysctl() detection on macOS (fanquake)
#18364 random: remove getentropy() fallback for macOS < 10.12 (fanquake)
#18395 scripts: Add pe dylib checking to symbol-check.py (fanquake)
#18415 scripts: Add macho tests to test-security-check.py (fanquake)
#18425 releases: Update with new Windows code signing certificate (achow101)
#18702 Fix ASLR for bitcoin-cli on Windows (fanquake)
Tests and QA
#12134 Build previous releases and run functional tests (Sjors)
#13693 Add coverage to estimaterawfee and estimatesmartfee (Empact)
#13728 lint: Run the ci lint stage on mac (Empact)
#15443 Add getdescriptorinfo functional test (promag)
#15888 Add wallet_implicitsegwit to test the ability to transform keys between address types (luke-jr)
#16540 Add ASSERT_DEBUG_LOG to unit test framework (MarcoFalke)
#16597 travis: Run full test suite on native macos (Sjors)
#16681 Use self.chain instead of ‘regtest’ in all current tests (jtimon)
#16786 add unit test for wallet watch-only methods involving PubKeys (theStack)
#16943 Add generatetodescriptor RPC (MarcoFalke)
#16973 Fix combine_logs.py for AppVeyor build (mzumsande)
#16975 Show debug log on unit test failure (MarcoFalke)
#16978 Seed test RNG context for each test case, print seed (MarcoFalke)
#17009, #17018, #17050, #17051, #17071, #17076, #17083, #17093, #17109, #17113, #17136, #17229, #17291, #17357, #17771, #17777, #17917, #17926, #17972, #17989, #17996, #18009, #18029, #18047, #18126, #18176, #18206, #18353, #18363, #18407, #18417, #18423, #18445, #18455, #18565 Add fuzzing harnesses (practicalswift)
#17011 ci: Use busybox utils for one build (MarcoFalke)
#17030 Fix Python Docstring to include all Args (jbampton)
#17041 ci: Run tests on arm (MarcoFalke)
#17069 Pass fuzzing inputs as constant references (practicalswift)
#17091 Add test for loadblock option and linearize scripts (fjahr)
#17108 fix “tx-size-small” errors after default address change (theStack)
#17121 Speed up wallet_backup by whitelisting peers (immediate tx relay) (theStack)
#17124 Speed up wallet_address_types by whitelisting peers (immediate tx relay) (theStack)
#17140 Fix bug in blockfilter_index_tests (jimpo)
#17199 use default address type (bech32) for wallet_bumpfee tests (theStack)
#17205 ci: Enable address sanitizer (asan) stack-use-after-return checking (practicalswift)
#17206 Add testcase to simulate bitcoin schema in leveldb (adamjonas)
#17209 Remove no longer needed UBSan suppressions (issues fixed). Add documentation (practicalswift)
#17220 Add unit testing for the CompressScript function (adamjonas)
#17225 Test serialisation as part of deserialisation fuzzing. Test round-trip equality where possible (practicalswift)
#17228 Add RegTestingSetup to setup_common (MarcoFalke)
#17233 travis: Run unit and functional tests on native arm (MarcoFalke)
#17235 Skip unnecessary fuzzer initialisation. Hold ECCVerifyHandle only when needed (practicalswift)
#17240 ci: Disable functional tests on mac host (MarcoFalke)
#17254 Fix script_p2sh_tests OP_PUSHBACK2/4 missing (adamjonas)
#17267 bench: Fix negative values and zero for -evals flag (nijynot)
#17275 pubkey: Assert CPubKey’s ECCVerifyHandle precondition (practicalswift)
#17288 Added TestWrapper class for interactive Python environments (jachiang)
#17292 Add new mempool benchmarks for a complex pool (JeremyRubin)
#17299 add reason checks for non-standard txs in test_IsStandard (theStack)
#17322 Fix input size assertion in wallet_bumpfee.py (instagibbs)
#17327 Add rpc_fundrawtransaction logging (jonatack)
#17330 Add shrinkdebugfile=0 to regtest bitcoin.conf (sdaftuar)
#17340 Speed up fundrawtransaction test (jnewbery)
#17345 Do not instantiate CAddrDB for static call CAddrDB::Read() (hebasto)
#17362 Speed up wallet_avoidreuse, add logging (jonatack)
#17363 add “diamond” unit test to MempoolAncestryTests (theStack)
#17366 Reset global args between test suites (MarcoFalke)
#17367 ci: Run non-cross-compile builds natively (MarcoFalke)
#17378 TestShell: Fix typos & implement cleanups (jachiang)
#17384 Create new test library (MarcoFalke)
#17387 wallet_importmulti: use addresses of the same type as being imported (achow101)
#17388 Add missing newline in util_ChainMerge test (ryanofsky)
#17390 Add util_ArgParsing test (ryanofsky)
#17420 travis: Rework cache_err_msg (MarcoFalke)
#17423 ci: Make ci system read-only on the git work tree (MarcoFalke)
#17435 check custom ancestor limit in mempool_packages.py (theStack)
#17455 Update valgrind suppressions (practicalswift)
#17461 Check custom descendant limit in mempool_packages.py (theStack)
#17469 Remove fragile assert_memory_usage_stable (MarcoFalke)
#17470 ci: Use clang-8 for fuzzing to run on aarch64 ci systems (MarcoFalke)
#17480 Add unit test for non-standard txs with too large scriptSig (theStack)
#17497 Skip tests when utils haven’t been compiled (fanquake)
#17502 Add unit test for non-standard bare multisig txs (theStack)
#17511 Add bounds checks before base58 decoding (sipa)
#17517 ci: Bump to clang-8 for asan build to avoid segfaults on ppc64le (MarcoFalke)
#17522 Wait until mempool is loaded in wallet_abandonconflict (MarcoFalke)
#17532 Add functional test for non-standard txs with too large scriptSig (theStack)
#17541 Add functional test for non-standard bare multisig txs (theStack)
#17555 Add unit test for non-standard txs with wrong nVersion (dspicher)
#17571 Add libtest_util library to msvc build configuration (sipsorcery)
#17591 ci: Add big endian platform - s390x (elichai)
#17593 Move more utility functions into test utility library (mzumsande)
#17633 Add option –valgrind to run the functional tests under Valgrind (practicalswift)
#17635 ci: Add centos 7 build (hebasto)
#17641 Add unit test for leveldb creation with unicode path (sipsorcery)
#17674 Add initialization order fiasco detection in Travis (practicalswift)
#17675 Enable tests which are incorrectly skipped when running test_runner.py --usecli (practicalswift)
#17685 Fix bug in the descriptor parsing fuzzing harness (descriptor_parse) (practicalswift)
#17705 re-enable CLI test support by using EncodeDecimal in json.dumps() (fanquake)
#17720 add unit test for non-standard “scriptsig-not-pushonly” txs (theStack)
#17767 ci: Fix qemu issues (MarcoFalke)
#17793 ci: Update github actions ci vcpkg cache on msbuild update (hebasto)
#17806 Change filemode of rpc_whitelist.py (emilengler)
#17849 ci: Fix brew python link (hebasto)
#17851 Add std::to_string to list of locale dependent functions (practicalswift)
#17893 Fix double-negative arg test (hebasto)
#17900 ci: Combine 32-bit build with centos 7 build (theStack)
#17921 Test OP_CSV empty stack fail in feature_csv_activation.py (theStack)
#17931 Fix p2p_invalid_messages failing in Python 3.8 because of warning (elichai)
#17947 add unit test for non-standard txs with too large tx size (theStack)
#17959 Check specific reject reasons in feature_csv_activation.py (theStack)
#17984 Add p2p test for forcerelay permission (MarcoFalke)
#18001 Updated appveyor job to checkout a specific vcpkg commit ID (sipsorcery)
#18008 fix fuzzing using libFuzzer on macOS (fanquake)
#18013 bench: Fix benchmarks filters (elichai)
#18018 reset fIsBareMultisigStd after bare-multisig tests (fanquake)
#18022 Fix appveyor test_bitcoin build of *.raw (MarcoFalke)
#18037 util: Allow scheduler to be mocked (amitiuttarwar)
#18056 ci: Check for submodules (emilengler)
#18069 Replace ‘regtest’ leftovers by self.chain (theStack)
#18081 Set a name for CI Docker containers (fanquake)
#18109 Avoid hitting some known minor tinyformat issues when fuzzing strprintf(…) (practicalswift)
#18155 Add harness which fuzzes EvalScript and VerifyScript using a fuzzed signature checker (practicalswift)
#18159 Add –valgrind option to test/fuzz/test_runner.py for running fuzzing test cases under valgrind (practicalswift)
#18166 ci: Run fuzz testing test cases (bitcoin-core/qa-assets) under valgrind to catch memory errors (practicalswift)
#18172 Transaction expiry from mempool (0xB10C)
#18181 Remove incorrect assumptions in validation_flush_tests (MarcoFalke)
#18183 Set catch_system_errors=no on boost unit tests (MarcoFalke)
#18195 Add cost_of_change parameter assertions to bnb_search_test (yancyribbens)
#18209 Reduce unneeded whitelist permissions in tests (MarcoFalke)
#18211 Disable mockforward scheduler unit test for now (MarcoFalke)
#18213 Fix race in p2p_segwit (MarcoFalke)
#18224 Make AnalyzePSBT next role calculation simple, correct (instagibbs)
#18228 Add missing syncwithvalidationinterfacequeue (MarcoFalke)
#18247 Wait for both veracks in add_p2p_connection (MarcoFalke)
#18249 Bump timeouts to accomodate really slow disks (MarcoFalke)
#18255 Add bad-txns-*-toolarge test cases to invalid_txs (MarcoFalke)
#18263 rpc: change setmocktime check to use IsMockableChain (gzhao408)
#18285 Check that wait_until returns if time point is in the past (MarcoFalke)
#18286 Add locale fuzzer to FUZZERS_MISSING_CORPORA (practicalswift)
#18292 fuzz: Add assert(script == decompressed_script) (MarcoFalke)
#18299 Update FUZZERS_MISSING_CORPORA to enable regression fuzzing for all harnesses in master (practicalswift)
#18300 fuzz: Add option to merge input dir to test runner (MarcoFalke)
#18305 Explain why test logging should be used (MarcoFalke)
#18306 Add logging to wallet_listsinceblock.py (jonatack)
#18311 Bumpfee test fix (instagibbs)
#18314 Add deserialization fuzzing of SnapshotMetadata (utxo_snapshot) (practicalswift)
#18319 fuzz: Add missing ECC_Start to key_io test (MarcoFalke)
#18334 Add basic test for BIP 37 (MarcoFalke)
#18350 Fix mining to an invalid target + ensure that a new block has the correct hash internally (TheQuantumPhysicist)
#18378 Bugfix & simplify bn2vch using int.to_bytes (sipa)
#18393 Don’t assume presence of __builtin_mul_overflow(…) in MultiplicationOverflow(…) fuzzing harness (practicalswift)
#18406 add executable flag for rpc_estimatefee.py (theStack)
#18420 listsinceblock block height checks (jonatack)
#18430 ci: Only clone bitcoin-core/qa-assets when fuzzing (MarcoFalke)
#18438 ci: Use homebrew addon on native macos (hebasto)
#18447 Add coverage for script parse error in ParseScript (pierreN)
#18472 Remove unsafe BOOST_TEST_MESSAGE (MarcoFalke)
#18474 check that peer is connected when calling sync_* (MarcoFalke)
#18477 ci: Use focal for fuzzers (MarcoFalke)
#18481 add BIP37 ‘filterclear’ test to p2p_filter.py (theStack)
#18496 Remove redundant sync_with_ping after add_p2p_connection (jonatack)
#18509 fuzz: Avoid running over all inputs after merging them (MarcoFalke)
#18510 fuzz: Add CScriptNum::getint coverage (MarcoFalke)
#18514 remove rapidcheck integration and tests (fanquake)
#18515 Add BIP37 remote crash bug [CVE-2013-5700] test to p2p_filter.py (theStack)
#18516 relax bumpfee dust_to_fee txsize an extra vbyte (jonatack)
#18518 fuzz: Extend descriptor fuzz test (MarcoFalke)
#18519 fuzz: Extend script fuzz test (MarcoFalke)
#18521 fuzz: Add process_messages harness (MarcoFalke)
#18529 Add fuzzer version of randomized prevector test (sipa)
#18534 skip backwards compat tests if not compiled with wallet (fanquake)
#18540 wallet_bumpfee assertion fixup (jonatack)
#18543 Use one node to avoid a race due to missing sync in rpc_signrawtransaction (MarcoFalke)
#18561 Properly raise FailedToStartError when rpc shutdown before warmup finished (MarcoFalke)
#18562 ci: Run unit tests sequential once (MarcoFalke)
#18563 Fix unregister_all_during_call cleanup (ryanofsky)
#18566 Set -use_value_profile=1 when merging fuzz inputs (MarcoFalke)
#18757 Remove enumeration of expected deserialization exceptions in ProcessMessage(…) fuzzer (practicalswift)
#18878 Add test for conflicted wallet tx notifications (ryanofsky)
#18975 Remove const to work around compiler error on xenial (laanwj)
Documentation
#16947 Doxygen-friendly script/descriptor.h comments (ch4ot1c)
#16983 Add detailed info about Bitcoin Core files (hebasto)
#16986 Doxygen-friendly CuckooCache comments (ch4ot1c)
#17022 move-only: Steps for “before major release branch-off” (MarcoFalke)
#17026 Update bips.md for default bech32 addresses in 0.20.0 (MarcoFalke)
#17081 Fix Makefile target in benchmarking.md (theStack)
#17102 Add missing indexes/blockfilter/basic to doc/files.md (MarcoFalke)
#17119 Fix broken bitcoin-cli examples (andrewtoth)
#17134 Add switch on enum example to developer notes (hebasto)
#17142 Update macdeploy README to include all files produced by make deploy (za-kk)
#17146 github: Add warning for bug reports (laanwj)
#17157 Added instructions for how to add an upsteam to forked repo (dannmat)
#17159 Add a note about backporting (carnhofdaki)
#17169 Correct function name in ReportHardwareRand() (fanquake)
#17177 Describe log files + consistent paths in test READMEs (fjahr)
#17239 Changed miniupnp links to https (sandakersmann)
#17281 Add developer note on c_str() (laanwj)
#17285 Bip70 removal follow-up (fjahr)
#17286 Fix help-debug -checkpoints (ariard)
#17309 update MSVC instructions to remove Qt OpenSSL linking (fanquake)
#17339 Add template for good first issues (michaelfolkson)
#17351 Fix some misspellings (RandyMcMillan)
#17353 Add ShellCheck to lint tests dependencies (hebasto)
#17370 Update doc/bips.md with recent changes in master (MarcoFalke)
#17393 Added regtest config for linearize script (gr0kchain)
#17411 Add some better examples for scripted diff (laanwj)
#17503 Remove bitness from bitcoin-qt help message and manpage (laanwj)
#17539 Update and improve Developer Notes (hebasto)
#17561 Changed MiniUPnPc link to https in dependencies.md (sandakersmann)
#17596 Change doxygen URL to doxygen.bitcoincore.org (laanwj)
#17598 Update release process with latest changes (MarcoFalke)
#17617 Unify unix epoch time descriptions (jonatack)
#17637 script: Add keyserver to verify-commits readme (emilengler)
#17648 Rename wallet-tool references to bitcoin-wallet (hel-o)
#17688 Add “ci” prefix to CONTRIBUTING.md (hebasto)
#17751 Use recommended shebang approach in documentation code block (hackerrdave)
#17752 Fix directory path for secp256k1 subtree in developer-notes (hackerrdave)
#17772 Mention PR Club in CONTRIBUTING.md (emilengler)
#17804 Misc RPC help fixes (MarcoFalke)
#17819 Developer notes guideline on RPCExamples addresses (jonatack)
#17825 Update dependencies.md (hebasto)
#17873 Add to Doxygen documentation guidelines (jonatack)
#17907 Fix improper Doxygen inline comments (Empact)
#17942 Improve fuzzing docs for macOS users (fjahr)
#17945 Fix doxygen errors (Empact)
#18025 Add missing supported rpcs to doc/descriptors.md (andrewtoth)
#18070 Add note about brew doctor (givanse)
#18125 Remove PPA note from release-process.md (fanquake)
#18170 Minor grammatical changes and flow improvements (travinkeith)
#18212 Add missing step in win deployment instructions (dangershony)
#18219 Add warning against wallet.dat re-use (corollari)
#18253 Correct spelling errors in comments (Empact)
#18278 interfaces: Describe and follow some code conventions (ryanofsky)
#18283 Explain rebase policy in CONTRIBUTING.md (MarcoFalke)
#18340 Mention MAKE=gmake workaround when building on a BSD (fanquake)
#18341 Replace remaining literal BTC with CURRENCY_UNIT (domob1812)
#18342 Add fuzzing quickstart guides for libFuzzer and afl-fuzz (practicalswift)
#18344 Fix nit in getblockchaininfo (stevenroose)
#18379 Comment fix merkle.cpp (4d55397500)
#18382 note the costs of fetching all pull requests (vasild)
#18391 Update init and reduce-traffic docs for -blocksonly (glowang)
#18464 Block-relay-only vs blocksonly (MarcoFalke)
#18486 Explain new test logging (MarcoFalke)
#18505 Update webchat URLs in README.md (SuriyaaKudoIsc)
#18513 Fix git add argument (HashUnlimited)
#18577 Correct scripted-diff example link (yahiheb)
#18589 Fix naming of macOS SDK and clarify version (achow101)
Miscellaneous
#15600 lockedpool: When possible, use madvise to avoid including sensitive information in core dumps (luke-jr)
#15934 Merge settings one place instead of five places (ryanofsky)
#16115 On bitcoind startup, write config args to debug.log (LarryRuane)
#16117 util: Replace boost sleep with std sleep (MarcoFalke)
#16161 util: Fix compilation errors in support/lockedpool.cpp (jkczyz)
#16802 scripts: In linearize, search for next position of magic bytes rather than fail (takinbo)
#16889 Add some general std::vector utility functions (sipa)
#17049 contrib: Bump gitian descriptors for 0.20 (MarcoFalke)
#17052 scripts: Update copyright_header script to include additional files (GChuf)
#17059 util: Simplify path argument for cblocktreedb ctor (hebasto)
#17191 random: Remove call to RAND_screen() (Windows only) (fanquake)
#17192 util: Add check_nonfatal and use it in src/rpc (MarcoFalke)
#17218 Replace the LogPrint function with a macro (jkczyz)
#17266 util: Rename decodedumptime to parseiso8601datetime (elichai)
#17270 Feed environment data into RNG initializers (sipa)
#17282 contrib: Remove accounts from bash completion (fanquake)
#17293 Add assertion to randrange that input is not 0 (JeremyRubin)
#17325 log: Fix log message for -par=1 (hebasto)
#17329 linter: Strip trailing / in path for git-subtree-check (jnewbery)
#17336 scripts: Search for first block file for linearize-data with some block files pruned (Rjected)
#17361 scripts: Lint gitian descriptors with shellcheck (hebasto)
#17482 util: Disallow network-qualified command line options (ryanofsky)
#17507 random: mark RandAddPeriodic and SeedPeriodic as noexcept (fanquake)
#17527 Fix CPUID subleaf iteration (sipa)
#17604 util: Make schedulebatchpriority advisory only (fanquake)
#17650 util: Remove unwanted fields from bitcoin-cli -getinfo (malevolent)
#17671 script: Fixed wget call in gitian-build.py (willyko)
#17699 Make env data logging optional (sipa)
#17721 util: Don’t allow base58 decoding of non-base58 strings. add base58 tests (practicalswift)
#17750 util: Change getwarnings parameter to bool (jnewbery)
#17753 util: Don’t allow base32/64-decoding or parsemoney(…) on strings with embedded nul characters. add tests (practicalswift)
#17823 scripts: Read suspicious hosts from a file instead of hardcoding (sanjaykdragon)
#18162 util: Avoid potential uninitialized read in formatiso8601datetime(int64_t) by checking gmtime_s/gmtime_r return value (practicalswift)
#18167 Fix a violation of C++ standard rules where unions are used for type-punning (TheQuantumPhysicist)
#18225 util: Fail to parse empty string in parsemoney (MarcoFalke)
#18270 util: Fail to parse whitespace-only strings in parsemoney(…) (instead of parsing as zero) (practicalswift)
#18316 util: Helpexamplerpc formatting (jonatack)
#18357 Fix missing header in sync.h (promag)
#18412 script: Fix script_err_sig_pushonly error string (theStack)
#18416 util: Limit decimal range of numbers parsescript accepts (pierreN)
#18503 init: Replace URL_WEBSITE with PACKAGE_URL (MarcoFalke)
#18526 Remove PID file at the very end (hebasto)
#18553 Avoid non-trivial global constants in SHA-NI code (sipa)
#18665 Do not expose and consider -logthreadnames when it does not work (hebasto)
Credits
Thanks to everyone who directly contributed to this release:

0xb10c
251
4d55397500
Aaron Clauson
Adam Jonas
Albert
Amiti Uttarwar
Andrew Chow
Andrew Toth
Anthony Towns
Antoine Riard
Ava Barron
Ben Carman
Ben Woosley
Block Mechanic
Brian Solon
Bushstar
Carl Dong
Carnhof Daki
Cory Fields
Daki Carnhof
Dan Gershony
Daniel Kraft
dannmat
Danny-Scott
darosior
David O’Callaghan
Dominik Spicher
Elichai Turkel
Emil Engler
emu
Fabian Jahr
fanquake
Filip Gospodinov
Franck Royer
Gastón I. Silva
gchuf
Gleb Naumenko
Gloria Zhao
glowang
Gr0kchain
Gregory Sanders
hackerrdave
Harris
hel0
Hennadii Stepanov
ianliu
Igor Cota
James Chiang
James O’Beirne
Jan Beich
Jan Sarenik
Jeffrey Czyz
Jeremy Rubin
JeremyCrookshank
Jim Posen
John Bampton
John L. Jegutanis
John Newbery
Jon Atack
Jon Layton
Jonas Schnelli
João Barbosa
Jorge Timón
Karl-Johan Alm
kodslav
Larry Ruane
Luke Dashjr
malevolent
MapleLaker
marcaiaf
MarcoFalke
Marius Kjærstad
Mark Erhardt
Mark Tyneway
Martin Erlandsson
Martin Zumsande
Matt Corallo
Matt Ward
Michael Folkson
Michael Polzer
Micky Yun Chan
Neha Narula
nijynot
naumenkogs
NullFunctor
Peter Bushnell
pierrenn
Pieter Wuille
practicalswift
randymcmillan
Rjected
Russell Yanofsky
Samer Afach
Samuel Dobson
Sanjay K
Sebastian Falbesoner
setpill
Sjors Provoost
Stefan Richter
stefanwouldgo
Steven Roose
Suhas Daftuar
Suriyaa Sundararuban
TheCharlatan
Tim Akinbo
Travin Keith
tryphe
Vasil Dimov
Willy Ko
Wilson Ccasihue S
Wladimir J. van der Laan
Yahia Chiheb
Yancy Ribbens
Yusuf Sahin HAMZA
Zakk
Zero
As well as to everyone that helped with translations on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.20.1 released
1 August 2020

0.20.1 Release Notes
How to Upgrade
Compatibility
Known Bugs
Notable changes
0.20.1 change log
- {:.}
Mining
- {:.}
P2P protocol and network code
- {:.}
Wallet
- {:.}
RPC and other APIs
- {:.}
GUI
- {:.}
Build system
- {:.}
Tests and QA
- {:.}
Miscellaneous
Credits
0.20.1 Release Notes
Bitcoin Core version 0.20.1 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.20.1/

This minor release includes various bug fixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes in some cases), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

Upgrading directly from a version of Bitcoin Core that has reached its EOL is possible, but it might take some time if the data directory needs to be migrated. Old wallet versions of Bitcoin Core are generally supported.

Compatibility
Bitcoin Core is supported and extensively tested on operating systems using the Linux kernel, macOS 10.12+, and Windows 7 and newer. Bitcoin Core should also work on most other Unix-like systems but is not as frequently tested on them. It is not recommended to use Bitcoin Core on unsupported systems.

From Bitcoin Core 0.20.0 onwards, macOS versions earlier than 10.12 are no longer supported. Additionally, Bitcoin Core does not yet change appearance when macOS “dark mode” is activated.

Known Bugs
The process for generating the source code release (“tarball”) has changed in an effort to make it more complete, however, there are a few regressions in this release:

The generated configure script is currently missing, and you will need to install autotools and run ./autogen.sh before you can run ./configure. This is the same as when checking out from git.

Instead of running make simply, you should instead run BITCOIN_GENBUILD_NO_GIT=1 make.

Notable changes
Changes regarding misbehaving peers
Peers that misbehave (e.g. send us invalid blocks) are now referred to as discouraged nodes in log output, as they’re not (and weren’t) strictly banned: incoming connections are still allowed from them, but they’re preferred for eviction.

Furthermore, a few additional changes are introduced to how discouraged addresses are treated:

Discouraging an address does not time out automatically after 24 hours (or the -bantime setting). Depending on traffic from other peers, discouragement may time out at an indeterminate time.

Discouragement is not persisted over restarts.

There is no method to list discouraged addresses. They are not returned by the listbanned RPC. That RPC also no longer reports the ban_reason field, as "manually added" is the only remaining option.

Discouragement cannot be removed with the setban remove RPC command. If you need to remove a discouragement, you can remove all discouragements by stop-starting your node.

Notification changes
-walletnotify notifications are now sent for wallet transactions that are removed from the mempool because they conflict with a new block. These notifications were sent previously before the v0.19 release, but had been broken since that release (bug #18325)

PSBT changes
PSBTs will contain both the non-witness utxo and the witness utxo for segwit inputs in order to restore compatibility with wallet software that are now requiring the full previous transaction for segwit inputs. The witness utxo is still provided to maintain compatibility with software which relied on its existence to determine whether an input was segwit.

0.20.1 change log
Mining
#19019 Fix GBT: Restore “!segwit” and “csv” to “rules” key (luke-jr)
P2P protocol and network code
#19219 Replace automatic bans with discouragement filter (sipa)
Wallet
#19300 Handle concurrent wallet loading (promag)
#18982 Minimal fix to restore conflicted transaction notifications (ryanofsky)
RPC and other APIs
#19524 Increment input value sum only once per UTXO in decodepsbt (fanquake)
#19517 psbt: Increment input value sum only once per UTXO in decodepsbt (achow101)
#19215 psbt: Include and allow both non_witness_utxo and witness_utxo for segwit inputs (achow101)
GUI
#19097 Add missing QPainterPath include (achow101)
#19059 update Qt base translations for macOS release (fanquake)
Build system
#19152 improve build OS configure output (skmcontrib)
#19536 qt, build: Fix QFileDialog for static builds (hebasto)
Tests and QA
#19444 Remove cached directories and associated script blocks from appveyor config (sipsorcery)
#18640 appveyor: Remove clcache (MarcoFalke)
Miscellaneous
#19194 util: Don’t reference errno when pthread fails (miztake)
#18700 Fix locking on WSL using flock instead of fcntl (meshcollider)
Credits
Thanks to everyone who directly contributed to this release:

Aaron Clauson
Andrew Chow
fanquake
Hennadii Stepanov
João Barbosa
Luke Dashjr
MarcoFalke
MIZUTA Takeshi
Pieter Wuille
Russell Yanofsky
sachinkm77
Samuel Dobson
Wladimir J. van der Laan
As well as to everyone that helped with translations on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core version 0.21.0 released
14 January 2021

0.21.0 Release Notes
0.21.0 Release Notes
Bitcoin Core version 0.21.0 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.21.0/

For the full release notes refer to:

https://bitcoincore.org/en/releases/0.21.0/


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core 0.21.1 released
0.21.1 Release Notes
Bitcoin Core version 0.21.1 is now available from:

https://bitcoin.org/bin/bitcoin-core-0.21.1/

This minor release includes various bug fixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoin.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes in some cases), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

Upgrading directly from a version of Bitcoin Core that has reached its EOL is possible, but it might take some time if the data directory needs to be migrated. Old wallet versions of Bitcoin Core are generally supported.

Compatibility
Bitcoin Core is supported and extensively tested on operating systems using the Linux kernel, macOS 10.12+, and Windows 7 and newer. Bitcoin Core should also work on most other Unix-like systems but is not as frequently tested on them. It is not recommended to use Bitcoin Core on unsupported systems.

From Bitcoin Core 0.20.0 onwards, macOS versions earlier than 10.12 are no longer supported. Additionally, Bitcoin Core does not yet change appearance when macOS “dark mode” is activated.

Notable changes
Taproot Soft Fork
Included in this release are the mainnet and testnet activation parameters for the taproot soft fork (BIP341) which also adds support for schnorr signatures (BIP340) and tapscript (BIP342).

If activated, these improvements will allow users of single-signature scripts, multisignature scripts, and complex contracts to all use identical-appearing commitments that enhance their privacy and the fungibility of all bitcoins. Spenders will enjoy lower fees and the ability to resolve many multisig scripts and complex contracts with the same efficiency, low fees, and large anonymity set as single-sig users. Taproot and schnorr also include efficiency improvements for full nodes such as the ability to batch signature verification. Together, the improvements lay the groundwork for future potential upgrades that may improve efficiency, privacy, and fungibility further.

Activation for taproot is being managed using a variation of BIP9 versionbits called Speedy Trial (described in BIP341). Taproot’s versionbit is bit 2, and nodes will begin tracking which blocks signal support for taproot at the beginning of the first retarget period after taproot’s start date of 24 April 2021. If 90% of blocks within a 2,016-block retarget period (about two weeks) signal support for taproot prior to the first retarget period beginning after the time of 11 August 2021, the soft fork will be locked in, and taproot will then be active as of block 709632 (expected in early or mid November).

Should taproot not be locked in via Speedy Trial activation, it is expected that a follow-up activation mechanism will be deployed, with changes to address the reasons the Speedy Trial method failed.

This release includes the ability to pay taproot addresses, although payments to such addresses are not secure until taproot activates. It also includes the ability to relay and mine taproot transactions after activation. Beyond those two basic capabilities, this release does not include any code that allows anyone to directly use taproot. The addition of taproot-related features to Bitcoin Core’s wallet is expected in later releases once taproot activation is assured.

All users, businesses, and miners are encouraged to upgrade to this release (or a subsequent compatible release) unless they object to activation of taproot. If taproot is locked in, then upgrading before block 709632 is highly recommended to help enforce taproot’s new rules and to avoid the unlikely case of seeing falsely confirmed transactions.

Miners who want to activate Taproot should preferably use this release to control their signaling. The getblocktemplate RPC results will automatically be updated to signal once the appropriate start has been reached and continue signaling until the timeout occurs or taproot activates. Alternatively, miners may manually start signaling on bit 2 at any time; if taproot activates, they will need to ensure they update their nodes before block 709632 or non-upgraded nodes could cause them to mine on an invalid chain. See the versionbits FAQ for details.

For more information about taproot, please see the following resources:

Technical specifications
BIP340 Schnorr signatures for secp256k1
BIP341 Taproot: SegWit version 1 spending rules
BIP342 Validation of Taproot scripts
Popular articles;
Taproot Is Coming: What It Is, and How It Will Benefit Bitcoin
What do Schnorr Signatures Mean for Bitcoin?
The Schnorr Signature & Taproot Softfork Proposal
Development history overview
Taproot
Schnorr signatures
Tapscript
Soft fork activation
Other
Questions and answers related to taproot
Taproot review
Updated RPCs
Due to BIP 350 being implemented, behavior for all RPCs that accept addresses is changed when a native witness version 1 (or higher) is passed. These now require a Bech32m encoding instead of a Bech32 one, and Bech32m encoding will be used for such addresses in RPC output as well. No version 1 addresses should be created for mainnet until consensus rules are adopted that give them meaning (e.g. through BIP 341). Once that happens, Bech32m is expected to be used for them, so this shouldn’t affect any production systems, but may be observed on other networks where such addresses already have meaning (like signet).
0.21.1 change log
Consensus
#21377 Speedy trial support for versionbits (ajtowns)
#21686 Speedy trial activation parameters for Taproot (achow101)
P2P protocol and network code
#20852 allow CSubNet of non-IP networks (vasild)
#21043 Avoid UBSan warning in ProcessMessage(…) (practicalswift)
Wallet
#21166 Introduce DeferredSignatureChecker and have SignatureExtractorClass subclass it (achow101)
#21083 Avoid requesting fee rates multiple times during coin selection (achow101)
RPC and other APIs
#21201 Disallow sendtoaddress and sendmany when private keys disabled (achow101)
Build system
#21486 link against -lsocket if required for *ifaddrs (fanquake)
#20983 Fix MSVC build after gui#176 (hebasto)
Tests and QA
#21380 Add fuzzing harness for versionbits (ajtowns)
#20812 fuzz: Bump FuzzedDataProvider.h (MarcoFalke)
#20740 fuzz: Update FuzzedDataProvider.h from upstream (LLVM) (practicalswift)
#21446 Update vcpkg checkout commit (sipsorcery)
#21397 fuzz: Bump FuzzedDataProvider.h (MarcoFalke)
#21081 Fix the unreachable code at feature_taproot (brunoerg)
#20562 Test that a fully signed tx given to signrawtx is unchanged (achow101)
#21571 Make sure non-IP peers get discouraged and disconnected (vasild, MarcoFalke)
#21489 fuzz: cleanups for versionbits fuzzer (ajtowns)
Miscellaneous
#20861 BIP 350: Implement Bech32m and use it for v1+ segwit addresses (sipa)
Documentation
#21384 add signet to bitcoin.conf documentation (jonatack)
#21342 Remove outdated comment (hebasto)
Credits
Thanks to everyone who directly contributed to this release:

Aaron Clauson
Andrew Chow
Anthony Towns
Bruno Garcia
Fabian Jahr
fanquake
Hennadii Stepanov
Jon Atack
Luke Dashjr
MarcoFalke
Pieter Wuille
practicalswift
randymcmillan
Sjors Provoost
Vasil Dimov
W. J. van der Laan
As well as to everyone that helped with translations on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core 22.0
22.0 Release Notes
Bitcoin Core version 22.0 is now available from:

https://bitcoincore.org/bin/bitcoin-core-22.0/

This release includes new features, various bug fixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes in some cases), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

Upgrading directly from a version of Bitcoin Core that has reached its EOL is possible, but it might take some time if the data directory needs to be migrated. Old wallet versions of Bitcoin Core are generally supported.

Compatibility
Bitcoin Core is supported and extensively tested on operating systems using the Linux kernel, macOS 10.14+, and Windows 7 and newer. Bitcoin Core should also work on most other Unix-like systems but is not as frequently tested on them. It is not recommended to use Bitcoin Core on unsupported systems.

From Bitcoin Core 22.0 onwards, macOS versions earlier than 10.14 are no longer supported.

Notable changes
P2P and network changes
Added support for running Bitcoin Core as an I2P (Invisible Internet Project) service and connect to such services. See i2p.md for details. (#20685)
This release removes support for Tor version 2 hidden services in favor of Tor v3 only, as the Tor network dropped support for Tor v2 with the release of Tor version 0.4.6. Henceforth, Bitcoin Core ignores Tor v2 addresses; it neither rumors them over the network to other peers, nor stores them in memory or to peers.dat. (#22050)

Added NAT-PMP port mapping support via libnatpmp. (#18077)
New and Updated RPCs
Due to BIP 350 being implemented, behavior for all RPCs that accept addresses is changed when a native witness version 1 (or higher) is passed. These now require a Bech32m encoding instead of a Bech32 one, and Bech32m encoding will be used for such addresses in RPC output as well. No version 1 addresses should be created for mainnet until consensus rules are adopted that give them meaning (as will happen through BIP 341). Once that happens, Bech32m is expected to be used for them, so this shouldn’t affect any production systems, but may be observed on other networks where such addresses already have meaning (like signet). (#20861)

The getpeerinfo RPC returns two new boolean fields, bip152_hb_to and bip152_hb_from, that respectively indicate whether we selected a peer to be in compact blocks high-bandwidth mode or whether a peer selected us as a compact blocks high-bandwidth peer. High-bandwidth peers send new block announcements via a cmpctblock message rather than the usual inv/headers announcements. See BIP 152 for more details. (#19776)

getpeerinfo no longer returns the following fields: addnode, banscore, and whitelisted, which were previously deprecated in 0.21. Instead of addnode, the connection_type field returns manual. Instead of whitelisted, the permissions field indicates if the peer has special privileges. The banscore field has simply been removed. (#20755)

The following RPCs: gettxout, getrawtransaction, decoderawtransaction, decodescript, gettransaction, and REST endpoints: /rest/tx, /rest/getutxos, /rest/block deprecated the following fields (which are no longer returned in the responses by default): addresses, reqSigs. The -deprecatedrpc=addresses flag must be passed for these fields to be included in the RPC response. This flag/option will be available only for this major release, after which the deprecation will be removed entirely. Note that these fields are attributes of the scriptPubKey object returned in the RPC response. However, in the response of decodescript these fields are top-level attributes, and included again as attributes of the scriptPubKey object. (#20286)

When creating a hex-encoded bitcoin transaction using the bitcoin-tx utility with the -json option set, the following fields: addresses, reqSigs are no longer returned in the tx output of the response. (#20286)

The listbanned RPC now returns two new numeric fields: ban_duration and time_remaining. Respectively, these new fields indicate the duration of a ban and the time remaining until a ban expires, both in seconds. Additionally, the ban_created field is repositioned to come before banned_until. (#21602)

The setban RPC can ban onion addresses again. This fixes a regression introduced in version 0.21.0. (#20852)

The getnodeaddresses RPC now returns a “network” field indicating the network type (ipv4, ipv6, onion, or i2p) for each address. (#21594)

getnodeaddresses now also accepts a “network” argument (ipv4, ipv6, onion, or i2p) to return only addresses of the specified network. (#21843)

The testmempoolaccept RPC now accepts multiple transactions (still experimental at the moment, API may be unstable). This is intended for testing transaction packages with dependency relationships; it is not recommended for batch-validating independent transactions. In addition to mempool policy, package policies apply: the list cannot contain more than 25 transactions or have a total size exceeding 101K virtual bytes, and cannot conflict with (spend the same inputs as) each other or the mempool, even if it would be a valid BIP125 replace-by-fee. There are some known limitations to the accuracy of the test accept: it’s possible for testmempoolaccept to return “allowed”=True for a group of transactions, but “too-long-mempool-chain” if they are actually submitted. (#20833)

addmultisigaddress and createmultisig now support up to 20 keys for Segwit addresses. (#20867)

Changes to Wallet or GUI related RPCs can be found in the GUI or Wallet section below.

Build System
Release binaries are now produced using the new guix-based build system. The /doc/release-process.md document has been updated accordingly.
Files
The list of banned hosts and networks (via setban RPC) is now saved on disk in JSON format in banlist.json instead of banlist.dat. banlist.dat is only read on startup if banlist.json is not present. Changes are only written to the new banlist.json. A future version of Bitcoin Core may completely ignore banlist.dat. (#20966)
New settings
The -natpmp option has been added to use NAT-PMP to map the listening port. If both UPnP and NAT-PMP are enabled, a successful allocation from UPnP prevails over one from NAT-PMP. (#18077)
Updated settings
Changes to Wallet or GUI related settings can be found in the GUI or Wallet section below.

Passing an invalid -rpcauth argument now cause bitcoind to fail to start. (#20461)
Tools and Utilities
A new CLI -addrinfo command returns the number of addresses known to the node per network type (including Tor v2 versus v3) and total. This can be useful to see if the node knows enough addresses in a network to use options like -onlynet=<network> or to upgrade to this release of Bitcoin Core 22.0 that supports Tor v3 only. (#21595)

A new -rpcwaittimeout argument to bitcoin-cli sets the timeout in seconds to use with -rpcwait. If the timeout expires, bitcoin-cli will report a failure. (#21056)

Wallet
External signers such as hardware wallets can now be used through the new RPC methods enumeratesigners and displayaddress. Support is also added to the send RPC call. This feature is experimental. See external-signer.md for details. (#16546)

A new listdescriptors RPC is available to inspect the contents of descriptor-enabled wallets. The RPC returns public versions of all imported descriptors, including their timestamp and flags. For ranged descriptors, it also returns the range boundaries and the next index to generate addresses from. (#20226)

The bumpfee RPC is not available with wallets that have private keys disabled. psbtbumpfee can be used instead. (#20891)

The fundrawtransaction, send and walletcreatefundedpsbt RPCs now support an include_unsafe option that when true allows using unsafe inputs to fund the transaction. Note that the resulting transaction may become invalid if one of the unsafe inputs disappears. If that happens, the transaction must be funded with different inputs and republished. (#21359)

We now support up to 20 keys in multi() and sortedmulti() descriptors under wsh(). (#20867)

Taproot descriptors can be imported into the wallet only after activation has occurred on the network (e.g. mainnet, testnet, signet) in use. See descriptors.md for supported descriptors.

GUI changes
External signers such as hardware wallets can now be used. These require an external tool such as HWI to be installed and configured under Options -> Wallet. When creating a new wallet a new option “External signer” will appear in the dialog. If the device is detected, its name is suggested as the wallet name. The watch-only keys are then automatically imported. Receive addresses can be verified on the device. The send dialog will automatically use the connected device. This feature is experimental and the UI may freeze for a few seconds when performing these actions.
Low-level changes
RPC
The RPC server can process a limited number of simultaneous RPC requests. Previously, if this limit was exceeded, the RPC server would respond with status code 500 (HTTP_INTERNAL_SERVER_ERROR). Now it returns status code 503 (HTTP_SERVICE_UNAVAILABLE). (#18335)

Error codes have been updated to be more accurate for the following error cases (#18466):

signmessage now returns RPC_INVALID_ADDRESS_OR_KEY (-5) if the passed address is invalid. Previously returned RPC_TYPE_ERROR (-3).
verifymessage now returns RPC_INVALID_ADDRESS_OR_KEY (-5) if the passed address is invalid. Previously returned RPC_TYPE_ERROR (-3).
verifymessage now returns RPC_TYPE_ERROR (-3) if the passed signature is malformed. Previously returned RPC_INVALID_ADDRESS_OR_KEY (-5).
Tests
22.0 change log
A detailed list of changes in this version follows. To keep the list to a manageable length, small refactors and typo fixes are not included, and similar changes are sometimes condensed into one line.

Consensus
#19438 Introduce deploymentstatus (ajtowns)
#20207 Follow-up extra comments on taproot code and tests (sipa)
#21330 Deal with missing data in signature hashes more consistently (sipa)
Policy
#18766 Disable fee estimation in blocksonly mode (by removing the fee estimates global) (darosior)
#20497 Add MAX_STANDARD_SCRIPTSIG_SIZE to policy (sanket1729)
#20611 Move TX_MAX_STANDARD_VERSION to policy (MarcoFalke)
Mining
#19937, bitcoin/bitcoin#20923 Signet mining utility (ajtowns)
Block and transaction handling
#14501 Fix possible data race when committing block files (luke-jr)
#15946 Allow maintaining the blockfilterindex when using prune (jonasschnelli)
#18710 Add local thread pool to CCheckQueue (hebasto)
#19521 Coinstats Index (fjahr)
#19806 UTXO snapshot activation (jamesob)
#19905 Remove dead CheckForkWarningConditionsOnNewFork (MarcoFalke)
#19935 Move SaltedHashers to separate file and add some new ones (achow101)
#20054 Remove confusing and useless “unexpected version” warning (MarcoFalke)
#20519 Handle rename failure in DumpMempool(…) by using the RenameOver(…) return value (practicalswift)
#20749, bitcoin/bitcoin#20750, bitcoin/bitcoin#21055, bitcoin/bitcoin#21270, bitcoin/bitcoin#21525, bitcoin/bitcoin#21391, bitcoin/bitcoin#21767, bitcoin/bitcoin#21866 Prune g_chainman usage (dongcarl)
#20833 rpc/validation: enable packages through testmempoolaccept (glozow)
#20834 Locks and docs in ATMP and CheckInputsFromMempoolAndCache (glozow)
#20854 Remove unnecessary try-block (amitiuttarwar)
#20868 Remove redundant check on pindex (jarolrod)
#20921 Don’t try to invalidate genesis block in CChainState::InvalidateBlock (theStack)
#20972 Locks: Annotate CTxMemPool::check to require cs_main (dongcarl)
#21009 Remove RewindBlockIndex logic (dhruv)
#21025 Guard chainman chainstates with cs_main (dongcarl)
#21202 Two small clang lock annotation improvements (amitiuttarwar)
#21523 Run VerifyDB on all chainstates (jamesob)
#21573 Update libsecp256k1 subtree to latest master (sipa)
#21582, bitcoin/bitcoin#21584, bitcoin/bitcoin#21585 Fix assumeutxo crashes (MarcoFalke)
#21681 Fix ActivateSnapshot to use hardcoded nChainTx (jamesob)
#21796 index: Avoid async shutdown on init error (MarcoFalke)
#21946 Document and test lack of inherited signaling in RBF policy (ariard)
#22084 Package testmempoolaccept followups (glozow)
#22102 Remove Warning: from warning message printed for unknown new rules (prayank23)
#22112 Force port 0 in I2P (vasild)
#22135 CRegTestParams: Use args instead of gArgs (kiminuo)
#22146 Reject invalid coin height and output index when loading assumeutxo (MarcoFalke)
#22253 Distinguish between same tx and same-nonwitness-data tx in mempool (glozow)
#22261 Two small fixes to node broadcast logic (jnewbery)
#22415 Make m_mempool optional in CChainState (jamesob)
#22499 Update assumed chain params (sriramdvt)
#22589 net, doc: update I2P hardcoded seeds and docs for 22.0 (jonatack)
P2P protocol and network code
#18077 Add NAT-PMP port forwarding support (hebasto)
#18722 addrman: improve performance by using more suitable containers (vasild)
#18819 Replace cs_feeFilter with simple std::atomic (MarcoFalke)
#19203 Add regression fuzz harness for CVE-2017-18350. Add FuzzedSocket (practicalswift)
#19288 fuzz: Add fuzzing harness for TorController (practicalswift)
#19415 Make DNS lookup mockable, add fuzzing harness (practicalswift)
#19509 Per-Peer Message Capture (troygiorshev)
#19763 Don’t try to relay to the address’ originator (vasild)
#19771 Replace enum CConnMan::NumConnections with enum class ConnectionDirection (luke-jr)
#19776 net, rpc: expose high bandwidth mode state via getpeerinfo (theStack)
#19832 Put disconnecting logs into BCLog::NET category (hebasto)
#19858 Periodically make block-relay connections and sync headers (sdaftuar)
#19884 No delay in adding fixed seeds if -dnsseed=0 and peers.dat is empty (dhruv)
#20079 Treat handshake misbehavior like unknown message (MarcoFalke)
#20138 Assume that SetCommonVersion is called at most once per peer (MarcoFalke)
#20162 p2p: declare Announcement::m_state as uint8_t, add getter/setter (jonatack)
#20197 Protect onions in AttemptToEvictConnection(), add eviction protection test coverage (jonatack)
#20210 assert CNode::m_inbound_onion is inbound in ctor, add getter, unit tests (jonatack)
#20228 addrman: Make addrman a top-level component (jnewbery)
#20234 Don’t bind on 0.0.0.0 if binds are restricted to Tor (vasild)
#20477 Add unit testing of node eviction logic (practicalswift)
#20516 Well-defined CAddress disk serialization, and addrv2 anchors.dat (sipa)
#20557 addrman: Fix new table bucketing during unserialization (jnewbery)
#20561 Periodically clear m_addr_known (sdaftuar)
#20599 net processing: Tolerate sendheaders and sendcmpct messages before verack (jnewbery)
#20616 Check CJDNS address is valid (lontivero)
#20617 Remove m_is_manual_connection from CNodeState (ariard)
#20624 net processing: Remove nStartingHeight check from block relay (jnewbery)
#20651 Make p2p recv buffer timeout 20 minutes for all peers (jnewbery)
#20661 Only select from addrv2-capable peers for torv3 address relay (sipa)
#20685 Add I2P support using I2P SAM (vasild)
#20690 Clean up logging of outbound connection type (sdaftuar)
#20721 Move ping data to net_processing (jnewbery)
#20724 Cleanup of -debug=net log messages (ajtowns)
#20747 net processing: Remove dropmessagestest (jnewbery)
#20764 cli -netinfo peer connections dashboard updates 🎄 ✨ (jonatack)
#20788 add RAII socket and use it instead of bare SOCKET (vasild)
#20791 remove unused legacyWhitelisted in AcceptConnection() (jonatack)
#20816 Move RecordBytesSent() call out of cs_vSend lock (jnewbery)
#20845 Log to net debug in MaybeDiscourageAndDisconnect except for noban and manual peers (MarcoFalke)
#20864 Move SocketSendData lock annotation to header (MarcoFalke)
#20965 net, rpc: return NET_UNROUTABLE as not_publicly_routable, automate helps (jonatack)
#20966 banman: save the banlist in a JSON format on disk (vasild)
#21015 Make all of net_processing (and some of net) use std::chrono types (dhruv)
#21029 bitcoin-cli: Correct docs (no “generatenewaddress” exists) (luke-jr)
#21148 Split orphan handling from net_processing into txorphanage (ajtowns)
#21162 Net Processing: Move RelayTransaction() into PeerManager (jnewbery)
#21167 make CNode::m_inbound_onion public, initialize explicitly (jonatack)
#21186 net/net processing: Move addr data into net_processing (jnewbery)
#21187 Net processing: Only call PushAddress() from net_processing (jnewbery)
#21198 Address outstanding review comments from PR20721 (jnewbery)
#21222 log: Clarify log message when file does not exist (MarcoFalke)
#21235 Clarify disconnect log message in ProcessGetBlockData, remove send bool (MarcoFalke)
#21236 Net processing: Extract addr send functionality into MaybeSendAddr() (jnewbery)
#21261 update inbound eviction protection for multiple networks, add I2P peers (jonatack)
#21328 net, refactor: pass uint16 CService::port as uint16 (jonatack)
#21387 Refactor sock to add I2P fuzz and unit tests (vasild)
#21395 Net processing: Remove unused CNodeState.address member (jnewbery)
#21407 i2p: limit the size of incoming messages (vasild)
#21506 p2p, refactor: make NetPermissionFlags an enum class (jonatack)
#21509 Don’t send FEEFILTER in blocksonly mode (mzumsande)
#21560 Add Tor v3 hardcoded seeds (laanwj)
#21563 Restrict period when cs_vNodes mutex is locked (hebasto)
#21564 Avoid calling getnameinfo when formatting IPv4 addresses in CNetAddr::ToStringIP (practicalswift)
#21631 i2p: always check the return value of Sock::Wait() (vasild)
#21644 p2p, bugfix: use NetPermissions::HasFlag() in CConnman::Bind() (jonatack)
#21659 flag relevant Sock methods with [[nodiscard]] (vasild)
#21750 remove unnecessary check of CNode::cs_vSend (vasild)
#21756 Avoid calling getnameinfo when formatting IPv6 addresses in CNetAddr::ToStringIP (practicalswift)
#21775 Limit m_block_inv_mutex (MarcoFalke)
#21825 Add I2P hardcoded seeds (jonatack)
#21843 p2p, rpc: enable GetAddr, GetAddresses, and getnodeaddresses by network (jonatack)
#21845 net processing: Don’t require locking cs_main before calling RelayTransactions() (jnewbery)
#21872 Sanitize message type for logging (laanwj)
#21914 Use stronger AddLocal() for our I2P address (vasild)
#21985 Return IPv6 scope id in CNetAddr::ToStringIP() (laanwj)
#21992 Remove -feefilter option (amadeuszpawlik)
#21996 Pass strings to NetPermissions::TryParse functions by const ref (jonatack)
#22013 ignore block-relay-only peers when skipping DNS seed (ajtowns)
#22050 Remove tor v2 support (jonatack)
#22096 AddrFetch - don’t disconnect on self-announcements (mzumsande)
#22141 net processing: Remove hash and fValidatedHeaders from QueuedBlock (jnewbery)
#22144 Randomize message processing peer order (sipa)
#22147 Protect last outbound HB compact block peer (sdaftuar)
#22179 Torv2 removal followups (vasild)
#22211 Relay I2P addresses even if not reachable (by us) (vasild)
#22284 Performance improvements to ProtectEvictionCandidatesByRatio() (jonatack)
#22387 Rate limit the processing of rumoured addresses (sipa)
#22455 addrman: detect on-disk corrupted nNew and nTried during unserialization (vasild)
Wallet
#15710 Catch ios_base::failure specifically (Bushstar)
#16546 External signer support - Wallet Box edition (Sjors)
#17331 Use effective values throughout coin selection (achow101)
#18418 Increase OUTPUT_GROUP_MAX_ENTRIES to 100 (fjahr)
#18842 Mark replaced tx to not be in the mempool anymore (MarcoFalke)
#19136 Add parent_desc to getaddressinfo (achow101)
#19137 wallettool: Add dump and createfromdump commands (achow101)
#19651 importdescriptors update existing (S3RK)
#20040 Refactor OutputGroups to handle fees and spending eligibility on grouping (achow101)
#20202 Make BDB support optional (achow101)
#20226, bitcoin/bitcoin#21277, - #21063 Add listdescriptors command (S3RK)
#20267 Disable and fix tests for when BDB is not compiled (achow101)
#20275 List all wallets in non-SQLite and non-BDB builds (ryanofsky)
#20365 wallettool: Add parameter to create descriptors wallet (S3RK)
#20403 upgradewallet fixes, improvements, test coverage (jonatack)
#20448 unloadwallet: Allow specifying wallet_name param matching RPC endpoint wallet (luke-jr)
#20536 Error with “Transaction too large” if the funded tx will end up being too large after signing (achow101)
#20687 Add missing check for -descriptors wallet tool option (MarcoFalke)
#20952 Add BerkeleyDB version sanity check at init time (laanwj)
#21127 Load flags before everything else (Sjors)
#21141 Add new format string placeholders for walletnotify (maayank)
#21238 A few descriptor improvements to prepare for Taproot support (sipa)
#21302 createwallet examples for descriptor wallets (S3RK)
#21329 descriptor wallet: Cache last hardened xpub and use in normalized descriptors (achow101)
#21365 Basic Taproot signing support for descriptor wallets (sipa)
#21417 Misc external signer improvement and HWI 2 support (Sjors)
#21467 Move external signer out of wallet module (Sjors)
#21572 Fix wrong wallet RPC context set after #21366 (ryanofsky)
#21574 Drop JSONRPCRequest constructors after #21366 (ryanofsky)
#21666 Miscellaneous external signer changes (fanquake)
#21759 Document coin selection code (glozow)
#21786 Ensure sat/vB feerates are in range (mantissa of 3) (jonatack)
#21944 Fix issues when walletdir is root directory (prayank23)
#22042 Replace size/weight estimate tuple with struct for named fields (instagibbs)
#22051 Basic Taproot derivation support for descriptors (sipa)
#22154 Add OutputType::BECH32M and related wallet support for fetching bech32m addresses (achow101)
#22156 Allow tr() import only when Taproot is active (achow101)
#22166 Add support for inferring tr() descriptors (sipa)
#22173 Do not load external signers wallets when unsupported (achow101)
#22308 Add missing BlockUntilSyncedToCurrentChain (MarcoFalke)
#22334 Do not spam about non-existent spk managers (S3RK)
#22379 Erase spkmans rather than setting to nullptr (achow101)
#22421 Make IsSegWitOutput return true for taproot outputs (sipa)
#22461 Change ScriptPubKeyMan::Upgrade default to True (achow101)
#22492 Reorder locks in dumpwallet to avoid lock order assertion (achow101)
#22686 Use GetSelectionAmount in ApproximateBestSubset (achow101)
RPC and other APIs
#18335, bitcoin/bitcoin#21484 cli: Print useful error if bitcoind rpc work queue exceeded (LarryRuane)
#18466 Fix invalid parameter error codes for {sign,verify}message RPCs (theStack)
#18772 Calculate fees in getblock using BlockUndo data (robot-visions)
#19033 http: Release work queue after event base finish (promag)
#19055 Add MuHash3072 implementation (fjahr)
#19145 Add hash_type MUHASH for gettxoutsetinfo (fjahr)
#19847 Avoid duplicate set lookup in gettxoutproof (promag)
#20286 Deprecate addresses and reqSigs from RPC outputs (mjdietzx)
#20459 Fail to return undocumented return values (MarcoFalke)
#20461 Validate -rpcauth arguments (promag)
#20556 Properly document return values (submitblock, gettxout, getblocktemplate, scantxoutset) (MarcoFalke)
#20755 Remove deprecated fields from getpeerinfo (amitiuttarwar)
#20832 Better error messages for invalid addresses (eilx2)
#20867 Support up to 20 keys for multisig under Segwit context (darosior)
#20877 cli: -netinfo user help and argument parsing improvements (jonatack)
#20891 Remove deprecated bumpfee behavior (achow101)
#20916 Return wtxid from testmempoolaccept (MarcoFalke)
#20917 Add missing signet mentions in network name lists (theStack)
#20941 Document RPC_TRANSACTION_ALREADY_IN_CHAIN exception (jarolrod)
#20944 Return total fee in getmempoolinfo (MarcoFalke)
#20964 Add specific error code for “wallet already loaded” (laanwj)
#21053 Document {previous,next}blockhash as optional (theStack)
#21056 Add a -rpcwaittimeout parameter to limit time spent waiting (cdecker)
#21192 cli: Treat high detail levels as maximum in -netinfo (laanwj)
#21311 Document optional fields for getchaintxstats result (theStack)
#21359 include_unsafe option for fundrawtransaction (t-bast)
#21426 Remove scantxoutset EXPERIMENTAL warning (jonatack)
#21544 Missing doc updates for bumpfee psbt update (MarcoFalke)
#21594 Add network field to getnodeaddresses (jonatack)
#21595, bitcoin/bitcoin#21753 cli: Create -addrinfo (jonatack)
#21602 Add additional ban time fields to listbanned (jarolrod)
#21679 Keep default argument value in correct type (promag)
#21718 Improve error message for getblock invalid datatype (klementtan)
#21913 RPCHelpMan fixes (kallewoof)
#22021 bumpfee/psbtbumpfee fixes and updates (jonatack)
#22043 addpeeraddress test coverage, code simplify/constness (jonatack)
#22327 cli: Avoid truncating -rpcwaittimeout (MarcoFalke)
GUI
#18948 Call setParent() in the parent’s context (hebasto)
#20482 Add depends qt fix for ARM macs (jonasschnelli)
#21836 scripted-diff: Replace three dots with ellipsis in the ui strings (hebasto)
#21935 Enable external signer support for GUI builds (Sjors)
#22133 Make QWindowsVistaStylePlugin available again (regression) (hebasto)
gui#4 UI external signer support (e.g. hardware wallet) (Sjors)
gui#13 Hide peer detail view if multiple are selected (promag)
gui#18 Add peertablesortproxy module (hebasto)
gui#21 Improve pruning tooltip (fluffypony, BitcoinErrorLog)
gui#72 Log static plugins meta data and used style (hebasto)
gui#79 Embed monospaced font (hebasto)
gui#85 Remove unused “What’s This” button in dialogs on Windows OS (hebasto)
gui#115 Replace “Hide tray icon” option with positive “Show tray icon” one (hebasto)
gui#118 Remove BDB version from the Information tab (hebasto)
gui#121 Early subscribe core signals in transaction table model (promag)
gui#123 Do not accept command while executing another one (hebasto)
gui#125 Enable changing the autoprune block space size in intro dialog (luke-jr)
gui#138 Unlock encrypted wallet “OK” button bugfix (mjdietzx)
gui#139 doc: Improve gui/src/qt README.md (jarolrod)
gui#154 Support macOS Dark mode (goums, Uplab)
gui#162 Add network to peers window and peer details (jonatack)
gui#163, bitcoin-core/gui#180 Peer details: replace Direction with Connection Type (jonatack)
gui#164 Handle peer addition/removal in a right way (hebasto)
gui#165 Save QSplitter state in QSettings (hebasto)
gui#173 Follow Qt docs when implementing rowCount and columnCount (hebasto)
gui#179 Add Type column to peers window, update peer details name/tooltip (jonatack)
gui#186 Add information to “Confirm fee bump” window (prayank23)
gui#189 Drop workaround for QTBUG-42503 which was fixed in Qt 5.5.0 (prusnak)
gui#194 Save/restore RPCConsole geometry only for window (hebasto)
gui#202 Fix right panel toggle in peers tab (RandyMcMillan)
gui#203 Display plain “Inbound” in peer details (jonatack)
gui#204 Drop buggy TableViewLastColumnResizingFixer class (hebasto)
gui#205, bitcoin-core/gui#229 Save/restore TransactionView and recentRequestsView tables column sizes (hebasto)
gui#206 Display fRelayTxes and bip152_highbandwidth_{to, from} in peer details (jonatack)
gui#213 Add Copy Address Action to Payment Requests (jarolrod)
gui#214 Disable requests context menu actions when appropriate (jarolrod)
gui#217 Make warning label look clickable (jarolrod)
gui#219 Prevent the main window popup menu (hebasto)
gui#220 Do not translate file extensions (hebasto)
gui#221 RPCConsole translatable string fixes and improvements (jonatack)
gui#226 Add “Last Block” and “Last Tx” rows to peer details area (jonatack)
gui#233 qt test: Don’t bind to regtest port (achow101)
gui#243 Fix issue when disabling the auto-enabled blank wallet checkbox (jarolrod)
gui#246 Revert “qt: Use “fusion” style on macOS Big Sur with old Qt” (hebasto)
gui#248 For values of “Bytes transferred” and “Bytes/s” with 1000-based prefix names use 1000-based divisor instead of 1024-based (wodry)
gui#251 Improve URI/file handling message (hebasto)
gui#256 Save/restore column sizes of the tables in the Peers tab (hebasto)
gui#260 Handle exceptions isntead of crash (hebasto)
gui#263 Revamp context menus (hebasto)
gui#271 Don’t clear console prompt when font resizing (jarolrod)
gui#275 Support runtime appearance adjustment on macOS (hebasto)
gui#276 Elide long strings in their middle in the Peers tab (hebasto)
gui#281 Set shortcuts for console’s resize buttons (jarolrod)
gui#293 Enable wordWrap for Services (RandyMcMillan)
gui#296 Do not use QObject::tr plural syntax for numbers with a unit symbol (hebasto)
gui#297 Avoid unnecessary translations (hebasto)
gui#298 Peertableview alternating row colors (RandyMcMillan)
gui#300 Remove progress bar on modal overlay (brunoerg)
gui#309 Add access to the Peers tab from the network icon (hebasto)
gui#311 Peers Window rename ‘Peer id’ to ‘Peer’ (jarolrod)
gui#313 Optimize string concatenation by default (hebasto)
gui#325 Align numbers in the “Peer Id” column to the right (hebasto)
gui#329 Make console buttons look clickable (jarolrod)
gui#330 Allow prompt icon to be colorized (jarolrod)
gui#331 Make RPC console welcome message translation-friendly (hebasto)
gui#332 Replace disambiguation strings with translator comments (hebasto)
gui#335 test: Use QSignalSpy instead of QEventLoop (jarolrod)
gui#343 Improve the GUI responsiveness when progress dialogs are used (hebasto)
gui#361 Fix GUI segfault caused by bitcoin/bitcoin#22216 (ryanofsky)
gui#362 Add keyboard shortcuts to context menus (luke-jr)
gui#366 Dark Mode fixes/portability (luke-jr)
gui#375 Emit dataChanged signal to dynamically re-sort Peers table (hebasto)
gui#393 Fix regression in “Encrypt Wallet” menu item (hebasto)
gui#396 Ensure external signer option remains disabled without signers (achow101)
gui#406 Handle new added plurals in bitcoin_en.ts (hebasto)
Build system
#17227 Add Android packaging support (icota)
#17920 guix: Build support for macOS (dongcarl)
#18298 Fix Qt processing of configure script for depends with DEBUG=1 (hebasto)
#19160 multiprocess: Add basic spawn and IPC support (ryanofsky)
#19504 Bump minimum python version to 3.6 (ajtowns)
#19522 fix building libconsensus with reduced exports for Darwin targets (fanquake)
#19683 Pin clang search paths for darwin host (dongcarl)
#19764 Split boost into build/host packages + bump + cleanup (dongcarl)
#19817 libtapi 1100.0.11 (fanquake)
#19846 enable unused member function diagnostic (Zero-1729)
#19867 Document and cleanup Qt hacks (fanquake)
#20046 Set CMAKE_INSTALL_RPATH for native packages (ryanofsky)
#20223 Drop the leading 0 from the version number (achow101)
#20333 Remove native_biplist dependency (fanquake)
#20353 configure: Support -fdebug-prefix-map and -fmacro-prefix-map (ajtowns)
#20359 Various config.site.in improvements and linting (dongcarl)
#20413 Require C++17 compiler (MarcoFalke)
#20419 Set minimum supported macOS to 10.14 (fanquake)
#20421 miniupnpc 2.2.2 (fanquake)
#20422 Mac deployment unification (fanquake)
#20424 Update univalue subtree (MarcoFalke)
#20449 Fix Windows installer build (achow101)
#20468 Warn when generating man pages for binaries built from a dirty branch (tylerchambers)
#20469 Avoid secp256k1.h include from system (dergoegge)
#20470 Replace genisoimage with xorriso (dongcarl)
#20471 Use C++17 in depends (fanquake)
#20496 Drop unneeded macOS framework dependencies (hebasto)
#20520 Do not force Precompiled Headers (PCH) for building Qt on Linux (hebasto)
#20549 Support make src/bitcoin-node and src/bitcoin-gui (promag)
#20565 Ensure PIC build for bdb on Android (BlockMechanic)
#20594 Fix getauxval calls in randomenv.cpp (jonasschnelli)
#20603 Update crc32c subtree (MarcoFalke)
#20609 configure: output notice that test binary is disabled by fuzzing (apoelstra)
#20619 guix: Quality of life improvements (dongcarl)
#20629 Improve id string robustness (dongcarl)
#20641 Use Qt top-level build facilities (hebasto)
#20650 Drop workaround for a fixed bug in Qt build system (hebasto)
#20673 Use more legible qmake commands in qt package (hebasto)
#20684 Define .INTERMEDIATE target once only (hebasto)
#20720 more robustly check for fcf-protection support (fanquake)
#20734 Make platform-specific targets available for proper platform builds only (hebasto)
#20936 build fuzz tests by default (danben)
#20937 guix: Make nsis reproducible by respecting SOURCE-DATE-EPOCH (dongcarl)
#20938 fix linking against -latomic when building for riscv (fanquake)
#20939 fix RELOC_SECTION security check for bitcoin-util (fanquake)
#20963 gitian-linux: Build binaries for 64-bit POWER (continued) (laanwj)
#21036 gitian: Bump descriptors to focal for 22.0 (fanquake)
#21045 Adds switch to enable/disable randomized base address in MSVC builds (EthanHeilman)
#21065 make macOS HOST in download-osx generic (fanquake)
#21078 guix: only download sources for hosts being built (fanquake)
#21116 Disable –disable-fuzz-binary for gitian/guix builds (hebasto)
#21182 remove mostly pointless BOOST_PROCESS macro (fanquake)
#21205 actually fail when Boost is missing (fanquake)
#21209 use newer source for libnatpmp (fanquake)
#21226 Fix fuzz binary compilation under windows (danben)
#21231 Add /opt/homebrew to path to look for boost libraries (fyquah)
#21239 guix: Add codesignature attachment support for osx+win (dongcarl)
#21250 Make HAVE_O_CLOEXEC available outside LevelDB (bugfix) (theStack)
#21272 guix: Passthrough SDK_PATH into container (dongcarl)
#21274 assumptions: Assume C++17 (fanquake)
#21286 Bump minimum Qt version to 5.9.5 (hebasto)
#21298 guix: Bump time-machine, glibc, and linux-headers (dongcarl)
#21304 guix: Add guix-clean script + establish gc-root for container profiles (dongcarl)
#21320 fix libnatpmp macos cross compile (fanquake)
#21321 guix: Add curl to required tool list (hebasto)
#21333 set Unicode true for NSIS installer (fanquake)
#21339 Make AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER]) unconditional (hebasto)
#21349 Fix fuzz-cuckoocache cross-compiling with DEBUG=1 (hebasto)
#21354 build, doc: Drop no longer required packages from macOS cross-compiling dependencies (hebasto)
#21363 build, qt: Improve Qt static plugins/libs check code (hebasto)
#21375 guix: Misc feedback-based fixes + hier restructuring (dongcarl)
#21376 Qt 5.12.10 (fanquake)
#21382 Clean remnants of QTBUG-34748 fix (hebasto)
#21400 Fix regression introduced in #21363 (hebasto)
#21403 set –build when configuring packages in depends (fanquake)
#21421 don’t try and use -fstack-clash-protection on Windows (fanquake)
#21423 Cleanups and follow ups after bumping Qt to 5.12.10 (hebasto)
#21427 Fix id_string invocations (dongcarl)
#21430 Add -Werror=implicit-fallthrough compile flag (hebasto)
#21457 Split libtapi and clang out of native_cctools (fanquake)
#21462 guix: Add guix-{attest,verify} scripts (dongcarl)
#21495 build, qt: Fix static builds on macOS Big Sur (hebasto)
#21497 Do not opt-in unused CoreWLAN stuff in depends for macOS (hebasto)
#21543 Enable safe warnings for msvc builds (hebasto)
#21565 Make bitcoin_qt.m4 more generic (fanquake)
#21610 remove -Wdeprecated-register from NOWARN flags (fanquake)
#21613 enable -Wdocumentation (fanquake)
#21629 Fix configuring when building depends with NO_BDB=1 (fanquake)
#21654 build, qt: Make Qt rcc output always deterministic (hebasto)
#21655 build, qt: No longer need to set QT_RCC_TEST=1 for determinism (hebasto)
#21658 fix make deploy for arm64-darwin (sgulls)
#21694 Use XLIFF file to provide more context to Transifex translators (hebasto)
#21708, bitcoin/bitcoin#21593 Drop pointless sed commands (hebasto)
#21731 Update msvc build to use Qt5.12.10 binaries (sipsorcery)
#21733 Re-add command to install vcpkg (dplusplus1024)
#21793 Use -isysroot over --sysroot on macOS (fanquake)
#21869 Add missing -D_LIBCPP_DEBUG=1 to debug flags (MarcoFalke)
#21889 macho: check for control flow instrumentation (fanquake)
#21920 Improve macro for testing -latomic requirement (MarcoFalke)
#21991 libevent 2.1.12-stable (fanquake)
#22054 Bump Qt version to 5.12.11 (hebasto)
#22063 Use Qt archive of the same version as the compiled binaries (hebasto)
#22070 Don’t use cf-protection when targeting arm-apple-darwin (fanquake)
#22071 Latest config.guess and config.sub (fanquake)
#22075 guix: Misc leftover usability improvements (dongcarl)
#22123 Fix qt.mk for mac arm64 (promag)
#22174 build, qt: Fix libraries linking order for Linux hosts (hebasto)
#22182 guix: Overhaul how guix-{attest,verify} works and hierarchy (dongcarl)
#22186 build, qt: Fix compiling qt package in depends with GCC 11 (hebasto)
#22199 macdeploy: minor fixups and simplifications (fanquake)
#22230 Fix MSVC linker /SubSystem option for bitcoin-qt.exe (hebasto)
#22234 Mark print-% target as phony (dgoncharov)
#22238 improve detection of eBPF support (fanquake)
#22258 Disable deprecated-copy warning only when external warnings are enabled (MarcoFalke)
#22320 set minimum required Boost to 1.64.0 (fanquake)
#22348 Fix cross build for Windows with Boost Process (hebasto)
#22365 guix: Avoid relying on newer symbols by rebasing our cross toolchains on older glibcs (dongcarl)
#22381 guix: Test security-check sanity before performing them (with macOS) (fanquake)
#22405 Remove –enable-glibc-back-compat from Guix build (fanquake)
#22406 Remove –enable-determinism configure option (fanquake)
#22410 Avoid GCC 7.1 ABI change warning in guix build (sipa)
#22436 use aarch64 Clang if cross-compiling for darwin on aarch64 (fanquake)
#22465 guix: Pin kernel-header version, time-machine to upstream 1.3.0 commit (dongcarl)
#22511 guix: Silence getent(1) invocation, doc fixups (dongcarl)
#22531 guix: Fixes to guix-{attest,verify} (achow101)
#22642 release: Release with separate sha256sums and sig files (dongcarl)
#22685 clientversion: No suffix #if CLIENT_VERSION_IS_RELEASE (dongcarl)
#22713 Fix build with Boost 1.77.0 (sizeofvoid)
Tests and QA
#14604 Add test and refactor feature_block.py (sanket1729)
#17556 Change feature_config_args.py not to rely on strange regtest=0 behavior (ryanofsky)
#18795 wallet issue with orphaned rewards (domob1812)
#18847 compressor: Use a prevector in CompressScript serialization (jb55)
#19259 fuzz: Add fuzzing harness for LoadMempool(…) and DumpMempool(…) (practicalswift)
#19315 Allow outbound & block-relay-only connections in functional tests. (amitiuttarwar)
#19698 Apply strict verification flags for transaction tests and assert backwards compatibility (glozow)
#19801 Check for all possible OP_CLTV fail reasons in feature_cltv.py (BIP 65) (theStack)
#19893 Remove or explain syncwithvalidationinterfacequeue (MarcoFalke)
#19972 fuzz: Add fuzzing harness for node eviction logic (practicalswift)
#19982 Fix inconsistent lock order in wallet_tests/CreateWallet (hebasto)
#20000 Fix creation of “std::string”s with \0s (vasild)
#20047 Use wait_for_{block,header} helpers in p2p_fingerprint.py (theStack)
#20171 Add functional test test_txid_inv_delay (ariard)
#20189 Switch to BIP341’s suggested scheme for outputs without script (sipa)
#20248 Fix length of R check in key_signature_tests (dgpv)
#20276, bitcoin/bitcoin#20385, bitcoin/bitcoin#20688, bitcoin/bitcoin#20692 Run various mempool tests even with wallet disabled (mjdietzx)
#20323 Create or use existing properly initialized NodeContexts (dongcarl)
#20354 Add feature_taproot.py --previous_release (MarcoFalke)
#20370 fuzz: Version handshake (MarcoFalke)
#20377 fuzz: Fill various small fuzzing gaps (practicalswift)
#20425 fuzz: Make CAddrMan fuzzing harness deterministic (practicalswift)
#20430 Sanitizers: Add suppression for unsigned-integer-overflow in libstdc++ (jonasschnelli)
#20437 fuzz: Avoid time-based “non-determinism” in fuzzing harnesses by using mocked GetTime() (practicalswift)
#20458 Add is_bdb_compiled helper (Sjors)
#20466 Fix intermittent p2p_fingerprint issue (MarcoFalke)
#20472 Add testing of ParseInt/ParseUInt edge cases with leading +/-/0:s (practicalswift)
#20507 sync: print proper lock order location when double lock is detected (vasild)
#20522 Fix sync issue in disconnect_p2ps (amitiuttarwar)
#20524 Move MIN_VERSION_SUPPORTED to p2p.py (jnewbery)
#20540 Fix wallet_multiwallet issue on windows (MarcoFalke)
#20560 fuzz: Link all targets once (MarcoFalke)
#20567 Add option to git-subtree-check to do full check, add help (laanwj)
#20569 Fix intermittent wallet_multiwallet issue with got_loading_error (MarcoFalke)
#20613 Use Popen.wait instead of RPC in assert_start_raises_init_error (MarcoFalke)
#20663 fuzz: Hide script_assets_test_minimizer (MarcoFalke)
#20674 fuzz: Call SendMessages after ProcessMessage to increase coverage (MarcoFalke)
#20683 Fix restart node race (MarcoFalke)
#20686 fuzz: replace CNode code with fuzz/util.h::ConsumeNode() (jonatack)
#20733 Inline non-member functions with body in fuzzing headers (pstratem)
#20737 Add missing assignment in mempool_resurrect.py (MarcoFalke)
#20745 Correct epoll_ctl data race suppression (hebasto)
#20748 Add race:SendZmqMessage tsan suppression (MarcoFalke)
#20760 Set correct nValue for multi-op-return policy check (MarcoFalke)
#20761 fuzz: Check that NULL_DATA is unspendable (MarcoFalke)
#20765 fuzz: Check that certain script TxoutType are nonstandard (mjdietzx)
#20772 fuzz: Bolster ExtractDestination(s) checks (mjdietzx)
#20789 fuzz: Rework strong and weak net enum fuzzing (MarcoFalke)
#20828 fuzz: Introduce CallOneOf helper to replace switch-case (MarcoFalke)
#20839 fuzz: Avoid extraneous copy of input data, using Span<> (MarcoFalke)
#20844 Add sanitizer suppressions for AMD EPYC CPUs (MarcoFalke)
#20857 Update documentation in feature_csv_activation.py (PiRK)
#20876 Replace getmempoolentry with testmempoolaccept in MiniWallet (MarcoFalke)
#20881 fuzz: net permission flags in net processing (MarcoFalke)
#20882 fuzz: Add missing muhash registration (MarcoFalke)
#20908 fuzz: Use mocktime in process_message* fuzz targets (MarcoFalke)
#20915 fuzz: Fail if message type is not fuzzed (MarcoFalke)
#20946 fuzz: Consolidate fuzzing TestingSetup initialization (dongcarl)
#20954 Declare nodes type in test_framework.py (kiminuo)
#20955 Fix get_previous_releases.py for aarch64 (MarcoFalke)
#20969 check that getblockfilter RPC fails without block filter index (theStack)
#20971 Work around libFuzzer deadlock (MarcoFalke)
#20993 Store subversion (user agent) as string in msg_version (theStack)
#20995 fuzz: Avoid initializing version to less than MIN_PEER_PROTO_VERSION (MarcoFalke)
#20998 Fix BlockToJsonVerbose benchmark (martinus)
#21003 Move MakeNoLogFileContext to libtest_util, and use it in bench (MarcoFalke)
#21008 Fix zmq test flakiness, improve speed (theStack)
#21023 fuzz: Disable shuffle when merge=1 (MarcoFalke)
#21037 fuzz: Avoid designated initialization (C++20) in fuzz tests (practicalswift)
#21042 doc, test: Improve setup_clean_chain documentation (fjahr)
#21080 fuzz: Configure check for main function (take 2) (MarcoFalke)
#21084 Fix timeout decrease in feature_assumevalid (brunoerg)
#21096 Re-add dead code detection (flack)
#21100 Remove unused function xor_bytes (theStack)
#21115 Fix Windows cross build (hebasto)
#21117 Remove assert_blockchain_height (MarcoFalke)
#21121 Small unit test improvements, including helper to make mempool transaction (amitiuttarwar)
#21124 Remove unnecessary assignment in bdb (brunoerg)
#21125 Change BOOST_CHECK to BOOST_CHECK_EQUAL for paths (kiminuo)
#21142, bitcoin/bitcoin#21512 fuzz: Add tx_pool fuzz target (MarcoFalke)
#21165 Use mocktime in test_seed_peers (dhruv)
#21169 fuzz: Add RPC interface fuzzing. Increase fuzzing coverage from 65% to 70% (practicalswift)
#21170 bench: Add benchmark to write json into a string (martinus)
#21178 Run mempool_reorg.py even with wallet disabled (DariusParvin)
#21185 fuzz: Remove expensive and redundant muhash from crypto fuzz target (MarcoFalke)
#21200 Speed up rpc_blockchain.py by removing miniwallet.generate() (MarcoFalke)
#21211 Move P2WSH_OP_TRUE to shared test library (MarcoFalke)
#21228 Avoid comparision of integers with different signs (jonasschnelli)
#21230 Fix NODE_NETWORK_LIMITED_MIN_BLOCKS disconnection (MarcoFalke)
#21252 Add missing wait for sync to feature_blockfilterindex_prune (MarcoFalke)
#21254 Avoid connecting to real network when running tests (MarcoFalke)
#21264 fuzz: Two scripted diff renames (MarcoFalke)
#21280 Bug fix in transaction_tests (glozow)
#21293 Replace accidentally placed bit-OR with logical-OR (hebasto)
#21297 feature_blockfilterindex_prune.py improvements (jonatack)
#21310 zmq test: fix sync-up by matching notification to generated block (theStack)
#21334 Additional BIP9 tests (Sjors)
#21338 Add functional test for anchors.dat (brunoerg)
#21345 Bring p2p_leak.py up to date (mzumsande)
#21357 Unconditionally check for fRelay field in test framework (jarolrod)
#21358 fuzz: Add missing include (test/util/setup_common.h) (MarcoFalke)
#21371 fuzz: fix gcc Woverloaded-virtual build warnings (jonatack)
#21373 Generate fewer blocks in feature_nulldummy to fix timeouts, speed up (jonatack)
#21390 Test improvements for UTXO set hash tests (fjahr)
#21410 increase rpc_timeout for fundrawtx test_transaction_too_large (jonatack)
#21411 add logging, reduce blocks, move sync_all in wallet_ groups (jonatack)
#21438 Add ParseUInt8() test coverage (jonatack)
#21443 fuzz: Implement fuzzed_dns_lookup_function as a lambda (practicalswift)
#21445 cirrus: Use SSD cluster for speedup (MarcoFalke)
#21477 Add test for CNetAddr::ToString IPv6 address formatting (RFC 5952) (practicalswift)
#21487 fuzz: Use ConsumeWeakEnum in addrman for service flags (MarcoFalke)
#21488 Add ParseUInt16() unit test and fuzz coverage (jonatack)
#21491 test: remove duplicate assertions in util_tests (jonatack)
#21522 fuzz: Use PickValue where possible (MarcoFalke)
#21531 remove qt byteswap compattests (fanquake)
#21557 small cleanup in RPCNestedTests tests (fanquake)
#21586 Add missing suppression for signed-integer-overflow:txmempool.cpp (MarcoFalke)
#21592 Remove option to make TestChain100Setup non-deterministic (MarcoFalke)
#21597 Document race:validation_chainstatemanager_tests suppression (MarcoFalke)
#21599 Replace file level integer overflow suppression with function level suppression (practicalswift)
#21604 Document why no symbol names can be used for suppressions (MarcoFalke)
#21606 fuzz: Extend psbt fuzz target a bit (MarcoFalke)
#21617 fuzz: Fix uninitialized read in i2p test (MarcoFalke)
#21630 fuzz: split FuzzedSock interface and implementation (vasild)
#21634 Skip SQLite fsyncs while testing (achow101)
#21669 Remove spurious double lock tsan suppressions by bumping to clang-12 (MarcoFalke)
#21676 Use mocktime to avoid intermittent failure in rpc_tests (MarcoFalke)
#21677 fuzz: Avoid use of low file descriptor ids (which may be in use) in FuzzedSock (practicalswift)
#21678 Fix TestPotentialDeadLockDetected suppression (hebasto)
#21689 Remove intermittently failing and not very meaningful BOOST_CHECK in cnetaddr_basic (practicalswift)
#21691 Check that no versionbits are re-used (MarcoFalke)
#21707 Extend functional tests for addr relay (mzumsande)
#21712 Test default include_mempool value of gettxout (promag)
#21738 Use clang-12 for ASAN, Add missing suppression (MarcoFalke)
#21740 add new python linter to check file names and permissions (windsok)
#21749 Bump shellcheck version (hebasto)
#21754 Run feature_cltv with MiniWallet (MarcoFalke)
#21762 Speed up mempool_spend_coinbase.py (MarcoFalke)
#21773 fuzz: Ensure prevout is consensus-valid (MarcoFalke)
#21777 Fix feature_notifications.py intermittent issue (MarcoFalke)
#21785 Fix intermittent issue in p2p_addr_relay.py (MarcoFalke)
#21787 Fix off-by-ones in rpc_fundrawtransaction assertions (jonatack)
#21792 Fix intermittent issue in p2p_segwit.py (MarcoFalke)
#21795 fuzz: Terminate immediately if a fuzzing harness tries to perform a DNS lookup (belt and suspenders) (practicalswift)
#21798 fuzz: Create a block template in tx_pool targets (MarcoFalke)
#21804 Speed up p2p_segwit.py (jnewbery)
#21810 fuzz: Various RPC fuzzer follow-ups (practicalswift)
#21814 Fix feature_config_args.py intermittent issue (MarcoFalke)
#21821 Add missing test for empty P2WSH redeem (MarcoFalke)
#21822 Resolve bug in interface_bitcoin_cli.py (klementtan)
#21846 fuzz: Add -fsanitize=integer suppression needed for RPC fuzzer (generateblock) (practicalswift)
#21849 fuzz: Limit toxic test globals to their respective scope (MarcoFalke)
#21867 use MiniWallet for p2p_blocksonly.py (theStack)
#21873 minor fixes & improvements for files linter test (windsok)
#21874 fuzz: Add WRITE_ALL_FUZZ_TARGETS_AND_ABORT (MarcoFalke)
#21884 fuzz: Remove unused –enable-danger-fuzz-link-all option (MarcoFalke)
#21890 fuzz: Limit ParseISO8601DateTime fuzzing to 32-bit (MarcoFalke)
#21891 fuzz: Remove strprintf test cases that are known to fail (MarcoFalke)
#21892 fuzz: Avoid excessively large min fee rate in tx_pool (MarcoFalke)
#21895 Add TSA annotations to the WorkQueue class members (hebasto)
#21900 use MiniWallet for feature_csv_activation.py (theStack)
#21909 fuzz: Limit max insertions in timedata fuzz test (MarcoFalke)
#21922 fuzz: Avoid timeout in EncodeBase58 (MarcoFalke)
#21927 fuzz: Run const CScript member functions only once (MarcoFalke)
#21929 fuzz: Remove incorrect float round-trip serialization test (MarcoFalke)
#21936 fuzz: Terminate immediately if a fuzzing harness tries to create a TCP socket (belt and suspenders) (practicalswift)
#21941 fuzz: Call const member functions in addrman fuzz test only once (MarcoFalke)
#21945 add P2PK support to MiniWallet (theStack)
#21948 Fix off-by-one in mockscheduler test RPC (MarcoFalke)
#21953 fuzz: Add utxo_snapshot target (MarcoFalke)
#21970 fuzz: Add missing CheckTransaction before CheckTxInputs (MarcoFalke)
#21989 Use COINBASE_MATURITY in functional tests (kiminuo)
#22003 Add thread safety annotations (ajtowns)
#22004 fuzz: Speed up transaction fuzz target (MarcoFalke)
#22005 fuzz: Speed up banman fuzz target (MarcoFalke)
#22029 [fuzz] Improve transport deserialization fuzz test coverage (dhruv)
#22048 MiniWallet: introduce enum type for output mode (theStack)
#22057 use MiniWallet (P2PK mode) for feature_dersig.py (theStack)
#22065 Mark CheckTxInputs [[nodiscard]]. Avoid UUM in fuzzing harness coins_view (practicalswift)
#22069 fuzz: don’t try and use fopencookie() when building for Android (fanquake)
#22082 update nanobench from release 4.0.0 to 4.3.4 (martinus)
#22086 remove BasicTestingSetup from unit tests that don’t need it (fanquake)
#22089 MiniWallet: fix fee calculation for P2PK and check tx vsize (theStack)
#21107, bitcoin/bitcoin#22092 Convert documentation into type annotations (fanquake)
#22095 Additional BIP32 test vector for hardened derivation with leading zeros (kristapsk)
#22103 Fix IPv6 check on BSD systems (n-thumann)
#22118 check anchors.dat when node starts for the first time (brunoerg)
#22120 p2p_invalid_block: Check that a block rejected due to too-new tim… (willcl-ark)
#22153 Fix p2p_leak.py intermittent failure (mzumsande)
#22169 p2p, rpc, fuzz: various tiny follow-ups (jonatack)
#22176 Correct outstanding -Werror=sign-compare errors (Empact)
#22180 fuzz: Increase branch coverage of the float fuzz target (MarcoFalke)
#22187 Add sync_blocks in wallet_orphanedreward.py (domob1812)
#22201 Fix TestShell to allow running in Jupyter Notebook (josibake)
#22202 Add temporary coinstats suppressions (MarcoFalke)
#22203 Use ConnmanTestMsg from test lib in denialofservice_tests (MarcoFalke)
#22210 Use MiniWallet in test_no_inherited_signaling RBF test (MarcoFalke)
#22224 Update msvc and appveyor builds to use Qt5.12.11 binaries (sipsorcery)
#22249 Kill process group to avoid dangling processes when using --failfast (S3RK)
#22267 fuzz: Speed up crypto fuzz target (MarcoFalke)
#22270 Add bitcoin-util tests (+refactors) (MarcoFalke)
#22271 fuzz: Assert roundtrip equality for CPubKey (theStack)
#22279 fuzz: add missing ECCVerifyHandle to base_encode_decode (apoelstra)
#22292 bench, doc: benchmarking updates and fixups (jonatack)
#22306 Improvements to p2p_addr_relay.py (amitiuttarwar)
#22310 Add functional test for replacement relay fee check (ariard)
#22311 Add missing syncwithvalidationinterfacequeue in p2p_blockfilters (MarcoFalke)
#22313 Add missing sync_all to feature_coinstatsindex (MarcoFalke)
#22322 fuzz: Check banman roundtrip (MarcoFalke)
#22363 Use script_util helpers for creating P2{PKH,SH,WPKH,WSH} scripts (theStack)
#22399 fuzz: Rework CTxDestination fuzzing (MarcoFalke)
#22408 add tests for bad-txns-prevout-null reject reason (theStack)
#22445 fuzz: Move implementations of non-template fuzz helpers from util.h to util.cpp (sriramdvt)
#22446 Fix wallet_listdescriptors.py if bdb is not compiled (hebasto)
#22447 Whitelist rpc_rawtransaction peers to speed up tests (jonatack)
#22742 Use proper target in do_fund_send (S3RK)
Miscellaneous
#19337 sync: Detect double lock from the same thread (vasild)
#19809 log: Prefix log messages with function name and source code location if -logsourcelocations is set (practicalswift)
#19866 eBPF Linux tracepoints (jb55)
#20024 init: Fix incorrect warning “Reducing -maxconnections from N to N-1, because of system limitations” (practicalswift)
#20145 contrib: Add getcoins.py script to get coins from (signet) faucet (kallewoof)
#20255 util: Add assume() identity function (MarcoFalke)
#20288 script, doc: Contrib/seeds updates (jonatack)
#20358 src/randomenv.cpp: Fix build on uclibc (ffontaine)
#20406 util: Avoid invalid integer negation in formatmoney and valuefromamount (practicalswift)
#20434 contrib: Parse elf directly for symbol and security checks (laanwj)
#20451 lint: Run mypy over contrib/devtools (fanquake)
#20476 contrib: Add test for elf symbol-check (laanwj)
#20530 lint: Update cppcheck linter to c++17 and improve explicit usage (fjahr)
#20589 log: Clarify that failure to read/write fee_estimates.dat is non-fatal (MarcoFalke)
#20602 util: Allow use of c++14 chrono literals (MarcoFalke)
#20605 init: Signal-safe instant shutdown (laanwj)
#20608 contrib: Add symbol check test for PE binaries (fanquake)
#20689 contrib: Replace binary verification script verify.sh with python rewrite (theStack)
#20715 util: Add argsmanager::getcommand() and use it in bitcoin-wallet (MarcoFalke)
#20735 script: Remove outdated extract-osx-sdk.sh (hebasto)
#20817 lint: Update list of spelling linter false positives, bump to codespell 2.0.0 (theStack)
#20884 script: Improve robustness of bitcoind.service on startup (hebasto)
#20906 contrib: Embed c++11 patch in install_db4.sh (gruve-p)
#21004 contrib: Fix docker args conditional in gitian-build (setpill)
#21007 bitcoind: Add -daemonwait option to wait for initialization (laanwj)
#21041 log: Move “Pre-allocating up to position 0x[…] in […].dat” log message to debug category (practicalswift)
#21059 Drop boost/preprocessor dependencies (hebasto)
#21087 guix: Passthrough BASE_CACHE into container (dongcarl)
#21088 guix: Jump forwards in time-machine and adapt (dongcarl)
#21089 guix: Add support for powerpc64{,le} (dongcarl)
#21110 util: Remove boost posix_time usage from gettime* (fanquake)
#21111 Improve OpenRC initscript (parazyd)
#21123 code style: Add EditorConfig file (kiminuo)
#21173 util: Faster hexstr => 13% faster blocktojson (martinus)
#21221 tools: Allow argument/parameter bin packing in clang-format (jnewbery)
#21244 Move GetDataDir to ArgsManager (kiminuo)
#21255 contrib: Run test-symbol-check for risc-v (fanquake)
#21271 guix: Explicitly set umask in build container (dongcarl)
#21300 script: Add explanatory comment to tc.sh (dscotese)
#21317 util: Make assume() usable as unary expression (MarcoFalke)
#21336 Make .gitignore ignore src/test/fuzz/fuzz.exe (hebasto)
#21337 guix: Update darwin native packages dependencies (hebasto)
#21405 compat: remove memcpy -> memmove backwards compatibility alias (fanquake)
#21418 contrib: Make systemd invoke dependencies only when ready (laanwj)
#21447 Always add -daemonwait to known command line arguments (hebasto)
#21471 bugfix: Fix bech32_encode calls in gen_key_io_test_vectors.py (sipa)
#21615 script: Add trusted key for hebasto (hebasto)
#21664 contrib: Use lief for macos and windows symbol & security checks (fanquake)
#21695 contrib: Remove no longer used contrib/bitcoin-qt.pro (hebasto)
#21711 guix: Add full installation and usage documentation (dongcarl)
#21799 guix: Use gcc-8 across the board (dongcarl)
#21802 Avoid UB in util/asmap (advance a dereferenceable iterator outside its valid range) (MarcoFalke)
#21823 script: Update reviewers (jonatack)
#21850 Remove GetDataDir(net_specific) function (kiminuo)
#21871 scripts: Add checks for minimum required os versions (fanquake)
#21966 Remove double serialization; use software encoder for fee estimation (sipa)
#22060 contrib: Add torv3 seed nodes for testnet, drop v2 ones (laanwj)
#22244 devtools: Correctly extract symbol versions in symbol-check (laanwj)
#22533 guix/build: Remove vestigial SKIPATTEST.TAG (dongcarl)
#22643 guix-verify: Non-zero exit code when anything fails (dongcarl)
#22654 guix: Don’t include directory name in SHA256SUMS (achow101)
Documentation
#15451 clarify getdata limit after #14897 (HashUnlimited)
#15545 Explain why CheckBlock() is called before AcceptBlock (Sjors)
#17350 Add developer documentation to isminetype (HAOYUatHZ)
#17934 Use CONFIG_SITE variable instead of –prefix option (hebasto)
#18030 Coin::IsSpent() can also mean never existed (Sjors)
#18096 IsFinalTx comment about nSequence & OP_CLTV (nothingmuch)
#18568 Clarify developer notes about constant naming (ryanofsky)
#19961 doc: tor.md updates (jonatack)
#19968 Clarify CRollingBloomFilter size estimate (robot-dreams)
#20200 Rename CODEOWNERS to REVIEWERS (adamjonas)
#20329 docs/descriptors.md: Remove hardened marker in the path after xpub (dgpv)
#20380 Add instructions on how to fuzz the P2P layer using Honggfuzz NetDriver (practicalswift)
#20414 Remove generated manual pages from master branch (laanwj)
#20473 Document current boost dependency as 1.71.0 (laanwj)
#20512 Add bash as an OpenBSD dependency (emilengler)
#20568 Use FeeModes doc helper in estimatesmartfee (MarcoFalke)
#20577 libconsensus: add missing error code description, fix NBitcoin link (theStack)
#20587 Tidy up Tor doc (more stringent) (wodry)
#20592 Update wtxidrelay documentation per BIP339 (jonatack)
#20601 Update for FreeBSD 12.2, add GUI Build Instructions (jarolrod)
#20635 fix misleading comment about call to non-existing function (pox)
#20646 Refer to BIPs 339/155 in feature negotiation (jonatack)
#20653 Move addr relay comment in net to correct place (MarcoFalke)
#20677 Remove shouty enums in net_processing comments (sdaftuar)
#20741 Update ‘Secure string handling’ (prayank23)
#20757 tor.md and -onlynet help updates (jonatack)
#20829 Add -netinfo help (jonatack)
#20830 Update developer notes with signet (jonatack)
#20890 Add explicit macdeployqtplus dependencies install step (hebasto)
#20913 Add manual page generation for bitcoin-util (laanwj)
#20985 Add xorriso to macOS depends packages (fanquake)
#20986 Update developer notes to discourage very long lines (jnewbery)
#20987 Add instructions for generating RPC docs (ben-kaufman)
#21026 Document use of make-tag script to make tags (laanwj)
#21028 doc/bips: Add BIPs 43, 44, 49, and 84 (luke-jr)
#21049 Add release notes for listdescriptors RPC (S3RK)
#21060 More precise -debug and -debugexclude doc (wodry)
#21077 Clarify -timeout and -peertimeout config options (glozow)
#21105 Correctly identify script type (niftynei)
#21163 Guix is shipped in Debian and Ubuntu (MarcoFalke)
#21210 Rework internal and external links (MarcoFalke)
#21246 Correction for VerifyTaprootCommitment comments (roconnor-blockstream)
#21263 Clarify that squashing should happen before review (MarcoFalke)
#21323 guix, doc: Update default HOSTS value (hebasto)
#21324 Update build instructions for Fedora (hebasto)
#21343 Revamp macOS build doc (jarolrod)
#21346 install qt5 when building on macOS (fanquake)
#21384 doc: add signet to bitcoin.conf documentation (jonatack)
#21394 Improve comment about protected peers (amitiuttarwar)
#21398 Update fuzzing docs for afl-clang-lto (MarcoFalke)
#21444 net, doc: Doxygen updates and fixes in netbase.{h,cpp} (jonatack)
#21481 Tell howto install clang-format on Debian/Ubuntu (wodry)
#21567 Fix various misleading comments (glozow)
#21661 Fix name of script guix-build (Emzy)
#21672 Remove boostrap info from GUIX_COMMON_FLAGS doc (fanquake)
#21688 Note on SDK for macOS depends cross-compile (jarolrod)
#21709 Update reduce-memory.md and bitcoin.conf -maxconnections info (jonatack)
#21710 update helps for addnode rpc and -addnode/-maxconnections config options (jonatack)
#21752 Clarify that feerates are per virtual size (MarcoFalke)
#21811 Remove Visual Studio 2017 reference from readme (sipsorcery)
#21818 Fixup -coinstatsindex help, update bitcoin.conf and files.md (jonatack)
#21856 add OSS-Fuzz section to fuzzing.md doc (adamjonas)
#21912 Remove mention of priority estimation (MarcoFalke)
#21925 Update bips.md for 0.21.1 (MarcoFalke)
#21942 improve make with parallel jobs description (klementtan)
#21947 Fix OSS-Fuzz links (MarcoFalke)
#21988 note that brew installed qt is not supported (jarolrod)
#22056 describe in fuzzing.md how to reproduce a CI crash (jonatack)
#22080 add maxuploadtarget to bitcoin.conf example (jarolrod)
#22088 Improve note on choosing posix mingw32 (jarolrod)
#22109 Fix external links (IRC, …) (MarcoFalke)
#22121 Various validation doc fixups (MarcoFalke)
#22172 Update tor.md, release notes with removal of tor v2 support (jonatack)
#22204 Remove obsolete okSafeMode RPC guideline from developer notes (theStack)
#22208 Update REVIEWERS (practicalswift)
#22250 add basic I2P documentation (vasild)
#22296 Final merge of release notes snippets, mv to wiki (MarcoFalke)
#22335 recommend --disable-external-signer in OpenBSD build guide (theStack)
#22339 Document minimum required libc++ version (hebasto)
#22349 Repository IRC updates (jonatack)
#22360 Remove unused section from release process (MarcoFalke)
#22369 Add steps for Transifex to release process (jonatack)
#22393 Added info to bitcoin.conf doc (bliotti)
#22402 Install Rosetta on M1-macOS for qt in depends (hebasto)
#22432 Fix incorrect testmempoolaccept doc (glozow)
#22648 doc, test: improve i2p/tor docs and i2p reachable unit tests (jonatack)
Credits
Thanks to everyone who directly contributed to this release:

Aaron Clauson
Adam Jonas
amadeuszpawlik
Amiti Uttarwar
Andrew Chow
Andrew Poelstra
Anthony Towns
Antoine Poinsot
Antoine Riard
apawlik
apitko
Ben Carman
Ben Woosley
benk10
Bezdrighin
Block Mechanic
Brian Liotti
Bruno Garcia
Carl Dong
Christian Decker
coinforensics
Cory Fields
Dan Benjamin
Daniel Kraft
Darius Parvin
Dhruv Mehta
Dmitry Goncharov
Dmitry Petukhov
dplusplus1024
dscotese
Duncan Dean
Elle Mouton
Elliott Jin
Emil Engler
Ethan Heilman
eugene
Evan Klitzke
Fabian Jahr
Fabrice Fontaine
fanquake
fdov
flack
Fotis Koutoupas
Fu Yong Quah
fyquah
glozow
Gregory Sanders
Guido Vranken
Gunar C. Gessner
h
HAOYUatHZ
Hennadii Stepanov
Igor Cota
Ikko Ashimine
Ivan Metlushko
jackielove4u
James O’Beirne
Jarol Rodriguez
Joel Klabo
John Newbery
Jon Atack
Jonas Schnelli
João Barbosa
Josiah Baker
Karl-Johan Alm
Kiminuo
Klement Tan
Kristaps Kaupe
Larry Ruane
lisa neigut
Lucas Ontivero
Luke Dashjr
Maayan Keshet
MarcoFalke
Martin Ankerl
Martin Zumsande
Michael Dietz
Michael Polzer
Michael Tidwell
Niklas Gögge
nthumann
Oliver Gugger
parazyd
Patrick Strateman
Pavol Rusnak
Peter Bushnell
Pierre K
Pieter Wuille
PiRK
pox
practicalswift
Prayank
R E Broadley
Rafael Sadowski
randymcmillan
Raul Siles
Riccardo Spagni
Russell O’Connor
Russell Yanofsky
S3RK
saibato
Samuel Dobson
sanket1729
Sawyer Billings
Sebastian Falbesoner
setpill
sgulls
sinetek
Sjors Provoost
Sriram
Stephan Oeste
Suhas Daftuar
Sylvain Goumy
t-bast
Troy Giorshev
Tushar Singla
Tyler Chambers
Uplab
Vasil Dimov
W. J. van der Laan
willcl-ark
William Bright
William Casarin
windsok
wodry
Yerzhan Mazhkenov
Yuval Kogman
Zero
As well as to everyone that helped with translations on Transifex.


















----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


















Bitcoin Core 25.0
25.0 Release Notes
Bitcoin Core version 25.0 is now available from:

https://bitcoin.org/bin/bitcoin-core-25.0/

This release includes new features, various bug fixes and performance improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

https://github.com/bitcoin/bitcoin/issues

To receive security and update notifications, please subscribe to:

https://bitcoincore.org/en/list/announcements/join/

How to Upgrade
If you are running an older version, shut it down. Wait until it has completely shut down (which might take a few minutes in some cases), then run the installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on macOS) or bitcoind/bitcoin-qt (on Linux).

Upgrading directly from a version of Bitcoin Core that has reached its EOL is possible, but it might take some time if the data directory needs to be migrated. Old wallet versions of Bitcoin Core are generally supported.

Compatibility
Bitcoin Core is supported and extensively tested on operating systems using the Linux kernel, macOS 10.15+, and Windows 7 and newer. Bitcoin Core should also work on most other Unix-like systems but is not as frequently tested on them. It is not recommended to use Bitcoin Core on unsupported systems.

Notable changes
P2P and network changes
Transactions of non-witness size 65 bytes and above are now allowed by mempool and relay policy. This is to better reflect the actual afforded protections against CVE-2017-12842 and open up additional use-cases of smaller transaction sizes. (#26265)
New RPCs
The scanblocks RPC returns the relevant blockhashes from a set of descriptors by scanning all blockfilters in the given range. It can be used in combination with the getblockheader and rescanblockchain RPCs to achieve fast wallet rescans. Note that this functionality can only be used if a compact block filter index (-blockfilterindex=1) has been constructed by the node. (#23549)
Updated RPCs
All JSON-RPC methods accept a new named parameter called args that can contain positional parameter values. This is a convenience to allow some parameter values to be passed by name without having to name every value. The python test framework and bitcoin-cli tool both take advantage of this, so for example:
bitcoin-cli -named createwallet wallet_name=mywallet load_on_startup=1
Can now be shortened to:

bitcoin-cli -named createwallet mywallet load_on_startup=1
The verifychain RPC will now return false if the checks didn’t fail, but couldn’t be completed at the desired depth and level. This could be due to missing data while pruning, due to an insufficient dbcache or due to the node being shutdown before the call could finish. (#25574)

sendrawtransaction has a new, optional argument, maxburnamount with a default value of 0. Any transaction containing an unspendable output with a value greater than maxburnamount will not be submitted. At present, the outputs deemed unspendable are those with scripts that begin with an OP_RETURN code (known as ‘datacarriers’), scripts that exceed the maximum script size, and scripts that contain invalid opcodes.

The testmempoolaccept RPC now returns 2 additional results within the “fees” result: “effective-feerate” is the feerate including fees and sizes of transactions validated together if package validation was used, and also includes any modified fees from prioritisetransaction. The “effective-includes” result lists the wtxids of transactions whose modified fees and sizes were used in the effective-feerate (#26646).

decodescript may now infer a Miniscript descriptor under P2WSH context if it is not lacking information. (#27037)

finalizepsbt is now able to finalize a transaction with inputs spending Miniscript-compatible P2WSH scripts. (#24149)

Changes to wallet related RPCs can be found in the Wallet section below.

Build System
The --enable-upnp-default and --enable-natpmp-default options have been removed. If you want to use port mapping, you can configure it using a .conf file, or by passing the relevant options at runtime. (#26896)
Updated settings
If the -checkblocks or -checklevel options are explicitly provided by the user, but the verification checks cannot be completed due to an insufficient dbcache, Bitcoin Core will now return an error at startup. (#25574)

Ports specified in -port and -rpcport options are now validated at startup. Values that previously worked and were considered valid can now result in errors. (#22087)

Setting -blocksonly will now reduce the maximum mempool memory to 5MB (users may still use -maxmempool to override). Previously, the default 300MB would be used, leading to unexpected memory usage for users running with -blocksonly expecting it to eliminate mempool memory usage.

As unused mempool memory is shared with dbcache, this also reduces the dbcache size for users running with -blocksonly, potentially impacting performance.

Setting -maxconnections=0 will now disable -dnsseed and -listen (users may still set them to override).

Changes to GUI or wallet related settings can be found in the GUI or Wallet section below.

New settings
The shutdownnotify option is used to specify a command to execute synchronously before Bitcoin Core has begun its shutdown sequence. (#23395)
Wallet
The minconf option, which allows a user to specify the minimum number of confirmations a UTXO being spent has, and the maxconf option, which allows specifying the maximum number of confirmations, have been added to the following RPCs in #25375:
fundrawtransaction
send
walletcreatefundedpsbt
sendall
Added a new next_index field in the response in listdescriptors to have the same format as importdescriptors (#26194)

RPC listunspent now has a new argument include_immature_coinbase to include coinbase UTXOs that don’t meet the minimum spendability depth requirement (which before were silently skipped). (#25730)

Rescans for descriptor wallets are now significantly faster if compact block filters (BIP158) are available. Since those are not constructed by default, the configuration option “-blockfilterindex=1” has to be provided to take advantage of the optimization. This improves the performance of the RPC calls rescanblockchain, importdescriptors and restorewallet. (#25957)

RPC unloadwallet now fails if a rescan is in progress. (#26618)

Wallet passphrases may now contain null characters. Prior to this change, only characters up to the first null character were recognized and accepted. (#27068)

Address Purposes strings are now restricted to the currently known values of “send”, “receive”, and “refund”. Wallets that have unrecognized purpose strings will have loading warnings, and the listlabels RPC will raise an error if an unrecognized purpose is requested. (#27217)

In the createwallet, loadwallet, unloadwallet, and restorewallet RPCs, the “warning” string field is deprecated in favor of a “warnings” field that returns a JSON array of strings to better handle multiple warning messages and for consistency with other wallet RPCs. The “warning” field will be fully removed from these RPCs in v26. It can be temporarily re-enabled during the deprecation period by launching bitcoind with the configuration option -deprecatedrpc=walletwarningfield. (#27279)

Descriptor wallets can now spend coins sent to P2WSH Miniscript descriptors. (#24149)
GUI changes
The “Mask values” is a persistent option now. (gui#701)
The “Mask values” option affects the “Transaction” view now, in addition to the “Overview” one. (gui#708)
REST
A new /rest/deploymentinfo endpoint has been added for fetching various state info regarding deployments of consensus changes. (#25412)
Binary verification
The binary verification script has been updated. In previous releases it would verify that the binaries had been signed with a single “release key”. In this release and moving forward it will verify that the binaries are signed by a threshold of trusted keys. For more details and examples, see: https://github.com/bitcoin/bitcoin/blob/master/contrib/verify-binaries/README.md (#27358)
Low-level changes
RPC
The JSON-RPC server now rejects requests where a parameter is specified multiple times with the same name, instead of silently overwriting earlier parameter values with later ones. (#26628)
RPC listsinceblock now accepts an optional label argument to fetch incoming transactions having the specified label. (#25934)
Previously setban, addpeeraddress, walletcreatefundedpsbt, methods allowed non-boolean and non-null values to be passed as boolean parameters. Any string, number, array, or object value that was passed would be treated as false. After this change, passing any value except true, false, or null now triggers a JSON value is not of expected type error. (#26213)
Credits
Thanks to everyone who directly contributed to this release:

0xb10c
721217.xyz
@RandyMcMillan
amadeuszpawlik
Amiti Uttarwar
Andrew Chow
Andrew Toth
Anthony Towns
Antoine Poinsot
Aurèle Oulès
Ben Woosley
Bitcoin Hodler
brunoerg
Bushstar
Carl Dong
Chris Geihsler
Cory Fields
David Gumberg
dergoegge
Dhruv Mehta
Dimitris Tsapakidis
dougEfish
Douglas Chimento
ekzyis
Elichai Turkel
Ethan Heilman
Fabian Jahr
FractalEncrypt
furszy
Gleb Naumenko
glozow
Greg Sanders
Hennadii Stepanov
hernanmarino
ishaanam
ismaelsadeeq
James O’Beirne
jdjkelly@gmail.com
Jeff Ruane
Jeffrey Czyz
Jeremy Rubin
Jesse Barton
João Barbosa
JoaoAJMatos
John Moffett
Jon Atack
Jonas Schnelli
jonatack
Joshua Kelly
josibake
Juan Pablo Civile
kdmukai
klementtan
Kolby ML
kouloumos
Kristaps Kaupe
laanwj
Larry Ruane
Leonardo Araujo
Leonardo Lazzaro
Luke Dashjr
MacroFake
MarcoFalke
Martin Leitner-Ankerl
Martin Zumsande
Matt Whitlock
Matthew Zipkin
Michael Ford
Miles Liu
mruddy
Murray Nesbitt
muxator
omahs
pablomartin4btc
Pasta
Pieter Wuille
Pttn
Randall Naar
Riahiamirreza
roconnor-blockstream
Russell O’Connor
Ryan Ofsky
S3RK
Sebastian Falbesoner
Seibart Nedor
sinetek
Sjors Provoost
Skuli Dulfari
SomberNight
Stacie Waleyko
stickies-v
stratospher
Suhas Daftuar
Suriyaa Sundararuban
TheCharlatan
Vasil Dimov
Vasil Stoyanov
virtu
w0xlt
willcl-ark
yancy
Yusuf Sahin HAMZA
As well as to everyone that helped with translations on Transifex.